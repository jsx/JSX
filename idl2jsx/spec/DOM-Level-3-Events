<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>Document Object Model (DOM) Level 3 Events Specification</title>
	<link rel="author" href="mailto:www-dom@w3.org" />
	<link rel="help" href="http://www.w3.org/DOM/" />
	<link rel="alternate stylesheet" type="text/css" media="screen" title="geek" href="geek.css" />
	<link rel="stylesheet" type="text/css" href="spec-WD.css" />
	<link rel="stylesheet" type="text/css" href="http://www.w3.org/StyleSheets/TR/w3c-tr.css" />
	<link rel="stylesheet" type="text/css" href="http://www.w3.org/StyleSheets/TR/W3C-WD" />
</head>
<body>
	<div id="Overview" class="head">
		<p><a href="http://www.w3.org/"><img height="48" width="72" alt="W3C" src="http://www.w3.org/Icons/w3c_home" /></a></p>

		<h1 id="Overview-title">Document Object Model (DOM) Level 3 Events Specification</h1>

		<h2 id="Overview-W3C-doctype">W3C Working Draft <span class="2012-09-06">06 September 2012</span></h2>
		<dl>
			<dt>This version:</dt>
			<dd><a href="http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120906/">http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120906/</a></dd>

			<dt>Latest stable version:</dt>
			<dd><a href="http://www.w3.org/TR/DOM-Level-3-Events/">http://www.w3.org/TR/DOM-Level-3-Events/</a></dd>

			<dt>Previous version:</dt>
			<dd><a href="http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/">http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/</a></dd>

			<dt>Editor's Draft:</dt>
			<dd><a href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html">http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html</a></dd>
		</dl>
		<dl>
			<dt>Public Comments:</dt>
			<dd><a href="mailto:www-dom@w3.org">www-dom@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/www-dom/">archive</a>)</dd>

			<dt>Working Group:</dt>
			<dd><a href="http://www.w3.org/2008/webapps/">Web Applications WG</a></dd>
		</dl>
		<dl>
			<dt>Editors:</dt>
			<dd>Travis Leithead, <em>Microsoft</em></dd>
			<dd>Jacob Rossi, <em>Microsoft</em></dd>
			<dd>Doug Schepers, <em>W3C (until May 2011)</em></dd>
			<dd>Bj&#xF6;rn H&#xF6;hrmann, <em>Invited Expert (until December 2007)</em></dd>
			<dd>Philippe Le H&#xE9;garet, <em>W3C (until November 2003)</em></dd>
			<dd>Tom Pixley, <em>Netscape Communications Corporation (until July 2002)</em></dd>
		</dl>
		<p class="copyright" id="copyright-copy-2010-w3creg-mit-ercim-kei"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> &#xA9; 2012 <a
			href="http://www.w3.org/"><acronym title="World Wide Web Consortium">W3C</acronym></a><sup>&#xAE;</sup> (<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>,
			<a href="http://www.ercim.eu/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>, <a href="http://www.keio.ac.jp/">
			Keio</a>), All Rights Reserved. W3C <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>, <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">
			trademark</a> and <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document use</a> rules apply.</p>
	</div>
	<hr title="separator from header" />

	<!-- Section: Abstract ========================================================-->

	<h2>Abstract</h2>
	<div class="abstract">
		<p>This specification defines the Document Object Model Events Level 3, a generic platform- and language-neutral event system which allows registration of event handlers,
			describes event flow through a tree structure, and provides basic contextual information for each event. The Document Object Model Events Level 3 builds on the
			Document Object Model Events Level 2 [<a href="#references-DOM2Events">DOM2 Events</a>].</p>
	</div>

	<!-- Section: SOTD ========================================================-->

	<h2>Status of This Document</h2>
	<div>
		<p><em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of
			current W3C publications and the latest revision of this technical report can be found in the <a href="http://www.w3.org/TR/">W3C technical reports index</a> at
			http://www.w3.org/TR/. </em></p>

		<p>This document is a Last Call Working Draft of the Document Object Model Level 3 Events (DOM3 Events) specification. This document was previously
			published as a W3C Note, pending further feedback from implementers, and is now being revised to reflect the current state of implementation.  It is expected that
			this specification will progress to W3C Recommendation status after review and refinement.</p>

		<p>The <a href="http://www.w3.org/2008/webapps/">Web Applications Working Group</a> (WebApps WG) believes this specification to be feature complete, subject to further
			feedback during the Last Call period.  The Last Call period extends through 27 September 2012.  The public is encouraged to send comments to the WebApps Working Group's
			public mailing list for DOM specifications <a href="mailto:www-dom@w3.org">www-dom@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/www-dom/">archive</a>)
			with subject tag prefix <em>DOM3Events</em> (e.g., [DOM3Events] comment...).
			See <a href="http://www.w3.org/Mail/">W3C mailing list and archive usage guidelines</a>.</p>

		<p id="this-document-is-produced-by-the-web-app">This document is produced by the <a href="http://www.w3.org/2008/webapps/">Web Applications WG</a>, part of the <a
			href="http://www.w3.org/2006/rwc/Activity">Rich Web Clients Activity</a> in the W3C <a href="http://www.w3.org/Interaction/">Interaction Domain</a>. It is expected
			that this document will progress along the W3C's Recommendation track. Publication as a Working Draft does not imply endorsement by the W3C Membership. This is
			a draft document and <span class="may">may</span> be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other
			than work in progress.</p>

		<p id="latest-editors-draft"><strong>You can find the latest <a href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html">Editor's Draft</a> of
			this document in the <a href="http://dev.w3.org/">W3C's CVS repository</a>, which is updated on a regular basis.</strong></p>

		<p>Publication as a Working Draft does not imply endorsement by the W3C Membership. This is a draft document and <span class="may">may</span> be updated, replaced or
			obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.</p>

		<p id="this-document-was-produced-by-a-group-op">This document was produced by a group operating under the <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">
			5 February 2004 W3C Patent Policy</a>. W3C maintains a <a href="http://www.w3.org/2004/01/pp-impl/42538/status" rel="disclosure">public list of any patent disclosures</a>
			made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a
			patent which the individual believes contains <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> <span class="must">must</span> disclose
			the information in accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>.</p>

		<p id="unstable"><strong class="redNote">Implementers <span class="should">should</span> be aware that this document is not stable.</strong> Implementers who are not
			taking part in the discussions are likely to find the specification changing out from under them in incompatible ways. Vendors interested in implementing this document
			before it eventually reaches the Candidate Recommendation stage <span class="should">should</span> join the aforementioned mailing lists and take part in the discussions.</p>
	</div>

	<!-- Section: TOC ========================================================-->

	<h2 id="toc">Table of Contents</h2>
	<ul class="toc">
		<li><a href="#dom-events">1. Document Object Model Events</a>
			<ul class="toc">
				<li><a href="#dom-events-overview">1.1 Introduction</a></li>
				<li><a href="#dom-events-conformance">1.2 Conformance</a></li>
				<li><a href="#style-conventions">1.3 Stylistic Conventions</a></li>
			</ul>
		</li>
		<li><a href="#glossary" class="glossary">2. Glossary</a></li>
		<li><a href="#dom-event-architecture">3. DOM Event Architecture</a>
			<ul class="toc">
				<li><a href="#event-flow">3.1 Event dispatch and DOM event flow</a></li>
				<li><a href="#event-flow-default-cancel">3.2 Default actions and cancelable events</a></li>
				<li><a href="#sync-async">3.3 Synchronous and asynchronous events</a>
					<ul class="toc">
						<li><a href="#event-order-and-loops">3.3.1 Event order and event loops</a></li>
					</ul>
				</li>
				<li><a href="#trusted-events">3.4 Trusted events</a></li>
				<li><a href="#event-flow-activation">3.5 Activation triggers and behavior</a>
					<ul class="toc">
						<li><a href="#click-synthesis">3.5.1 Activation event synthesis</a></li>
						<li><a href="#events-activation-event-order">3.5.2 Activation event order</a></li>
					</ul>
				</li>
				<li><a href="#event-exceptions">3.6 Event exceptions</a></li>
			</ul>
		</li>
		<li><a href="#event-interfaces">4. Basic Event Interfaces</a>
			<ul class="toc">
				<li><a href="#interface-Event">4.1 Interface Event</a></li>
				<li><a href="#interface-CustomEvent">4.2 Interface CustomEvent</a></li>
				<li><a href="#interface-EventTarget">4.3 Interface EventTarget</a></li>
				<li><a href="#interface-EventListener">4.4 Interface EventListener</a></li>
				<li><a href="#interface-DocumentEvent">4.5 Interface DocumentEvent</a></li>
			</ul>
		</li>
		<li><a href="#events-module">5. Events Module</a>
			<ul class="toc">
				<li><a href="#event-types">5.1 Event Types</a>
					<ul class="toc">
						<li><a href="#event-types-list">5.1.1 List of DOM3 Event Types</a></li>
					</ul>
				</li>
				<li><a href="#event-definitions">5.2 Event Module Definitions</a>
					<ul class="toc">
						<li><a href="#events-uievents">5.2.1 User Interface Event Types</a>
							<ul class="toc">
								<li><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code> event</a></li>
								<li><a class="eventtype" href="#event-type-load"><code>load</code> event</a></li>
								<li><a class="eventtype" href="#event-type-unload"><code>unload</code> event</a></li>
								<li><a class="eventtype" href="#event-type-abort"><code>abort</code> event</a></li>
								<li><a class="eventtype" href="#event-type-error"><code>error</code> event</a></li>
								<li><a class="eventtype" href="#event-type-select"><code>select</code> event</a></li>
								<li><a class="eventtype" href="#event-type-resize"><code>resize</code> event</a></li>
								<li><a class="eventtype" href="#event-type-scroll"><code>scroll</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-focusevent">5.2.2 Focus Event Types</a>
							<ul class="toc">
								<li><a href="#events-focusevent-event-order">5.2.1.1 Focus Interface Event Order</a></li>
								<li><a href="#events-focusevent-doc-focus">5.2.1.2 Document Focus and Focus Context</a></li>
								<li><a class="eventtype" href="#event-type-blur"><code>blur</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMFocusOut"><code>DOMFocusOut</code> event</a></li>
								<li><a class="eventtype" href="#event-type-focus"><code>focus</code> event</a></li>
								<li><a class="eventtype" href="#event-type-focusIn"><code>focusin</code> event</a></li>
								<li><a class="eventtype" href="#event-type-focusout"><code>focusout</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-mouseevents">5.2.3 Mouse Event Types</a>
							<ul class="toc">
								<li><a href="#events-mouseevent-event-order">5.2.3.2 Mouse Event Order</a></li>
								<li><a class="eventtype" href="#event-type-click"><code>click</code> event</a></li>
								<li><a class="eventtype" href="#event-type-dblclick"><code>dblclick</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mousedown"><code>mousedown</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code> event</a></li>
								<li><a class="eventtype" href="#event-type-mouseup"><code>mouseup</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-wheelevents">5.2.4 Wheel Event Types</a>
							<ul class="toc">
								<li><a class="eventtype" href="#event-type-wheel"><code>wheel</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-keyboardevents">5.2.5 Keyboard Event Types</a>
							<ul class="toc">
								<li><a href="#events-keyboard-event-order">5.2.5.1 Keyboard Event Order</a></li>
								<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code> event</a></li>
								<li><a class="eventtype" href="#event-type-keypress"><code>keypress</code> event</a></li>
								<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-compositionevents">5.2.6 Composition Event Types</a>
							<ul class="toc">
								<li><a href="#events-composition-event-order">5.2.6.1 Composition Event Order</a></li>
								<li><a href="#handwriting">5.2.6.2 Handwriting Recognition Systems</a></li>
								<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code> event</a></li>
								<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code> event</a></li>
								<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code> event</a></li>
							</ul>
						</li>
						<li><a href="#events-mutationevents">5.2.7 Mutation Events</a>
							<ul class="toc">
								<li><a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMNodeInserted"><code>DOMNodeInserted</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMNodeInsertedIntoDocument"><code>DOMNodeInsertedIntoDocument</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMNodeRemoved"><code>DOMNodeRemoved</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMNodeRemovedFromDocument"><code>DOMNodeRemovedFromDocument</code> event</a></li>
								<li><a class="eventtype" href="#event-type-DOMSubtreeModified"><code>DOMSubtreeModified</code> event</a></li>
							</ul>
						</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#keys">6. Keyboard events and key values</a>
			<ul class="toc">
				<li><a href="#keyboard-input">6.1 Keyboard Input</a>
					<ul class="toc">
						<li><a href="#key-legends">6.1.1 Key Legends</a></li>
						<li><a href="#keyboard-layout">6.1.2 Keyboard Layout</a>
							<ul class="toc">
								<li><a href="#keyboard-desktop">6.1.2.1 Desktop and Laptop Keyboards</a></li>
								<li><a href="#keyboard-mobile">6.1.2.2 Mobile Keypads</a></li>
								<li><a href="#keyboard-chording-virtual">6.1.2.4 Virtual Keyboards and Chording Keyboards</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#keys-keyvalues">6.2 Key Values</a>
					<ul class="toc">
						<li><a href="#keys-unicode">6.2.1 Key Values and Unicode</a></li>
						<li><a href="#keys-Modifiers">6.2.2 Modifier keys</a></li>
						<li><a href="#keys-DeadKeys">6.2.3 Dead keys</a></li>
						<li><a href="#keys-IME">6.2.4 Input Method Editors</a>
							<ul class="toc">
								<li><a href="#keys-IME_keys">6.2.4.1 Input Method Editor mode keys</a></li>
							</ul>
						</li>
						<li><a href="#keys-cancelable_keys">6.2.5 Default actions and cancelable keyboard events</a></li>
						<li><a href="#keys-Guide">6.2.6 Guidelines for selecting and defining key values</a></li>
						<li><a href="#key-values">6.2.7 Key Values Set</a>
							<ul class="toc">
								<li><a href="#key-values-list">6.2.7.1 Key Values List</a></li>
							</ul>
						</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#new-event-interface-initializers">Appendix A: Initializing New Event Interfaces</a>
			<ul class="toc">
				<li><a href="#event-initializers">A.1 Supplemental Initializer Interfaces</a></li>
			</ul>
		</li>
		<li><a href="#legacy-key-attributes">Appendix B: Legacy key attributes: keyCode, charCode, and which</a>
			<ul class="toc">
				<li><a href="#KeyboardEvent-supplemental-interface">B.1 Legacy KeyboardEvent supplemental interface</a></li>
				<li><a href="#legacy-key-models">B.2 Legacy key models</a>
					<ul class="toc">
						<li><a href="#determine-keydown-keyup-keyCode">B.2.1 How to determine keyCode for keydown and keyup events</a></li>
						<li><a href="#determine-keypress-keyCode">B.2.2 How to determine keyCode for keypress events</a></li>
						<li><a href="#fixed-virtual-key-codes">B.2.3 Fixed virtual key codes</a></li>
						<li><a href="#optionally-fixed-virtual-key-codes">B.2.4 Optionally fixed virtual key codes</a></li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#extending_events">Appendix C: Extending Events</a>
			<ul class="toc">
				<li><a href="#extending_events-intro">C.1 Introduction</a></li>
				<li><a href="#extending_events-Custom_Events">C.2 Custom Events</a></li>
				<li><a href="#extending_events-Impl_Extensions">C.3 Implementation-Specific Extensions</a>
					<ul class="toc">
						<li><a href="#extending_events-prefixes">C.3.1 Known Implementation-Specific Prefixes</a></li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#security-considerations-Security">Appendix D: Security Considerations</a></li>
		<li><a href="#changes-Changes">Appendix E: Changes</a>
			<ul class="toc">
				<li><a href="#changes-DOMEvents2to3Changes">E.1 Changes between DOM Level 2 Events and DOM Level 3 Events</a>
					<ul class="toc">
						<li><a href="#changes-DOMEvents2to3Changes-flow">E.1.1 Changes to DOM Level 2 event flow</a></li>
						<li><a href="#changes-DOMEvents2to3Changes-event-types">E.1.2 Changes to DOM Level 2 event types</a></li>
						<li><a href="#changes-DOMLevel2to3Changes">E.1.3 Changes to DOM Level 2 Events interfaces</a></li>
						<li><a href="#changes-DOMLevel3Addons">E.1.4 New Interfaces</a></li>
					</ul>
				</li>
				<li><a href="#changes-drafts">E.2 Changes between different drafts of DOM Level 3 Events</a></li>
			</ul>
		</li>
		<li><a href="#acknowledgements-contributors">Appendix F: Acknowledgements</a>
			<ul class="toc">
				<li><a href="#acknowledgements-Productions">F.1 Production Systems</a></li>
			</ul>
		</li>
		<li><a href="#references-role-references" class="references">Appendix G: References</a>
			<ul class="toc">
				<li><a href="#references-References-Normative">G.1 Normative References</a></li>
				<li><a href="#references-References-Informative">G.2 Informative References</a></li>
			</ul>
		</li>
	</ul>

	<!-- Section: DOM3 Events Overview  ========================================================-->

	<h1><a id="dom-events" href="#dom-events">1. Document Object Model Events</a></h1>
	<div>

		<h2><a id="dom-events-overview" href="#dom-events-overview">1.1 Introduction</a></h2>
		<div>
			<p>DOM Events is designed with two main goals. The first goal is the design of an <a class="def" href="#glossary-event">event</a> system which allows registration
				of event listeners and describes event flow through a tree structure. Additionally, the specification will provide standard modules of events for user interface
				control and document mutation notifications, including defined contextual information for each of these event modules.</p>

			<p>The second goal of DOM Events is to provide a common subset of the current event systems used in existing browsers. This is intended to foster interoperability
				of existing scripts and content. It is not expected that this goal will be met with full backwards compatibility. However, the specification attempts to achieve
				this when possible.</p>
		</div>

		<h2><a id="dom-events-conformance" href="#dom-events-conformance">1.2 Conformance</a></h2>
		<div>
			<p><strong>This section is normative.</strong></p>

			<p>Within this specification, the key words <q><span class="must">MUST</span></q>, <q><span class="mustnot">MUST NOT</span></q>, <q><span class="required">REQUIRED</span></q>,
				<q><span class="shall">SHALL</span></q>, <q><span class="shallnot">SHALL NOT</span></q>, <q><span class="should">SHOULD</span></q>, <q><span class="shouldnot">SHOULD NOT</span></q>,
				<q><span class="recommended">RECOMMENDED</span></q>, <q><span class="may">MAY</span></q>, and <q><span class="optional">OPTIONAL</span></q> are to be interpreted as described in
				<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a> [<a href="#ref-rfc2119">RFC2119</a>]. However, for readability, these words do not necessarily appear in uppercase in this
				specification.</p>

			<p>This specification is to be understood in the context of the DOM Level 3 Core specification [<cite><a class="normative" href="#references-DOMCore">DOM3 Core</a></cite>]
				and the general considerations for DOM implementations apply. For example, handling of <a class="def" href="#glossary-namespaceURI">namespace URIs</a> is discussed in
				<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Namespaces-Considerations"><em>XML Namespaces</em></a>. For additional information about
				<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/introduction.html#ID-Conformance"><em>conformance</em></a>, please see the DOM Level 3 Core specification
				[<cite><a class="normative" href="#references-DOMCore">DOM3 Core</a></cite>].  A <a class="def" href="#glossary-user-agent">user agent</a> is not required to conform
				to the entirety of another specification in order to conform to this specification, but it <span class="must">must</span> conform to the specific parts of any other specification which are called
				out in this specification (e.g., a conforming DOM3 Events <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> support the <code>DOMString</code> data type as defined
				in <a href="#references-WebIDL">Web IDL</a>, but need not support every method or data type defined in <a href="#references-WebIDL">Web IDL</a> in order to conform
				to DOM3 Events).</p>

			<p>This specification defines several classes of conformance for different <a class="def" href="#glossary-user-agent">user agents</a>, specifications, and content authors:</p>
			<dl>
				<dt id="conf-interactive-ua">Web browsers and other dynamic or interactive <a class="def" href="#glossary-user-agent">user agents</a></dt>
				<dd>
					<p>A dynamic or interactive <a class="def" href="#glossary-user-agent">user agent</a>, referred to here as a <q>browser</q> (be it a Web browser, AT (Accessibility
						Technology) application, or other similar program), conforms to DOM Level 3 Events if it supports the Core module defined in [<cite><a class="normative" href="#references-DOMCore">DOM3
						Core</a></cite>], the <a href="#event-flow">Event dispatch and DOM event flow</a> mechanism, all the interfaces and events with their associated methods, attributes,
						and semantics defined in this specification with the exception of those marked as <a class="def" href="#glossary-deprecated">deprecated</a> (a conforming user agent
						<span class="may">may</span> implement the deprecated interfaces, events, or APIs for backwards compatibility, but is not required to do so in order to be conforming), and the complete
						set of <a class="def" href="#glossary-character-value">character values</a> and <a class="def" href="#glossary-key-value">key values</a> in the <a href="#key-values">
						Key Values Set</a> (subject to platform availability), as well as all other normative requirements defined in this specification.  A conforming browser <span class="must">must</span>
						<a class="def" href="#glossary-dispatch">dispatch</a> events appropriate to the given <a href="#events-EventTarget">EventTarget</a> when the conditions defined
						for that <a class="def" href="#glossary-event-type">event type</a> have been met.</p>

					<p><span id="conform-arch">A browser conforms specifically to the DOM Level 3 Events Architecture if it implements the <a href="#dom-event-architecture">DOM Event
						Architecture</a> and <a href="#event-interfaces">Basic Event Interfaces</a>, regardless of its support for any other event interfaces or <a class="def" href="#glossary-event-type">
						event types</a> defined in this specification.</span>  <span id="conform-module">A browser conforms specifically to the DOM Level 3 Events Module if it implements
						the interfaces and its related <a class="def" href="#glossary-event-type">event types</a> specified in the <a href="#events-module">Events Module</a>, and to each
						event interface if it implements that interface and its related <a class="def" href="#glossary-event-type">event types</a>.</span></p>

					<p><span id="conform-script">A conforming browser <span class="must">must</span> support scripting, declarative interactivity, or some other means of detecting and dispatching events in the manner
						described by this specification, and <span class="must">must</span> support the APIs specified for that <a class="def" href="#glossary-event-type">event type</a>.</span></p>

					<p>In addition to meeting all other conformance criteria, a conforming browser <span class="may">may</span> implement features of this specification marked as <a class="def" href="#glossary-deprecated">
						deprecated</a>, for backwards compatibility with existing content, but such implementation is discouraged.</p>

					<p>A conforming browser <span class="may">may</span> also support features not found in this specification, but which use the <a href="#event-flow">Event dispatch and DOM event flow</a> mechanism,
						interfaces, events, or other features defined in DOM Level 3 Events, and <span class="may">may</span> implement additional interfaces and <a class="def" href="#glossary-event-type">event types</a>
						appropriate to that implementation. Such features can be later standardized in future specifications.</p>

					<p>A browser which does not conform to all required portions of this specification <span class="mustnot">must not</span> claim conformance to DOM Level 3 Events.  Such an implementation which
						does conform to portions of this specification <span class="may">may</span> claim conformance to those specific portions.</p>

					<p>A conforming browser <span class="must">must</span> also be a <i>conforming implementation</i> of the IDL fragments in this specification, as described in the Web IDL specification. <a
						href="#references-WebIDL">[WEBIDL]</a></p>
				</dd>

				<dt id="conf-author-tools">Authoring tools</dt>
				<dd>
					<p>A content authoring tool conforms to DOM Level 3 Events if it produces content which uses the <a class="def" href="#glossary-event-type">event types</a> and <a
						href="#event-flow">Event dispatch and DOM event flow</a> model, consistent in a manner as defined in this specification.  A content authoring tool <span class="mustnot">must not</span> claim
						conformance to DOM Level 3 Events for content it produces which uses features of this specification marked as <a class="def" href="#glossary-deprecated">deprecated</a>
						in this specification.  A conforming content authoring tool <span class="should">should</span> provide to the content author a means to use all <a class="def" href="#glossary-event-type">event
						types</a> and interfaces appropriate to all <a class="def" href="#glossary-host-language">host languages</a> in the content document being produced.</p>
				</dd>

				<dt id="conf-authors">Content authors and content</dt>
				<dd>
					<p>A content author creates conforming DOM Level 3 Events content if that content uses the <a class="def" href="#glossary-event-type">event types</a> and <a href="#event-flow">
						Event dispatch and DOM event flow</a> model, consistent in a manner as defined in this specification.  A content author <span class="shouldnot">should not</span> use features of this specification
						marked as <a class="def" href="#glossary-deprecated">deprecated</a>, but <span class="should">should</span> rely instead upon replacement mechanisms defined in this specification and elsewhere.
						Conforming content <span class="must">must</span> use the semantics of the interfaces and <a class="def" href="#glossary-event-type">event types</a> as described in this specification.</p>

					<p class="note"><strong>Authoring Note: </strong>Content authors are advised to follow best practices as described in <a href="http://www.w3.org/TR/WAI-WEBCONTENT/">
						accessibility</a> and <a href="http://www.w3.org/standards/techs/i18n">internationalization</a> guideline specifications.</p>
				</dd>

				<dt id="conf-specs">Specifications and host languages</dt>
				<dd>
					<p>A specification or <a class="def" href="#glossary-host-language">host language</a> conforms to DOM Level 3 Events if it references and uses the <a href="#event-flow">
						Event dispatch and DOM event flow</a> mechanism, interfaces, events, or other features defined in this specification, and does not extend these
						features in incompatible ways.  A specification or <a class="def" href="#glossary-host-language">host language</a> conforms specifically to the DOM Level 3 Events
						Architecture if it references and uses the <a href="#dom-event-architecture">DOM Event Architecture</a> and <a href="#event-interfaces">Basic Event Interfaces</a>,
						regardless of its use of any other event interfaces or <a class="def" href="#glossary-event-type">event types</a> defined in this specification.</p>

					<p>A specification or <a class="def" href="#glossary-host-language">host language</a> conforms specifically to the DOM Level 3 Events Module if it references and uses the interfaces and
						its related <a class="def" href="#glossary-event-type">event types</a> specified in the <a href="#events-module">Events Module</a>, and to each event interface
						if it references and uses that interface and its related <a class="def" href="#glossary-event-type">event types</a>. A conforming specification <span class="may">may</span>
						define additional interfaces and <a class="def" href="#glossary-event-type">event types</a> appropriate to that specification, or <span class="may">may</span> extend the DOM Level 3 Events
						interfaces and <a class="def" href="#glossary-event-type">event types</a> in a manner that does not contradict or conflict with the definitions of those interfaces
						and <a class="def" href="#glossary-event-type">event types</a> in this specification.</p>

					<p>Specifications or <a class="def" href="#glossary-host-language">host languages</a> which reference DOM Level 3 Events <span class="shouldnot">should not</span> use or recommend features of this
						specification marked as <a class="def" href="#glossary-deprecated">deprecated</a>, but <span class="should">should</span> use or recommend the indicated replacement for that the feature (if available).</p>
				</dd>
			</dl>
		</div>

		<h2><a id="style-conventions" href="#style-conventions">1.3 Stylistic Conventions</a></h2>
		<div>


			<p>The following stylistic conventions are followed in this specification, per the <a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification
				Conventions</a>:</p>

			<dl>
				<dt>Keywords or values</dt>
				<dd><code>This is a keyword or value</code></dd>

				<dt>Event types</dt>
				<dd><a class="eventtype"><code>This is an event type</code></a></dd>

				<dt>Key and character values</dt>
				<dd>
					This is a key name: <code class="key">'Spacebar'</code> (e.g., the value of <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a>); this is the equivalent character
					value: <code class="char">'\u0020'</code> (e.g., the value of <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a>). This is a glyph that represents that same
					character value: <code class="glyph">' '</code>.
				</dd>

				<dt>Glossary definitions</dt>
				<dd><a class="def">This is a link to a definition in the glossary</a></dd>

				<dt>Notes</dt>
				<dd><p class="note"><strong>Note:</strong> This is a note.</p></dd>

				<dt>Warnings</dt>
				<dd><p class="warning"><strong>Warning!</strong> This is a warning.  It is used on security notes and to mark <a class="def" href="#glossary-deprecated">deprecated</a> features.</p></dd>

				<dt>Examples</dt>
				<dd><p class="example"><strong>Example:</strong> This is an example.</p></dd>

				<!-- [Not current used in this document] <dt>Features at risk</dt>
					<dd><p class="atrisk">This is a feature at risk, which is likely to be removed from the specification.</p></dd>-->

				<dt>Spec Issues</dt>
				<dd><p class="issue"><strong>Issue:</strong> This is an open issue.</p></dd>
			</dl>

			<p>In addition, certain terms are used in this specification with particular meanings.  The term <q>implementation</q> applies to a browser, content authoring tool,
				or other <a class="def" href="#glossary-user-agent">user agent</a> that implements this specification, while a content author is a person who writes script or code
				that takes advantage of the interfaces, methods, attributes, events, and other features described in this specification in order to make Web applications, and a
				user is the person who uses those Web applications in an implementation.</p>
		</div>
	</div>

	<!-- Section: Glossary  ========================================================-->

	<h1><a id="glossary" href="#glossary">2. Glossary</a></h1>
	<div>

		<p class="1st">Some of the following term definitions have been borrowed or modified from similar definitions in other W3C or standards documents. See the links within
			the definitions for more information.</p>

		<dl id="glossary-list">
			<dt id="glossary-activation-behavior"><dfn>activation behavior</dfn></dt>
			<dd>The action taken when an <a class="def" href="#glossary-event">event</a>, typically initiated by users through an input device, causes an element to fulfill a
				defined task.  The task <span class="may">may</span> be defined for that element by the <a class="def" href="#glossary-host-language">host language</a>, or by
				author-defined variables, or both.  The default task for any given element <span class="may">may</span> be a generic action, or <span class="may">may</span> be
				unique to that element.  For example, the activation behavior of an HTML or SVG <code>&lt;a&gt;</code> element is to cause the
				<a class="def" href="#glossary-user-agent">user agent</a> to traverse the link specified in the <code>href</code> attribute, with the further optional parameter
				of specifying the browsing context for the traversal (such as the current window or tab, a named window, or a new window); the activation behavior of an HTML
				<code>&lt;input&gt;</code> element with the <code>type</code> attribute value <code>submit</code> is be to send the values of the form elements to an
				author-defined IRI by the author-defined HTTP method.  See <a href="#event-flow-activation">Activation triggers and behavior</a> for more details.</dd>

			<dt id="glossary-activation-trigger"><dfn>activation trigger</dfn></dt>
			<dd>An event which is defined to initiate an <a class="def" href="#glossary-activation-behavior">activation behavior</a>.  Refer to <a href="#event-flow-activation">
				Activation triggers and behavior</a> for more details.</dd>

			<dt id="glossary-author"><dfn>author</dfn></dt>
			<dd>In the context of this specification, an <em>author</em>, <em>content author</em>, or <em>script author</em> is a person who writes script or other executable
				content that uses the interfaces, events, and event flow defined in this specification.  See <a href="#conf-authors">Content authors and content</a>  conformance
				category for more details.</dd>

			<dt id="glossary-bubbling-phase"><dfn>bubbling phase</dfn></dt>
			<dd>The process by which an <a class="def" href="#glossary-event">event</a> can be handled by one of the target's ancestors <em>after</em> being handled by the
				<a class="def" href="#glossary-event-target">event target</a>. See the description of the <a href="#bubble-phase">bubble phase</a> in the context
				of event flow for more details.</dd>

			<dt id="glossary-capture-phase"><dfn>capture phase</dfn></dt>
			<dd>The process by which an <a class="def" href="#glossary-event">event</a> can be handled by one of the target's ancestors <em>before</em> being handled by the
				<a class="def" href="#glossary-event-target">event target</a>. See the description of the <a href="#capture-phase">capture phase</a> in the context
				of event flow for more details.</dd>

			<dt id="glossary-character-value"><dfn>character value</dfn></dt>
			<dd>In the context of key values, a character value is a string representing one or more Unicode characters, such as a letter or symbol, or a set of letters. In this
				specification, character values are denoted as a unicode string (e.g., <code class="char">'\u0020'</code>) or a glyph representation of the same code point (e.g.,
				<code class="glyph">' '</code>), and are color coded to help distinguish these two representations.
				<p class="note"><strong>Note:</strong> in source code, some key values, such as non-graphic characters, can be represented using
				the character escape syntax of the programming language in use.</p>
			</dd>

			<dt id="glossary-candidate-event-handlers"><dfn>candidate event handlers</dfn></dt>
			<dt><dfn>candidate event listeners</dfn></dt>
			<dd>The list of all <a class="def" href="#glossary-event-handler">event listeners</a> that have been registered on the target object in their order of registration. This
				list is captured or <q>frozen</q> before event listeners on the target object are dispatched, and released or <q>un-frozen</q> after this set of of candidate event
				handlers have been dispatched (allowing these event listeners to add or remove additional listeners on other objects in an event's propagation chain, but not affect
				the order of listeners that will be invoked on the target object).

				<p class="note"><strong>Note:</strong> Initially capturing the candidate event handlers prevents infinite loops of event listener dispatch on a given target object.</p>
			</dd>

			<dt id="glossary-current-event-target"><dfn>current event target</dfn></dt>
			<dd>In an event flow, the current event target is the object associated with the <a class="def" href="#glossary-event-handler">event handler</a> that is currently being
				dispatched. This object <span class="may">may</span> be the <a href="#glossary-event-target">event target</a> itself or one of its ancestors. The current event target changes as the
				<a class="def" href="#glossary-event">event</a> propagates from object to object through the various <a class="def" href="#glossary-phase">phases</a> of the event flow.
				The current event target is the value of the <a href="#events-event-type-currentTarget"><code>Event.currentTarget</code></a> attribute.</dd>

			<dt id="glossary-dead-key"><dfn>dead key</dfn></dt>
			<dd>A dead key is a key or combination of keys which produces no character by itself, but which in combination or sequence with another key produces a modified character,
				such as a character with diacritical marks (e.g., <code>&#xF6;</code>, <code>&#xE9;</code>, <code>&#xE2;</code>).</dd>

			<dt id="glossary-default-action"><dfn>default action</dfn></dt>
			<dd>A <a class="def" href="#glossary-default-action">default action</a> is an <span class="optional">optional</span> supplementary behavior that an implementation
				<span class="must">must</span> perform in combination with the dispatch of the event object.  Each event type definition, and each specification, defines the
				<a class="def" href="#glossary-default-action">default action</a> for that event type, if it has one.  An instance of an event <span class="may">may</span> have more than
				one <a class="def" href="#glossary-default-action">default action</a> under some circumstances, such as when associated with an
				<a class="def" href="#glossary-activation-trigger">activation trigger</a>.  A <a class="def" href="#glossary-default-action"> default action</a> <span class="may">may</span>
				be cancelled through the invocation of the <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> method. For more details, see
				<a href="#event-flow-default-cancel">Default actions and cancelable events</a>.</dd>

			<dt id="glossary-defaultView"><dfn>defaultView</dfn></dt>
			<dd>The <code>defaultView</code> is the document's browsing context's Window Proxy object as defined in <a href="http://dev.w3.org/html5/spec/single-page.html#dom-document-defaultview"
				title="HTML5 defaultView IDL attribute">HTML5</a> [<cite><a class="normative" href="#references-HTML5">HTML5</a></cite>].</dd>

			<dt id="glossary-delta"><dfn>delta</dfn></dt>
			<dd>The estimated scroll amount (in pixels, lines, or pages) that the user agent will scroll or zoom the page in response to the physical movement of an input device that
				supports the <code>WheelEvent</code> interface (such as a mouse wheel or touch pad). The value of a <a class="def" href="#glossary-delta">delta</a> (e.g., the <a
				href="#events-WheelEvent-deltaX">deltaX</a>, <a href="#events-WheelEvent-deltaY">deltaY</a>, or <a href="#events-WheelEvent-deltaZ">deltaZ</a> attributes) is to be
				interpreted in the context of the current <a href="#events-WheelEvent-deltaMode"><code>deltaMode</code></a> property. The relationship between the physical movement of
				a wheel (or other device) and whether the <a class="def" href="#glossary-delta">delta</a> is positive or negative is environment and device dependent. However, if a user
				agent scrolls as the <a class="def" href="#glossary-default-action">default action</a> then the sign of the <a class="def" href="#glossary-delta">delta</a> is given by a
				right-hand coordinate system where positive X,Y, and Z axes are directed towards the right-most edge, bottom-most edge, and farthest depth (away from the user) of the
				document, respectively.</dd>

			<dt id="glossary-deprecated"><dfn>deprecated</dfn></dt>
			<dd>Features marked as deprecated are included in the specification as reference to older implementations or specifications, but are <span class="optional">optional</span>
				and discouraged.  Only features which have existing or in-progress replacements <span class="must">must</span> be deprecated in this specification.  Implementations
				which do not already include support for the feature <span class="may">may</span> implement deprecated features for reasons of backwards compatibility with existing
				content, but content authors creating content <span class="shouldnot">should not</span> use deprecated features, unless there is no other way to solve a use case.
				Other specifications which reference this specification <span class="shouldnot">should not</span> use deprecated features, but <span class="should">should</span>
				point instead to the replacements of which the feature is deprecated in favor.  Features marked as deprecated in this specification are expected to be dropped from
				future specifications.</dd>

			<dt id="glossary-dispatch"><dfn>dispatch</dfn></dt>
			<dd>To create an event with attributes and methods appropriate to its type and context, and propagate it through the DOM tree in the specified manner. Interchangeable
				with the term <q><a href="#glossary-fire">fire</a></q>, e.g., <q>fire a <a class="eventtype" href="#event-type-click"><code>click</code></a> event</q> or <q>dispatch
				a <a class="eventtype" href="#event-type-load"><code>load</code></a> event</q>.</dd>

			<dt id="glossary-document"><dfn>document</dfn></dt>
			<dd>An object instantiating the <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#i-Document" title="Document Object Model Core"><code>Document</code> interface</a>
				[<cite><a class="normative" href="#references-DOMCore">DOM3 Core</a></cite>], representing the entire HTML or XML text document.  Conceptually, it is the root of
				the document tree, and provides the primary access to the document's data.</dd>

			<dt id="glossary-DOM-application"><dfn>DOM application</dfn></dt>
			<dd>A DOM application is script or code, written by a content author or automatically generated, which takes advantage of the interfaces, methods, attributes, events,
				and other features described in this specification in order to make dynamic or interactive content, such as Web applications, exposed to users in a <a class="def"
				href="#glossary-user-agent">user agent</a>.</dd>

			<dt id="glossary-DOM-Level-0"><dfn>DOM Level 0</dfn></dt>
			<dd>The term <q>DOM Level 0</q> refers to a mix of HTML document functionalities, often not formally specified but traditionally supported as de facto standards, implemented
				originally by Netscape Navigator version 3.0 or Microsoft Internet Explorer version 3.0.  In many cases, attributes or methods have been included for reasons of
				backward compatibility with <q>DOM Level 0</q>.</dd>

			<dt id="glossary-empty-string"><dfn>empty string</dfn></dt>
			<dd>The empty string is a value of type <code>DOMString</code> of length <code>0</code>, i.e., a string which contains no characters (neither printing nor control
				characters).</dd>

			<dt id="glossary-event"><dfn>event</dfn></dt>
			<dd>An event is the representation of some occurrence (such as a mouse click on the presentation of an element, the removal of child node from an element, or any number
				of other possibilities) which is associated with its <a class="def" href="#glossary-event-target">event target</a>. Each event is an instantiation
				of one specific <a class="def" href="#glossary-event-type">event type</a>.</dd>

			<dt id="glossary-event-handler"><dfn>event handler</dfn></dt>
			<dt><dfn>event listener</dfn></dt>
			<dd>An object that implements the <a href="#interface-EventListener"><code>EventListener</code></a> interface and provides an <a href="#events-EventListener-handleEvent">
				<code>EventListener.handleEvent()</code></a> callback method. Event handlers are language-specific. Event handlers are invoked in the context of a particular object
				(the <a class="def" href="#glossary-current-event-target">current event target</a>) and are provided with the event object itself.

				<p class="note"><strong>Note: </strong>In JavaScript, user-defined functions are considered to implement the <code>EventListener</code> interface. Thus the
					<code>Event</code> object will be provided as the first paramter to the user-defined function when it is invoked. Additionally, JavaScript objects can also implement
					the <code>EventListener</code> interface when they define a <q><code>handleEvent</code></q> method.</p>
			</dd>

			<dt id="glossary-event-order"><dfn>event order</dfn></dt>
			<dd>The sequence in which events from the same event source or process occur, using the same or related event interfaces. For example, in an environment with a mouse,
				a track pad, and a keyboard, each of those input devices would constitute a separate event source, and each would follow its own event order; a <a class="eventtype"
				href="#event-type-mousedown"><code>mousedown</code></a> event from the trackpad followed by a <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>
				event from the mouse would not result in a <a class="eventtype" href="#event-type-click"><code>click</code></a> event.

				<p class="note"><strong>Note:</strong> there can be interactions between different event orders; for example, a <a class="eventtype" href="#event-type-click"><code>click</code></a> event might
				be modified by a concurrent <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event (<code class="key">'Shift'</code><code>+click</code>); however, the event orders
				of these different event sources would be distinct.</p>

				The event order of some interfaces are device-independent; for example, a user might change focus using the <a href="#key-Tab"><code class="key">'Tab'</code></a>
				key, or by clicking the new focused element with the mouse.  The event order in such cases depends on the state of the process, not on the state of the device that
				initiates the state change.</dd>

			<dt id="glossary-event-phase"><dfn>event phase</dfn></dt>
			<dd>See <a class="def" href="#glossary-phase">phase</a>.</dd>

			<dt id="glossary-event-target"><dfn>event target</dfn></dt>
			<dd>The object to which an <a class="def" href="#glossary-event">event</a> is targeted using the <a href="#event-flow">DOM event flow</a>. The event target is the
				value of the <a href="#events-event-type-target"><code>Event.target</code></a> attribute.</dd>

			<dt id="glossary-event-type"><dfn>event type</dfn></dt>
			<dd>An <em>event type</em> is an <a class="def" href="#glossary-event">event</a> object with a particular name and which defines particular trigger conditions, properties,
				and other characteristics which distinguish it from other event types.  For example, the <a class="eventtype" href="#event-type-click"><code>click</code></a> event
				type has different characteristics than the <a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> or <a class="eventtype" href="#event-type-load">
				<code>load</code></a> event types. The event type is exposed as the <a href="#events-event-type-type"><code class="interface-attribute">Event.type</code></a>
				attribute on the event object.  See <a href="#event-types">event types</a> for more details.  Also loosely referred to as <em>'event'</em>, such as the <em><a class="eventtype"
				href="#event-type-click"><code>click</code></a> event</em>.</dd>

			<dt id="glossary-event-focus"><dfn>focus</dfn></dt>
			<dd>Focus is a special state of receptivity and concentration on an particular element or other <a class="def" href="#glossary-event-target">event target</a> within
				a document.  Each element has different behavior when focused, depending on its functionality, such as priming the element for activation (as for a button or hyperlink)
				or toggling state (as for a checkbox), receiving text input (as for a text form field), or copying selected text.  For more details, see <a href="#events-focusevent-doc-focus">
				Document Focus and Focus Context</a>.</dd>

			<dt id="glossary-event-focus-ring"><dfn>focus ring</dfn></dt>
			<dd>A focus ring is a an ordered set of <a class="def" href="#glossary-event-focus">focus</a> targets within a document.  A <a class="def" href="#glossary-host-language">
				host language</a> <span class="may">may</span> define one or more ways to determine the order of targets, such as document order, a numerical index defined per focus target, explicit pointers
				between focus targets, or a hybrid of different models.  Each document <span class="may">may</span> contain multiple focus rings, or conditional focus rings.  Typically, for document-order
				or indexed focus rings, focus <q>wraps around</q> from the last focus target to the first.</dd>

			<dt id="glossary-fire"><dfn>fire</dfn></dt>
			<dd>A synonym for <a href="#glossary-dispatch">dispatch</a>.</dd>

			<dt id="glossary-host-language"><dfn>host language</dfn></dt>
			<dd>Any language which integrates the features of another language or API specification, while normatively referencing the origin specification rather than redefining
				those features, and extending those features only in ways defined by the origin specification.  An origin specification typically is only intended to be implemented
				in the context of one or more host languages, not as a standalone language.  For example, XHTML, HTML, and SVG are host languages for DOM 3 Events, and they integrate
				and extend the objects and models defined in this specification.</dd>

			<dt id="glossary-hysteresis"><dfn>hysteresis</dfn></dt>
			<dd>A feature of human interface design to accept input values within a certain range of location or time, in order to improve the user experience.  For example, allowing
				for small deviation in the time it takes for a user to double-click a mouse button is temporal hysteresis, and not immediately closing a nested menu if the user
				mouses out from the parent window when transitioning to the child menu is locative hysteresis.</dd>

			<dt id="glossary-ime"><dfn>IME</dfn></dt>
			<dt id="glossary-input-method-editor"><dfn>input method editor</dfn></dt>
			<dd>An <em>input method editor</em> (IME), also known as a <em>front end processor</em>, is an application that performs the conversion between keystrokes and ideographs
				or other characters, usually by user-guided dictionary lookup, often used in East Asian languages (e.g., Chinese, Japanese, Korean).  An <a class="def" href="#glossary-ime">
				IME</a> <span class="may">may</span> also be used for dictionary-based word completion, such as on mobile devices.  See <a href="#keys-IME">Input Method Editors</a> for treatment of
				IMEs in this specification.  See also <a class="def" href="#glossary-text-composition-system">text composition system</a>.</dd>

			<dt id="glossary-key-value"><dfn>key value</dfn></dt>
			<dd>A key value is a <a class="def" href="#glossary-character-value">character value</a> or multi-character string (such as <a href="#key-Enter"><code class="key">'Enter'
				</code></a>, <a href="#key-Tab"><code class="key">'Tab'</code></a>, or <a href="#key-MediaNextTrack"><code class="key">'MediaNextTrack'</code></a>) associated
				with a key in a particular state. Every key has a key value, whether or not it has a <a class="def" href="#glossary-character-value">character value</a>; this includes
				control keys, function keys, <a class="def" href="#glossary-modifier-key">modifier keys</a>, <a class="def" href="#glossary-dead-key">dead keys</a>, and any other key.
				The key value of any given key at any given time depends upon the <a class="def" href="#glossary-key-mapping">key mapping</a>.</dd>

			<dt id="glossary-key-mapping"><dfn>key mapping</dfn></dt>
			<dd>Key mapping is the process of assigning a key value to a particular key, and is the result of a combination of several factors, including the operating system
				and the keyboard layout (e.g., <a class="def" href="#glossary-qwerty">QWERTY</a>, Dvorak, Spanish, InScript, Chinese, etc.), and after taking into account all <a
				class="def" href="#glossary-modifier-key">modifier key</a> (<a href="#key-Shift"><code class="key">'Shift'</code></a>, <a href="#key-Alt"><code class="key">
				'Alt'</code></a>, etc.) and <a class="def" href="#glossary-dead-key">dead key</a> states.</dd>

			<dt id="glossary-localname"><dfn>local name</dfn></dt>
			<dd>See local name in [<cite><a class="informative" href="#references-Namespaces10">XML Namespaces 1.0</a></cite>].</dd>

			<dt id="glossary-modifier-key"><dfn>modifier key</dfn></dt>
			<dd>A modifier key changes the normal behavior of a key, such as to produce a character of a different case (as with the <a href="#key-Shift"><code class="key">
				'Shift'</code></a> key), or to alter what functionality the key triggers (as with the <a href="#key-Fn"><code class="key">'Fn'</code></a> or <a href="#key-Alt">
				<code class="key">'Alt'</code></a> keys).  Refer to the <a href="#events-KeyboardEvent-getModifierState"><code>KeyboardEvent.getModifierState()</code></a>
				method for a list of modifier keys defined in this specification.  See also <a href="#keys-Modifiers">Modifier keys</a>.</dd>

			<dt id="glossary-namespaceURI"><dfn>namespace URI</dfn></dt>
			<dd>A <em>namespace URI</em> is a URI that identifies an XML namespace. This is called the namespace name in [<cite><a class="informative" href="#references-Namespaces10">XML
				Namespaces 1.0</a></cite>]. See also sections 1.3.2 <a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#baseURIs-Considerations"><em>DOM URIs</em></a>
				and 1.3.3 <a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Namespaces-Considerations"><em>XML Namespaces</em></a> regarding URIs and namespace
				URIs handling and comparison in the DOM APIs.</dd>

			<dt id="glossary-phase"><dfn>phase</dfn></dt>
			<dd>In the context of <a class="def" href="#glossary-event">events</a>, a phase is set of logical traversals from node to node along the DOM tree, from the <a class="def"
				href="#glossary-defaultView">defaultView</a> (window), to the <code>Document</code> object, <a class="def" href="#glossary-root-element">root element</a>, and down
				to the <a class="def" href="#glossary-event-target">event target</a> (<a class="def" href="#glossary-capture-phase">capture phase</a>), at the <a class="def" href="#glossary-event-target">
				event target</a> itself (<a class="def" href="#glossary-target-phase">target phase</a>), and back up the same chain (<a class="def" href="#glossary-bubbling-phase">bubbling
				phase</a>).</dd>

			<dt id="glossary-propagation-path"><dfn>propagation path</dfn></dt>
			<dd>The ordered set of <a class="def" href="#glossary-current-event-target">current event targets</a> though which an <a class="def" href="#glossary-event">event</a> object will pass
				sequentially on the way to and back from the <a class="def" href="#glossary-event-target">event target</a>.  As the event propagates, each <a class="def"
				href="#glossary-current-event-target">current event target</a> in the propagation path is in turn set as the <a href="#events-event-type-currentTarget"><code>Event.currentTarget</code></a>.
				The propagation path is initially composed of one or more <a class="def" href="#glossary-event-phase">event phases</a> as defined by the <a class="def" href="#glossary-event-type">
				event type</a>, but <span class="may">may</span> be interrupted.  Also known as an <em>event target chain</em>.</dd>

			<dt id="glossary-qwerty"><dfn>QWERTY</dfn></dt>
			<dd>QWERTY (pronounced <q>&#x2C8;kw&#x25C;rti</q>) is a common keyboard layout, so named because the first five character keys on the top row of letter keys are Q,
				W, E, R, T, and Y.  There are many other popular keyboard layouts (including the Dvorak and Colemak layouts), most designed for localization or ergonomics.</dd>

			<dt id="glossary-root-element"><dfn>root element</dfn></dt>
			<dd>The first element node of a document, of which all other elements are children; the document element.</dd>

			<dt id="events-WheelEvent-rotation"><dfn>rotation</dfn></dt>
			<dd>An indication of incremental change on an input device using the <a href="#events-wheelevents">WheelEvent</a> interface. On some devices this <span class="may">may</span> be a literal
				rotation of a wheel, while on others, it <span class="may">may</span> be movement along a flat surface, or pressure on a particular button.</dd>

			<dt id="glossary-text-composition-system"><dfn>text composition system</dfn></dt>
			<dd>A software component that interprets some form of alternate input (such as a <a class="def" href="#glossary-ime">input method editor</a>, a speech processor, or
				a handwriting recognition system) and converts it to text.</dd>

			<dt id="glossary-target-phase"><dfn>target phase</dfn></dt>
			<dd>The process by which an <a class="def" href="#glossary-event">event</a> can be handled by the <a class="def" href="#glossary-event-target">event target</a>.
				See the description of the <a href="#target-phase">target phase</a> in the context of event flow for more details.</dd>

			<dt id="glossary-topmost-event-target"><dfn>topmost event target</dfn></dt>
			<dd>The <a class="def" href="#glossary-topmost-event-target">topmost event target</a> <span class="must">must</span> be the element highest in the rendering order which is capable of being
				an <a class="def" href="#glossary-event-target">event target</a>. In graphical user interfaces this is the element under the user's pointing device. A user
				interface's <q>hit testing</q> facility is used to determine the target. For specific details regarding hit testing and stacking order, refer to the
				<a class="def" href="#glossary-host-language">host language</a>.</dd>

			<dt id="glossary-tree"><dfn>tree</dfn></dt>
			<dd>A data structure that represents a document as a hierarchical set of nodes with child-parent-sibling relationships, i.e., each node having one or more possible
				ancestors (nodes higher in the hierarchy in a direct lineage), one or more possible descendants (nodes lower in the hierarchy in a direct lineage), and one or more
				possible peers (nodes of the same level in the hierarchy, with the same immediate ancestor).</dd>

			<dt id="glossary-Unicode-character-categories"><dfn>Unicode character categories</dfn></dt>
			<dd>The Unicode character categories, a subset of the complete Unicode general categories, comprise the categories
				<abbr title="Letter, Lowercase">Ll</abbr>,
				<abbr title="Letter, Modifier">Lm</abbr>,
				<abbr title="Letter, Other">Lo</abbr>,
				<abbr title="Letter, Titlecase">Lt</abbr>,
				<abbr title="Letter, Uppercase">Lu</abbr>,
				<abbr title="Number, Decimal Digit">Nd</abbr>,
				<abbr title="Number, Letter">Nl</abbr>,
				<abbr title="Number, Other">No</abbr>,
				<abbr title="Punctuation, Connector">Pc</abbr>,
				<abbr title="Punctuation, Dash">Pd</abbr>,
				<abbr title="Punctuation, Close">Pe</abbr>,
				<abbr title="Punctuation, Final quote">Pf</abbr>,
				<abbr title="Punctuation, Initial quote">Pi</abbr>,
				<abbr title="Punctuation, Other">Po</abbr>,
				<abbr title="Punctuation, Open">Ps</abbr>,
				<abbr title="Symbol, Currency">Sc</abbr>,
				<abbr title="Symbol, Modifier">Sk</abbr>,
				<abbr title="Symbol, Math">Sm</abbr>, and
				<abbr title="Symbol, Other">So</abbr>.</dd>

			<dt id="glossary-unicode-code-point"><dfn>Unicode code point</dfn></dt>
			<dd>A Unicode code point is a unique hexadecimal number signifying a character by its index in the Unicode codespace (or library of characters).  In the context of
				key values, a Unicode code point is expressed as a string in the format <code>\u</code> followed by a hexadecimal character index in the range <code>0000</code>
				to <code>10FFFF</code>, using at least four digits. See also <a class="def" href="#glossary-character-value">character value</a>.</dd>

			<dt id="glossary-un-initialized-value"><dfn>un-initialized value</dfn></dt>
			<dd>The value of any event attribute (such as <a href="#events-event-type-canBubble"><code>Event.bubbles</code></a> or <a href="#events-event-type-currentTarget"><code>
				Event.currentTarget</code></a>) before the event has been initialized with <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a>. The un-initialized
				values of an <code>Event</code> apply immediately after a new event has been created using the method <a href="#events-DocumentEvent-createEvent"><code>
				DocumentEvent.createEvent()</code></a>.</dd>

			<dt id="glossary-user-agent"><dfn>user agent</dfn></dt>
			<dd>A program, such as a browser or content authoring tool, normally running on a client machine, which acts on a user's behalf in retrieving, interpreting, executing,
				presenting, or creating content.  Users <span class="may">may</span> act on the content using different user agents at different times, for different purposes.  See the <a href="#conf-interactive-ua">
				Web browsers and other dynamic or interactive user agents</a> and <a href="#conf-author-tools">Authoring tools</a> for details on the requirements for a <em>conforming</em>
				user agent.</dd>
		</dl>
	</div>

	<!-- Section: Architecture ========================================================-->

	<h1><a id="dom-event-architecture" href="#dom-event-architecture">3. DOM Event Architecture</a></h1>
	<div>

		<h2><a id="event-flow" href="#event-flow">3.1 Event dispatch and DOM event flow</a></h2>
		<div>

			<p>This section defines the event <a class="def" href="#glossary-dispatch">dispatch</a> mechanism of the event model defined in this specification.
				Applications <span class="may">may</span> dispatch event objects using the <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a> method, and
				implementations <span class="must">must</span> dispatch event objects as if through this method. The behavior of this method depends on the <em>event flow</em>
				associated with the underlying object. An event flow describes how event objects <em>propagate</em> through a data structure. As an example, when an event object
				is dispatched to an element in an XML document, the object propagates through parts of the document, as determined by the DOM event flow which is defined at the
				end of this section.</p>

			<div class="figure" style="text-align: center">
				<object type="image/svg+xml" data="images/eventflow.svg" width="520" height="560">
					<img src="images/eventflow.png" alt="graphical representation of an event dispatched in a DOM tree using the DOM event flow" title="graphical representation of an event dispatched in a DOM tree using the DOM event flow" />
				</object>
				<p style="text-align: left"><em>Figure 1: graphical representation of an event dispatched in a DOM tree using the DOM event flow</em></p>
			</div>

			<p>Event objects are dispatched to an <a class="def" href="#glossary-event-target">event target</a>. At the beginning
				of the dispatch, implementations <span class="must">must</span> first determine the event object's <a class="def" href="#glossary-propagation-path">propagation path</a>.</p>

			<p>The propagation path <span class="must">must</span> be an ordered list of <a class="def" href="#glossary-current-event-target">current event targets</a> through which
				the event object <span class="must">must</span> pass. For DOM implementations, the propagation path <span class="must">must</span> reflect the hierarchical tree
				structure of the document. The last item in the list <span class="must">must</span> be the <a class="def" href="#glossary-event-target">event target</a>; the
				preceding items in the list are referred to as the <em>target's ancestors</em>, and the immediately preceding item as the <em>target's parent</em>. Once determined, the
				propagation path <span class="mustnot">must not</span> be changed; for DOM implementations, this applies even if an element in the propagation path is moved within the
				DOM.  or removed from the DOM.</p>

			<p class="example"><strong>Example:</strong> In the DOM event flow, event listeners might change the position of the <a class="def" href="#glossary-event-target">
				event target</a> in the document while the event object is being dispatched; such changes do not affect the propagation path.</p>

			<p>Exceptions thrown inside event listeners <span class="mustnot">must not</span> stop the propagation of the event or affect the
				<a class="def" href="#glossary-propagation-path">propagation path</a>. The exception itself <span class="mustnot">must not</span> propogate outside the scope of the event
				handler.</p>

			<div class="example"><p><strong>Example:</strong> In the following code, the exception thrown from the call to <code>throw "Error"</code> does not propogate into the parent scope,
				(which would prevent the <code>console.log</code> statement from executing):</p>
				<pre>var e = document.createEvent("Event");
e.initEvent("myevent", false, false);
var target = document.createElement("div");
target.addEventListener("myevent", function () {
   throw "Error";
});
target.dispatchEvent(e); <span class="comment">// Causes the event listener to throw an exception...</span>
<span class="comment">// The previously thrown exception doesn't affect the code that follows:</span>
console.log("Exceptions? No problem");</pre>
			</div>

			<p id="event-phase">As the next step, the event object <span class="must">must</span> complete one or more <a class="def" href="#glossary-phase">event phases</a>. This specification defines
				three event phases: <a href="#capture-phase">capture phase</a>; <a href="#target-phase">target phase</a>; and <a href="#bubble-phase">bubble phase</a>.  Event objects
				complete these phases in the specified order using the partial propagation paths as defined below. A phase <span class="must">must</span> be skipped if it is not
				supported, or if the event object's propagation has been stopped. For example, if the <a href="#events-event-type-canBubble"><code>Event.bubbles</code></a>
				attribute is set to false, the bubble phase will be skipped, and if <a href="#events-event-type-stopPropagation"><code>Event.stopPropagation()</code></a> has been
				called prior to the dispatch, all phases <span class="must">must</span> be skipped.</p>

			<ol>
				<li>The <strong id="capture-phase">capture phase</strong>: the event object <span class="must">must</span> propagate through the target's ancestors from the <a class="def"
					href="#glossary-defaultView">defaultView</a> to the target's parent. This phase is also known as the <em>capturing phase</em>. Event
					listeners registered for this phase <span class="must">must</span> handle the event before it reaches its target.</li>

				<li>The <strong id="target-phase">target phase</strong>: the event object <span class="must">must</span> arrive at the event object's <a class="def" href="#glossary-event-target">
					event target</a>. This phase is also known as the <em>at-target phase</em>. Event listeners registered for this phase <span class="must">must</span>
					handle the event once it has reached its target. If the <a class="def" href="#glossary-event-type">event type</a> indicates that
					the event <span class="mustnot">must not</span> bubble, the event object <span class="must">must</span> halt after completion of this phase.</li>

				<li>The <strong id="bubble-phase">bubble phase</strong>: the event object propagates through the target's ancestors in reverse order, starting
					with the target's parent and ending with the <a class="def" href="#glossary-defaultView">defaultView</a>. This phase is also known as the <em>bubbling phase</em>.
					Event listeners registered for this phase <span class="must">must</span> handle the event after it has reached its target.</li>
			</ol>

			<p>Implementations <span class="must">must</span> let event objects accomplish an event phase by applying the following steps while there are pending event targets in
				the partial propagation path for this phase and the event object's propagation has not been stopped through <a href="#events-event-type-stopPropagation"><code>
				Event.stopPropagation()</code></a>.</p>

			<p>First, the implementation <span class="must">must</span> determine the <em>current target</em>. This <span class="must">must</span> be the next pending event target in the partial propagation
				path, starting with the first. From the perspective of an event listener this <span class="must">must</span> be the event target the listener has been registered on.</p>

			<p>Next, the implementation <span class="must">must</span> determine the current target's <a class="def" href="#glossary-candidate-event-handlers">candidate event listeners</a>.
				This <span class="must">must</span> be the list of all event listeners that have been registered on the current target in their order of registration. [<cite><a class="informative"
				href="#references-HTML5">HTML5</a></cite>] defines the ordering of listeners registered through event handler attributes. Once determined, the candidate event listeners
				<span class="mustnot">must not</span> be changed; adding or removing listeners does not affect the current target's candidate event listeners.</p>

			<p>Finally, the implementation <span class="must">must</span> process all candidate <a class="def" href="#glossary-event-handler">event handlers</a> in order and trigger
				each handler if all the following conditions are met:</p>

			<ul>
				<li>The event object's immediate propagation has not been stopped.</li>

				<li>The listener has been registered for this event phase.</li>

				<li>The listener has been registered for this <a class="def" href="#glossary-event-type">event type</a>.</li>
			</ul>

			<p>In the production of the <a class="def" href="#glossary-propagation-path">propagation path</a>, if the <a class="def" href="#glossary-defaultView">defaultView</a>
				implements the <a href="#events-EventTarget"><code>EventTarget</code></a> interface, the event propagates from <a class="def" href="#glossary-defaultView">defaultView</a>
				to the <code>document</code> object during the <a class="def" href="#glossary-capture-phase">capture phase</a>, and from the <code>document</code> object to the
				<a class="def" href="#glossary-defaultView">defaultView</a> during the <a class="def" href="#glossary-bubbling-phase">bubble phase</a>.</p>

			<p>After an event completes all the phases of its <a class="def" href="#glossary-propagation-path">propagation path</a>, its <a href="#events-event-type-currentTarget">
				<code>Event.currentTarget</code></a> <span class="must">must</span> be set to <code>null</code> and the <a href="#events-event-type-eventPhase"><code>Event.eventPhase</code></a> <span class="must">must</span> be
				set to <code>0</code> (<a href="#events-UNINIT"><code>NONE</code></a>). All other attributes of the <code>Event</code> (or interface derived from <code>Event</code>)
				are unchanged (including the <a href="#events-event-type-target"><code>Event.target</code></a> attribute, which <span class="must">must</span> continue to reference the <a class="def" href="#glossary-event-target">
				event target</a>).</p>

			<p>The model defined above <span class="must">must</span> be applied regardless of the specific event flow associated with an event target. Each event flow <span class="must">must</span> define how the propagation path
				<span class="must">must</span> be determined and which event phases are supported. The <em>DOM event flow</em> is an application of this model: the propagation path for a <code>Node</code>
				object <span class="must">must</span> be determined by its <code>Node.parentNode</code> chain, and if applicable, the document's containing <a class="def" href="#glossary-defaultView">defaultView</a>;
				all events accomplish the capture and target phases; whether an event accomplishes the bubble phase <span class="must">must</span> be defined individually for each <a class="def" href="#glossary-event-type">
				event type</a>. An alternate application of this model can be found in [<cite><a class="informative" href="#references-DOMLS">DOM3 Load and Save</a></cite>].</p>

			<p>Implementations of the DOM event model <span class="must">must</span> be reentrant. Event listeners <span class="may">may</span> perform actions that cause additional events to be dispatched. Such events are handled
				in a synchronous manner, the event propagation that causes the event listener to be triggered <span class="must">must</span> resume only after the event dispatch of the new event is completed.</p>
		</div>

		<h2><a id="event-flow-default-cancel" href="#event-flow-default-cancel">3.2 Default actions and cancelable events</a></h2>
		<div>

			<p>Events are typically dispatched by the implementation as a result of a user action, in response to the completion of a task, or to signal progress during asynchronous
				activity (such as a network request). Some events can be used to control the behavior that the implementation <span class="may">may</span> take next (or undo an action that the implementation
				already took). Events in this category are said to be <em>cancelable</em> and the behavior they cancel is called their <a class="def" href="#glossary-default-action">
				<em>default action</em></a>. Cancelable event objects can be associated with one or more <a class="def" href="#glossary-default-action">default actions</a>.
				To cancel an event, call the <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> method.</p>

			<p class="example"><strong>Example:</strong> A <a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a> event is dispatched immediately after the user presses down a button on a
				pointing device (typically a mouse). One possible <a class="def" href="#glossary-default-action">default action</a> taken by the implementation is to set up a state
				machine that allows the user to drag images or select text; the <a class="def" href="#glossary-default-action">default action</a> depends on what happens next--for
				example, if the user's pointing device is over text, a text selection might begin. If the user's pointing device is over an image, then an image-drag action could
				begin. Preventing the <a class="def" href="#glossary-default-action">default action</a> of a <a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a>
				event prevents these actions from occuring.</p>

			<p><a class="def" href="#glossary-default-action">Default actions</a> <span class="should">should</span> be performed after the event dispatch has been completed, but in exceptional
				cases <span class="may">may</span> also be performed immediately before the event is dispatched.</p>

			<p class="example"><strong>Example:</strong> The default action associated with the <a class="eventtype" href="#event-type-click"><code>click</code></a> event on &lt;input
				type="checkbox"&gt; elements toggles the <code>checked</code> IDL attribute value of that element. If the <a class="eventtype" href="#event-type-click"><code>click</code>
				</a> event's default action is cancelled, then the value is restored to its former state.</p>

			<p id="events-dt-cancelable-event">When an event is canceled, then the conditional <a class="def" href="#glossary-default-action">default actions</a> associated with the event <span class="must">must</span> be skipped (or
				as mentioned above, if the <a class="def" href="#glossary-default-action">default actions</a> are carried out before the dispatch, their effect <span class="must">must</span> be undone).
				Whether an event object is cancelable <span class="must">must</span> be indicated by the <a href="#events-event-type-canCancel"><code>Event.cancelable</code></a> attribute. <a href="#events-event-type-preventDefault">
				<code>Event.preventDefault()</code></a> stops all related <a class="def" href="#glossary-default-action">default actions</a> of an event object. The <a href="#events-event-type-defaultPrevented">
				<code>Event.defaultPrevented</code></a> attribute indicates whether an event has already been canceled (e.g., by a prior event listener). If the <a class="def" href="#glossary-DOM-application">
				DOM application</a> itself initiated the dispatch, then the return value of the <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a>
				method indicates whether the event object was cancelled.</p>

			<p class="note"><strong>Authoring Note: </strong>Many implementations additionally interpret an event listener's return value, such as the value <code>false</code>, to mean
				that the <a class="def" href="#glossary-default-action">default action</a> of cancelable events will be cancelled (though <code>window.onerror</code> handlers are cancelled
				by returning <code>true</code>).</p>

			<p class="note"><strong>Authoring Note: </strong>Some cancelable events might not have any observable <a class="def" href="#glossary-default-action">default actions</a>; for
				example, the <a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> event.</p>

			<p>This specification does not offer features to programatically query if an event object has any <a class="def" href="#glossary-default-action">default action</a> associated with
				it, or to associate new <a class="def" href="#glossary-default-action">default actions</a> with an event object. Other specifications <span class="should">should</span> define what default actions, if any,
				are associated with certain event objects. Further, implementations <span class="may">may</span> associate <a class="def" href="#glossary-default-action">default actions</a> with events as necessary and
				appropriate for that implementation.</p>

			<p class="example"><strong>Example:</strong> As an example, one implementation might scroll a document view by a certain amount as the <a class="def" href="#glossary-default-action">
				default action</a> of a <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event, while another implementation might instead zoom the document as its <a class="def"
				href="#glossary-default-action">default action</a>.</p>
		</div>

		<h2><a id="sync-async" href="#sync-async">3.3 Synchronous and asynchronous events</a></h2>
		<div>

			<p>Events <span class="may">may</span> be dispatched either synchronously or asynchronously.</p>

			<p>Events which are synchronous (<em><q>sync events</q></em>) <span class="must">must</span> be treated as if they are in a virtual queue in a first-in-first-out model, ordered by sequence
				of temporal occurrence, with respect to other events, to changes in the DOM, and to user interaction.  Each event in this virtual queue <span class="must">must</span> be delayed until the
				previous event has completed its propagation behavior, or been canceled.  Some sync events are driven by a specific device or process, such as mouse button events;
				these events are governed by the <a class="def" href="#glossary-event-order">event order</a> algorithms defined for that set of events, and a user agent <span class="must">must</span> dispatch
				these events in the defined order.</p>

			<p class="example"><strong>Example:</strong> A user double-clicks a passage of text to select a word, then presses the <code class="key">'Del'</code>
				key to erase the word, triggering the following synchronous sequence of events: <a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a>, <a
				class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>, <a class="eventtype" href="#event-type-click"><code>click</code></a>, <a class="eventtype"
				href="#event-type-mousedown"><code>mousedown</code></a>, <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>, <a class="eventtype" href="#event-type-click">
				<code>click</code></a>, <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a>, <a class="eventtype" href="#event-type-select"><code>select</code></a>,
				<a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>, <a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a>.
				Each of these events are fired in the sequence initiated by the user's actions.</p>

			<p>Events which are asynchronous (<em><q>async events</q></em>) <span class="may">may</span> be dispatched as the results of the action are completed, with no relation to other events, to
				other changes in the DOM, nor to user interaction.</p>

			<p class="example"><strong>Example:</strong> During loading of a document, an inline script element is parsed and executed. The <a class="eventtype" href="#event-type-load">
				<code>load</code></a> event is queued to be fired asynchronously at the script element. However, because it is an async event, its order with relation to other synchronous
				events fired during document load (such as the <a class="eventtype"><code>DOMContentLoaded</code></a> event from <cite><a class="informative" href="#references-HTML5">HTML5</a></cite>) is not guaranteed.</p>

			<h3><a id="event-order-and-loops" href="#event-order-and-loops">3.3.1 Event order and event loops</a></h3>
			<div>

				<p>Most events take place in a sequential context.  [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] defines its event operations in terms
					of an event loop mechanism, in which events of all types are fed into different <em>task queues</em>.  This specification does not define events in terms of this
					event loop mechanism, but it is compatible with this mechanism.  Instead, this specification defines several operation-specific <a class="def" href="#glossary-event-order">
					event orders</a>.</p>

				<p>Using the terminology of HTML5, each independent device, such as a mouse or keyboard, <span class="should">should</span> be treated as a <em>task source</em> which feeds into the appropriate
					<em>task queue</em>, in the order defined by the <a class="def" href="#glossary-event-order">event order</a> associated with that device; each operation, such as
					a focus change or composition input, also acts as a <em>task source</em> for the appropriate <em>task queue</em>.  The resolution of these event loops is handled
					in a manner conforming to the <a class="def" href="#glossary-host-language">host language</a>, such as HTML [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>].</p>

				<p class="note"><strong>Authoring Note:</strong> Certain events, such as <q>hotkeys</q> or control keys pressed in a certain sequence, can be
					<q>swallowed</q> by the operating system or the application, interrupting the expected <a class="def" href="#glossary-event-order">event order</a>.</p>
			</div>
		</div>

		<h2><a id="trusted-events" href="#trusted-events">3.4 Trusted events</a></h2>
		<div>

			<p>Events that are generated by the user agent, either as a result of user interaction, or as a direct result of changes to the DOM, are trusted by the user agent
				with privileges that are not afforded to events generated by script through the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("Event")</code></a>
				method, modified using the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method, or dispatched via the <a href="#events-EventTarget-dispatchEvent">
				<code>EventTarget.dispatchEvent()</code></a> method.  The <a href="#events-event-type-isTrusted"><code>isTrusted</code></a> attribute of trusted events has a
				value of <code>true</code>, while untrusted events have a <a href="#events-event-type-isTrusted"><code>isTrusted</code></a> attribute value of <code>false</code>.</p>

			<p>Most untrusted events <span class="shouldnot">should not</span> trigger <a class="def" href="#glossary-default-action">default actions</a>, with the exception of <a class="eventtype" href="#event-type-click">
				<code>click</code></a> or <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> events. These events trigger the <a class="def" href="#glossary-default-action">
				default action</a> of an <a class="def" href="#glossary-activation-trigger">activation trigger</a> (see <a href="#event-flow-activation">Activation triggers and behaviors</a> for more details); these
				untrusted events have an <a href="#events-event-type-isTrusted"><code>isTrusted</code></a> attribute value of <code>false</code>, but still initiate any
				<a class="def" href="#glossary-default-action">default actions</a> for backwards compatibility. All other untrusted events <span class="must">must</span> behave
				as if the <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> method had been called on that event.</p>
		</div>

		<h2><a id="event-flow-activation" href="#event-flow-activation">3.5 Activation triggers and behavior</a></h2>
		<div>

			<p>Certain <a class="def" href="#glossary-event-target">event targets</a> (such as a link or button element) <span class="may">may</span> have associated <a class="def" href="#glossary-activation-behavior">
				activation behavior</a> (such a following a link) that implementations perform in response to an <em><a class="def" href="#glossary-activation-trigger">activation
				trigger</a></em> (such as clicking a link).</p>

			<p>A <a class="def" href="#glossary-host-language">host language</a> <span class="should">should</span> indicate which, if any, elements have activation behavior, describe appropriate <a class="def"
				href="#glossary-activation-trigger">activation triggers</a>, and define the result of that activation behavior.  An implementation which supports a <a class="def"
				href="#glossary-host-language">host language</a> <span class="should">should</span> initiate these <a class="def" href="#glossary-activation-behavior">activation behavior</a> when the associated
				<a class="def" href="#glossary-activation-trigger">activation trigger</a> occurs.</p>

			<p class="example" id="example-activation"><strong>Example:</strong> Both HTML and SVG have an <code>&lt;a&gt;</code> element which indicates a link.  Relevant <a
				class="def" href="#glossary-activation-trigger">activation triggers</a> for an <code>&lt;a&gt;</code> element are a <a class="eventtype" href="#event-type-click"><code>
				click</code></a> event on the text or image  content of the <code>&lt;a&gt;</code> element, or a <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>
				event with a <a href="#events-KeyboardEvent-key">key</a> attribute value of <a href="#key-Enter"><code class="key">'Enter'</code></a> key when the <code>&lt;a&gt;</code>
				element has focus.  The activation behavior for an <code>&lt;a&gt;</code> element is normally to change the content of the window to the content of the new document,
				in the case of external links, or to reposition the current document relative to the new anchor, in the case of internal links.</p>

			<p>An <a class="def" href="#glossary-activation-trigger">activation trigger</a> is a user action or an event which indicates to the implementation that an activation
				behavior <span class="should">should</span> be initiated.  User-initiated <a class="def" href="#glossary-activation-trigger">activation triggers</a> include clicking a mouse button on an activatable
				element, pressing the <a href="#key-Enter"><code class="key">'Enter'</code></a> key when an activatable element has focus, or pressing a key that is somehow
				linked to an activatable element (a <q>hotkey</q> or <q>access key</q>) even when that element does not have focus.  Event-based <a class="def" href="#glossary-activation-trigger">
				activation triggers</a> <span class="may">may</span> include timer-based events that activate an element at a certain clock time or after a certain time period has elapsed, progress
				events after a certain action has been completed, or many other condition-based or state-based events.</p>

			<p>In some cases, a <a class="def" href="#glossary-host-language">host language</a> <span class="may">may</span> define attributes or even attribute values which add to or change the native
				<a class="def" href="#glossary-activation-trigger">activation trigger</a> or <a class="def" href="#glossary-activation-behavior">activation behavior</a> of an element.
				For example, ARIA [<cite><a class="informative" href="#ref-ARIA">ARIA</a></cite>] defines values for the <code class="attr">role</code> attribute that add semantics
				to the element to which it is applied, for purposes of enhanced accessibility.  In such cases, if the <a class="def" href="#glossary-host-language">host language</a>
				does not explicitly define the <a class="def" href="#glossary-activation-trigger">activation trigger</a> or <a class="def" href="#glossary-activation-behavior">activation
				behavior</a>, the content author <span class="must">must</span> provide the mechanics of the <a class="def" href="#glossary-activation-trigger">activation trigger</a> (via an event listener)
				or <a class="def" href="#glossary-activation-behavior">activation behavior</a> (such as calling an ECMAScript function) for that element when applying that attribute
				or attribute value.</p>

			<h3><a id="click-synthesis" href="#click-synthesis">3.5.1 Activation event synthesis</a></h3>
			<div>

				<p>If the instance of the <a class="def" href="#glossary-activation-trigger">activation trigger</a> is not an event of <a class="def" href="#glossary-event-type">event
					type</a> <a class="eventtype" href="#event-type-click"><code>click</code></a> (that is, when it does not result from a user's activation of a button or link
					using a mouse or equivalent pointing device), the implementation <span class="must">must</span> synthesize and dispatch an event of <a class="def" href="#glossary-event-type">event type</a> <a
					class="eventtype" href="#event-type-click"><code>click</code></a> as one of the <a class="def" href="#glossary-default-action">default actions</a> of that <a class="def"
					href="#glossary-activation-trigger">activation trigger</a>; the value of the <code class="attribute-name"><a href="#events-event-type-target">Event.target</a></code>
					<span class="must">must</span> be set to the <a class="def" href="#glossary-event-target">event target</a> (normally, the currently focused element), and the event <span class="must">must</span> simulate a <em>left
					click</em> (i.e., the <a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> attribute value <span class="must">must</span> be <code>0</code>, and the <a href="#events-MouseEvent-buttons">
					<code>MouseEvent.buttons</code></a> attribute value <span class="must">must</span> be <code>1</code>).  Other context information of such a simulated <a class="eventtype" href="#event-type-click">
					<code>click</code></a> event is implementation dependent, but for historical purposes, the interface for the <a class="eventtype" href="#event-type-click"><code>click</code></a>
					event <span class="must">must</span> be the <a href="#events-MouseEvent"><code>MouseEvent interface</code></a>, regardless of the actual device used to activate the element.  Preventing
					the <a class="def" href="#glossary-default-action">default action</a> of the <a class="def" href="#glossary-activation-trigger">activation trigger</a>, such as
					with the <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a>, <span class="must">must</span> stop the initiation of the <a class="def" href="#glossary-activation-behavior">
					activation behavior</a>.</p>

				<p class="example"><strong>Example:</strong>  When a user activates a hyperlink using a keyboard, such as by focusing the hyperlink element
					and pressing the <a href="#key-Enter"><code class="key">'Enter'</code></a> or <a href="#key-Spacebar"><code class="key">'Space'</code></a> key, a <a class="eventtype"
					href="#event-type-click"><code>click</code></a> event would be dispatched as the <a class="def" href="#glossary-default-action">default action</a> of the respective
					<a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event.</p>

				<p>Implementations <span class="must">must</span> dispatch the synthesized <a class="eventtype" href="#event-type-click"><code>click</code></a> event as described above even if they do not
					normally dispatch such an event (e.g., when activation is requested by a voice command, since this specification does not address <a class="def" href="#glossary-event-type">
					event types</a> for voice input).</p>

				<p class="note"><strong>Note:</strong> The activation of an event target is device dependent, but is also application dependent, e.g., a link in a document can be activated
					using a mouse click or a mouse double click.</p>

				<p>Implementations which support the <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> <a class="def" href="#glossary-event-type">event
					type</a> <span class="should">should</span> also dispatch a <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event as a <a class="def" href="#glossary-default-action">
					default action</a> of a <a class="eventtype" href="#event-type-click"><code>click</code></a> event which is associated with an <a class="def" href="#glossary-activation-trigger">
					activation trigger</a>.  However, such implementations <span class="should">should</span> only initiate the associated <a class="def" href="#glossary-activation-behavior">activation behavior</a>
					once for any given occurrence of an <a class="def" href="#glossary-activation-trigger">activation trigger</a>.</p>

				<p class="example"><strong>Example:</strong> The <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a>
					<a class="def" href="#glossary-event-type">event type</a> is <span class="required">required</span> to be supported for XForms [<cite><a class="informative" href="#ref-xforms">XFORMS</a></cite>],
					which is intended for implementation within a <a class="def" href="#glossary-host-language">host language</a>.  In a scenario where a plugin or script-based implementation
					of XForms is intended for installation in a native implementation of this specification which does not support the <a class="eventtype" href="#event-type-DOMActivate">
					<code>DOMActivate</code></a> <a class="def" href="#glossary-event-type">event type</a>, the XForms <a class="def" href="#glossary-user-agent">user agent</a>
					has to synthesize and dispatch its own <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> events based on the appropriate <a class="def"
					href="#glossary-activation-trigger">activation triggers</a>.  Thus, when a <a class="eventtype" href="#event-type-click"><code>click</code></a> event is dispatched
					by the DOM Level 3 Events <a class="def" href="#glossary-user-agent">user agent</a>, the XForms <a class="def" href="#glossary-user-agent">user agent</a> has to
					determine whether to synthesize a <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event with the same relevant properties as a
					<a class="def" href="#glossary-default-action">default action</a> of that <a class="eventtype" href="#event-type-click"><code>click</code></a> event; appropriate
					cues might be whether the <a class="eventtype" href="#event-type-click"><code>click</code></a> event is <a href="#trusted-events">trusted</a>, or whether its <a
					class="def" href="#glossary-event-target">event target</a> has a <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event listener
					registered.</p>

				<p class="note"><strong>Authoring Note:</strong>  Don't rely upon the interoperable support of <a class="eventtype" href="#event-type-DOMActivate">
					<code>DOMActivate</code></a> in many <a class="def" href="#glossary-user-agent">user agents</a>. Use the <a class="eventtype" href="#event-type-click"><code>click</code></a>
					<a class="def" href="#glossary-event-type">event type</a> for more accessible behavior instead, due to wider implementation.</p>

				<p class="warning"><strong>Warning!</strong> The <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> <a class="def" href="#glossary-event-type">
					event type</a> is deprecated in this specification.</p>
			</div>

			<h3><a id="events-activation-event-order" href="#events-activation-event-order">3.5.2 Activation event order</a></h3>
			<div>

				<p>Activation triggers and behavior can be defined in part by the events which are dispatched in a set order relative to one another.  The following is the typical
					sequence of events for an element activated by a pointing device (with only pertinent events listed):</p>

				<ol>
					<li><a class="eventtype" href="#event-type-click"><code>click</code></a></li>

					<li><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> (<a class="def" href="#glossary-default-action">default action</a>, if supported
						by the <a class="def" href="#glossary-user-agent">user agent</a>; synthesized; <code>trusted="false"</code>)</li>

					<li><em>All other <a class="def" href="#glossary-default-action">default actions</a>, including the <a class="def" href="#glossary-activation-behavior">activation behavior
						</a></em></li>
				</ol>

				<p>The following is the typical sequence of events when a focused element is activated by a key event (with only pertinent events listed):</p>

				<ol>
					<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> (<span class="must">must</span> be a key which can activate the element, such as the <a href="#key-Enter"><code
						class="key">'Enter'</code></a> or <a href="#key-Spacebar"><code class="key">'Spacebar'</code></a> key, or the element is not activated)</li>

					<li><a class="eventtype" href="#event-type-click"><code>click</code></a> (<a class="def" href="#glossary-default-action">default action</a>; synthesized; <code>trusted="false"
						</code>)</li>

					<li><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> (<a class="def" href="#glossary-default-action">default action</a>, if supported
						by the <a class="def" href="#glossary-user-agent">user agent</a>; synthesized; <code>trusted="false"</code>)</li>

					<li><em>All other <a class="def" href="#glossary-default-action">default actions</a>, including the <a class="def" href="#glossary-activation-behavior">activation behavior
						</a></em></li>
				</ol>
			</div>
		</div>

		<h2><a id="event-exceptions" href="#event-exceptions">3.6 Event exceptions</a></h2>
		<div>

			<p><em>This section is informative.</em></p>

			<p>Event operations can throw a <code>DOMException</code> as specified in their method descriptions.</p>

			<p class="note" id="note-eventexcpetion-removed"><strong>Note:</strong> the exception <em>EventException</em> introduced in <strong class="version">DOM Level 2</strong> is
				removed in this specification as part of this specification's normative support of <a href="#references-WebIDL">Web IDL</a>. <em>EventException</em> formerly defined
				an exception code <code>UNSPECIFIED_EVENT_TYPE_ERR</code> which is replaced in this specification by the use of a <code>DOMException</code> of type
				<code>InvalidStateError</code>.</p>

			<p>The following <code>DOMException</code> types are used in this specification.</p>

			<table class="exceptiontable" summary="Layout table: the first cell contains the name of the DOMException type, the second contains a short description">
				<tr>
					<th>Type</th>
					<th>Description</th>
				</tr>
				<tr>
					<td><code><dfn>InvalidStateError</dfn></code></td>
					<td>Thrown when the <a href="#events-event-type-type"><code>Event.type</code></a> was not specified by initializing the event before <code>dispatchEvent</code> was
						called. Also thrown when the <a href="#events-Event"><code>Event</code></a> object provided to <code>dispatchEvent</code> is already being dispatched.</td>
				</tr>
				<tr>
					<td><code><dfn>NotSupportedError</dfn></code></td>
					<td>Thrown when <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent()</code></a> is passed an <a href="#events-Event"><code>Event</code></a>
						interface that the implementation does not support.</td>
				</tr>
			</table>
		</div>
	</div>

	<!-- Section: Basic Event Interfaces ========================================================-->

	<h1><a id="event-interfaces" href="#event-interfaces">4. Basic Event Interfaces</a></h1>
	<div>

		<p>The interfaces described in this section are fundamental to DOM Level 3 Events and <span class="must">must</span> always be supported by the implementation.</p>

		<p>The event types defined in this specification derive from these basic interfaces, and <span class="must">must</span> inherit all of the attributes, methods, and constants of the interfaces
			they derive from.  Event types defined in other specifications <span class="may">may</span> similarly inherit from these basic interfaces or other interfaces defined in this specification,
			or <span class="may">may</span> define their own interfaces.  The following chart describes the inheritance structure of interfaces defined in this specification.</p>

		<div class="figure" style="text-align: center">
			<object type="image/svg+xml" data="images/event-inheritance.svg" width="960" height="230">
				<img src="images/event-inheritance.png" alt="graphical representation of the DOM3 Events interface inheritance" />
			</object>
			<p><em>Figure 2: graphical representation of the DOM3 Events interface inheritance</em></p>
		</div>

		<h2><a id="interface-Event" href="#interface-Event">4.1 Interface Event</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-Event">Event</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
				<dd>
					<p>The <code>Event</code> interface provides basic contextual information about an event to all registered <a class="def" href="#glossary-event-handler">event handlers</a>.
						Specific events can also implement other derived interfaces, for example the <a href="#events-UIEvent"><code>UIEvent</code></a> and <a href="#events-MouseEvent">
						<code>MouseEvent</code></a> interfaces.</p>

					<p>To create an instance of the <code>Event</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("Event")</code></a>
						method call.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<dd>

							<pre class="idl" id="idl-interface-Event"><code>
<span class="comment">// Introduced in DOM Level 2:</span>
interface <a href="#events-Event">Event</a>
{
  <span class="comment">// PhaseType</span>
  const unsigned short              <a href="#events-UNINIT">NONE</a>            = 0;
  const unsigned short              <a href="#events-CAPTURING_PHASE">CAPTURING_PHASE</a> = 1;
  const unsigned short              <a href="#events-AT_TARGET">AT_TARGET</a>       = 2;
  const unsigned short              <a href="#events-BUBBLING_PHASE">BUBBLING_PHASE</a>  = 3;

  readonly attribute DOMString      <a href="#events-event-type-type">type</a>;
  readonly attribute <a href="#events-EventTarget">EventTarget</a>?   <a href="#events-event-type-target">target</a>;
  readonly attribute <a href="#events-EventTarget">EventTarget</a>?   <a href="#events-event-type-currentTarget">currentTarget</a>;
  readonly attribute unsigned short <a href="#events-event-type-eventPhase">eventPhase</a>;
  readonly attribute boolean        <a href="#events-event-type-canBubble">bubbles</a>;
  readonly attribute boolean        <a href="#events-event-type-canCancel">cancelable</a>;
  readonly attribute DOMTimeStamp   <a href="#events-event-type-timeStamp">timeStamp</a>;
  void                              <a href="#events-event-type-stopPropagation">stopPropagation</a>();
  void                              <a href="#events-event-type-preventDefault">preventDefault</a>();
  void                              <a href="#events-event-type-initEvent">initEvent</a>(DOMString <a href="#events-Event-initparam-eventTypeArg">eventTypeArg</a>,
                                              boolean <a href="#events-Event-initparam-canBubbleArg">canBubbleArg</a>,
                                              boolean <a href="#events-Event-initparam-cancelableArg">cancelableArg</a>);
  <span class="comment">// Introduced in DOM Level 3:</span>
  void                              <a href="#events-event-type-stopImmediatePropagation">stopImmediatePropagation</a>();
  readonly attribute boolean        <a href="#events-event-type-defaultPrevented">defaultPrevented</a>;
  readonly attribute boolean        <a href="#events-event-type-isTrusted">isTrusted</a>;
};
</code></pre>
						</dd>

						<dt><strong>Definition group <em><a id="events-event-type-eventPhaseType">PhaseType</a></em></strong></dt>
						<dd>
							<p>An integer indicating which phase of the event flow is being processed as defined in <a href="#event-flow">Event dispatch and DOM event flow</a>.</p>

							<dl>
								<dt><strong>Defined Constants</strong></dt>
								<dd>
									<dl>
										<dt><a id="events-UNINIT"><code class="constant-name">NONE</code></a></dt>
										<dd>The current event is not being dispatched, i.e., the <a href="#events-event-type-eventPhase">Event.eventPhase</a> is being observered prior to
											calling <a href="#events-EventTarget-dispatchEvent">EventTarget.dispatchEvent()</a> or following the completion of the
											<a class="def" href="#glossary-phase">event phases</a> of a given <code>Event</code>.</dd>

										<dt><a id="events-AT_TARGET"><code class="constant-name">AT_TARGET</code></a></dt>
										<dd>The current event is in the <a class="def" href="#glossary-target-phase">target phase</a>, i.e., it is being evaluated at the <a class="def"
											href="#glossary-event-target">event target</a>.</dd>

										<dt><a id="events-BUBBLING_PHASE"><code class="constant-name">BUBBLING_PHASE</code></a></dt>
										<dd>The current event phase is the <a class="def" href="#glossary-bubbling-phase">bubbling phase</a>.</dd>

										<dt><a id="events-CAPTURING_PHASE"><code class="constant-name">CAPTURING_PHASE</code></a></dt>
										<dd>The current event phase is the <a class="def" href="#glossary-capture-phase">capture phase</a>.</dd>
									</dl>
								</dd>
							</dl>
						</dd>

						<dt><strong>Attributes</strong></dt>
						<dd>
							<dl>
								<dt><code class="attribute-name"><a id="events-event-type-canBubble">bubbles</a></code> of type <code>boolean</code>, readonly</dt>
								<dd>
									<p>Used to indicate whether or not an event is a bubbling event. If the event can bubble the value <span class="must">must</span> be <code>true</code>, otherwise the value <span class="must">must</span> be
										<code>false</code>.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-canCancel">cancelable</a></code> of type <code>boolean</code>, readonly</dt>
								<dd>
									<p>Used to indicate whether or not an event can have its <a class="def" href="#glossary-default-action">default action</a> prevented (see also <a href="#event-flow-default-cancel">
										Default actions and cancelable events</a>). If the <a class="def" href="#glossary-default-action">default action</a> can be prevented the value <span class="must">must</span> be <code>true</code>,
										otherwise the value <span class="must">must</span> be <code>false</code>.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>

									<p class="note"><strong>Note:</strong> Use <code>Event.defaultPrevented</code> to see whether a cancelable event has beened cancelled or not.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-currentTarget">currentTarget</a></code> of type <a href="#events-EventTarget"><code>EventTarget</code></a>,
									readonly</dt>
								<dd>
									<p>Used to retrieve the <a class="def" href="#glossary-current-event-target">current event target</a> whose <a href="#events-EventListener"><code>EventListeners</code></a>
										are currently being processed. This is particularly useful during the capture and bubbling phases.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-defaultPrevented">defaultPrevented</a></code> of type <code>boolean</code>, readonly, introduced in <strong
									class="version">DOM Level 3</strong></dt>
								<dd>
									<p>Used to indicate whether this event has been cancelled or not. <code>Event.defaultPrevented</code> <span class="must">must</span> return true if both <a href="#events-event-type-canCancel">
										<code>Event.cancelable</code></a> is <code>true</code> and <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> has been called for
										this event. Otherwise this attribute <span class="must">must</span> return <code>false</code>.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>

									<p class="note"><strong>Note:</strong> Calling <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> after an event has been dispatched will reset
										the internal default-prevented state of the event.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-isTrusted">isTrusted</a></code> of type <code>boolean</code>, readonly, introduced in <strong class="version">
									DOM Level 3</strong></dt>
								<dd>
									<p>Used to indicate whether this event was generated by the <a class="def" href="#glossary-user-agent">user agent</a> (trusted) or by script (untrusted).  See <a
										href="#trusted-events">trusted events</a> for more details.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-eventPhase">eventPhase</a></code> of type <code>unsigned short</code>, readonly</dt>
								<dd>
									<p>Used to indicate the <a href="#event-phase">phase</a> of the event's current propagation path (capture, target, or bubble).</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
								</dd>


								<dt><code class="attribute-name"><a id="events-event-type-target">target</a></code> of type <a href="#events-EventTarget"><code>EventTarget</code></a>, readonly
								</dt>
								<dd>
									<p>Used to retrieve the <a class="def" href="#glossary-event-target">event target</a> associated with the <a href="#event-flow">Event dispatch and DOM
										event flow</a>.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-timeStamp">timeStamp</a></code> of type <code>DOMTimeStamp</code>, readonly</dt>
								<dd>
									<p>Used to specify the time at which the event was created in milliseconds relative to 1970-01-01T00:00:00Z. This value is the <a class="def" href="#glossary-un-initialized-value">
										un-initialized value</a> of this attribute.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-event-type-type">type</a></code> of type <code>DOMString</code>, readonly</dt>
								<dd>
									<p>The name of the event type. <a href="#conf-specs">Specifications that define events</a>, <a href="#conf-authors">content authors</a>, and <a href="#conf-author-tools">
										authoring tools</a> <span class="must">must</span> use case-sensitive event type names.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
								</dd>
							</dl>
						</dd>

						<dt><strong>Methods</strong></dt>
						<dd>
							<dl>
								<dt><code class="method-name"><a id="events-event-type-initEvent">initEvent</a></code></dt>
								<dd>
									<div class="method">
										<p>Initializes attributes of an <code>Event</code>. The <code>Event</code> could have been created through the <a href="#events-DocumentEvent-createEvent">
											<code>DocumentEvent.createEvent</code></a> method or by the implementation in response to a user action. For any <code>Event</code> created with the
											<a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent</code></a> method, this method <span class="must">must</span> be called before the <code>Event</code>
											is dispatched via the <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a> method. If the method is called several
											times before invoking <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent</code></a>, only the final invocation takes precedence.
											If this method is called during an invocation of <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent</code></a>, this method
											<span class="must">must</span> do nothing and return immediately. If called from a subclass of the <code>Event</code> interface only the values specified in
											this method are modified, all other attributes are left unchanged.</p>

										<p>This method <span class="must">must</span> also reset the event object's internal-propagation and default-action-prevention states. This allows an event object to be "reset"
											before being dispatched multiple times.</p>

										<p class="example"><strong>Example:</strong> If an <code>EventListener</code> called <code>stopPropagation()</code> or <code>stopImmediatePropagation()</code> during
											the event's previous dispatch, then after calling this method, the event can be re-dispatched (via <code>dispatchEvent</code>) and will propagate through all candidate
											event listeners along its propagation path (as it did during the prior dispatch). Similarily, if an <code>EventListener</code> called <code>preventDefault()</code>
											during the event's previous dispatch, then after calling this method, the event's <code>defaultPrevented</code> property will be <code>false</code>.</p>

										<p class="warning" id="warning-initEvent-untrusted"><strong>Warning!</strong> For security reasons, events modified using <a href="#events-event-type-initEvent"><code>
											Event.initEvent()</code></a> <span class="must">must</span> have a <code class="attribute-name"><a href="#events-event-type-isTrusted">isTrusted</a></code> attribute value of <code>false</code>.
											See <a href="#trusted-events">trusted events</a> for more details.</p>

										<p class="note"><strong>Authoring Note:</strong> <a class="def" href="#trusted-events">Trusted events</a> can have their <a class="def" href="#glossary-event-type">
											event type</a> and other attributes changed using this method. However, this method always converts the <code>Event</code> from a trusted event to an untrusted
											event (e.g., the <a href="#events-event-type-isTrusted"><code>Event.isTrusted</code></a> attribute will return <code>false</code>).</p>

										<p class="note"><strong>Authoring Note:</strong> <a class="def" href="#trusted-events">Trusted events</a> are pre-initialized by the implementation before being dispatched.
											As a result, it is not necessary to call <code>Event.initEvent()</code> prior to re-dispatching the trusted event--however calling <a href="#events-EventTarget-dispatchEvent">
											<code>EventTarget.dispatchEvent()</code></a> will convert the <code>Event</code> from a trusted event to an untrusted event (e.g., the <a href="#events-event-type-isTrusted">
											<code>Event.isTrusted</code></a> attribute will return <code>false</code>).</p>

										<div class="parameters">
											<strong>Parameters</strong>
											<div class="paramtable">
												<dl>
													<dt><a id="events-Event-initparam-eventTypeArg"><code class="parameter-name">eventTypeArg</code></a> of type <code>DOMString</code></dt>
													<dd><p>Specifies <a href="#events-event-type-type"><code>Event.type</code></a>, the name of the event type.</p></dd>

													<dt><a id="events-Event-initparam-canBubbleArg"><code class="parameter-name">canBubbleArg</code></a> of type <code>boolean</code></dt>
													<dd><p>Specifies <a href="#events-event-type-canBubble"><code>Event.bubbles</code></a>. This parameter overrides the intrinsic bubbling behavior of the event.</p></dd>

													<dt><a id="events-Event-initparam-cancelableArg"><code class="parameter-name">cancelableArg</code></a> of type <code>boolean</code></dt>
													<dd><p>Specifies <a href="#events-event-type-canCancel"><code>Event.cancelable</code></a>. This parameter overrides the intrinsic cancelable behavior of the event.</p></dd>
												</dl>
											</div>
										</div>

										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>

								<dt><code class="method-name"><a id="events-event-type-preventDefault">preventDefault</a></code></dt>
								<dd>
									<div class="method">
										<p>When this method is invoked, the event <span class="must">must</span> be canceled, meaning any <a class="def" href="#glossary-default-action">default actions</a> normally taken by the implementation
											as a result of the event <span class="mustnot">must not</span> occur (see also <a href="#event-flow-default-cancel">Default actions and cancelable events</a>). Default actions which occur prior
											to the event's dispatch (see <a href="#event-flow-default-cancel">Default actions and cancelable events</a>) are reverted. Calling this method for a non-cancelable
											event <span class="must">must</span> have no effect.  If an event has more than one <a class="def" href="#glossary-default-action">default action</a>, each cancelable <a class="def" href="#glossary-default-action">
											default action</a> <span class="must">must</span> be canceled.</p>

										<p class="note"><strong>Note:</strong> This method does not stop the event propagation; use <a href="#events-event-type-stopPropagation">
											<code>Event.stopPropagation()</code></a> or <a href="#events-event-type-stopImmediatePropagation"><code>Event.stopImmediatePropagation()</code></a> for that effect.</p>

										<div><strong>No Parameters</strong></div>

										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>

								<dt><code class="method-name"><a id="events-event-type-stopImmediatePropagation">stopImmediatePropagation</a></code> introduced in <strong class="since">DOM Level
									3</strong></dt>
								<dd>
									<div class="method">
										<p>Prevents all other <a class="def" href="#glossary-event-handler">event listeners</a> from being triggered for this event dispatch, including any remaining
											<a class="def" href="#glossary-candidate-event-handlers">candiate event listeners</a>. Once it has been called, further calls to this method have no additional
											effect.</p>

										<p class="note"><strong>Note:</strong> This method does not prevent the <a class="def" href="#glossary-default-action">default action</a> from being invoked;
											use <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> for that effect.</p>

										<div><strong>No Parameters</strong></div>

										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>

								<dt><code class="method-name"><a id="events-event-type-stopPropagation">stopPropagation</a></code></dt>
								<dd>
									<div class="method">
										<p>Prevents all other <a class="def" href="#glossary-event-handler">event listeners</a> from being triggered, excluding any remaining <a class="def"
											href="#glossary-candidate-event-handlers">candiate event listeners</a>. Once it has been called, further calls to this method have no additional effect.</p>

										<p class="note" id="note-stopPropagation-default"><strong>Note:</strong> This method does not prevent the <a class="def" href="#glossary-default-action">default action</a>
											from being invoked; use <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> for that effect.</p>

										<div><strong>No Parameters</strong></div>

										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>
							</dl>
						</dd>
					</dl>
				</dd>
			</dl>

		</div>

		<h2><a id="interface-CustomEvent" href="#interface-CustomEvent">4.2 Interface CustomEvent</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-CustomEvent">CustomEvent</a></em></strong> (introduced in <strong class="since">DOM Level 3</strong>)</dt>
				<dd>
					<p>The <a href="#events-CustomEvent"><code>CustomEvent</code></a> interface is the <span class="recommended">recommended</span> interface for application-specific event types. Unlike the <a href="#events-Event">
						<code>Event</code></a> interface, it allows applications to provide contextual information about the event type.</p>

					<p class="note"><strong>Authoring Note:</strong> Use a prefix string on the event type name for application-specific event types to avoid clashes with future general-purpose
						event types.</p>

					<p>To create an instance of the <code>CustomEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("CustomEvent")</code></a>
						method call.</p>

					<p class="note"><strong>Authoring Note: </strong>See <a href="#new-event-interface-initializers">Appendix A</a> for information about programmatically initializing
						CustomEvent objects.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<dd>
							<pre class="idl" id="idl-interface-CustomEvent"><code>
<span class="comment">// Introduced in DOM Level 3:</span>
interface <a href="#events-CustomEvent">CustomEvent</a> : <a href="#events-Event">Event</a>
{
  readonly attribute any <a href="#events-CustomEvent-detail">detail</a>;
};
</code></pre>
						</dd>

						<dt><strong>Attributes</strong></dt>
						<dd>
							<dl>
								<dt><code class="attribute-name"><a id="events-CustomEvent-detail">detail</a></code> of type <code>any</code>, readonly</dt>
								<dd>
									<p>Specifies some detail information about the <a href="#events-Event"><code>Event</code></a>.</p>

									<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
								</dd>
							</dl>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>

		<h2><a id="interface-EventTarget" href="#interface-EventTarget">4.3 Interface EventTarget</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-EventTarget">EventTarget</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
				<dd>
					<p>The <code>EventTarget</code> interface allows registration and removal of event listeners, and dispatch of events to an event target.</p>

					<p class="note"><strong>Note:</strong> Though an event listener can be registered for any <a class="def" href="#glossary-event-target">event
						target</a> node, the user agent only dispatches UA-generated (trusted) events on node types that are defined as event target types for that specific event type
						(see the <a href="#event-types-list">List of DOM3 Event Types</a>); for example, a <a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a>
						event type registered on a text node will never be fired by the user agent, though a content author could dispatch an event of that type on the text node via script.</p>

					<p>When used with the DOM event flow, this interface <span class="must">must</span> be implemented by all <a class="def" href="#glossary-event-target">event targets</a> and target ancestors,
						i.e., all DOM <code>Nodes</code> of the tree support this interface when the implementation conforms to DOM Level 3 Events and, therefore, this interface can be
						obtained by using binding-specific casting methods on an instance of the <code>Node</code> interface.</p>

					<p>Invoking <code>addEventListener</code> (or <code>removeEventListener</code>) repeatedly on the same <code>EventTarget</code> with the same values for the parameters
						<code>type</code>, <code>listener</code>, and <code>useCapture</code> has no effect. Doing so does not cause the event listener to be registered more than once and
						does not cause a change in the triggering order.</p>

					<p class="note"><strong>Note:</strong>  In addition to the <a href="#events-EventTarget-addEventListener">EventTarget.addEventListener</a> method, some
						<a class="def" href="#glossary-host-language">host languages</a> allow a content author to register event listeners by the use of attributes, e.g.,
						<em><code>onclick="handleClick()"</code></em> (see [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] for further examples). Due to the
						language-specific details, this type of event listener registration is not defined in this specification. In general, many event types can be used as an attribute
						in this way by adding the prefix <em><code>on-</code></em> to the event type name. Dispatching events to these listeners is expected to behave consistently with the
						event registration and propagation defined in this specification, with the same interfaces, properties, and methods.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<dd>

							<pre class="idl" id="idl-interface-"><code>
<span class="comment">// Introduced in DOM Level 2:</span>
interface <a href="#events-EventTarget">EventTarget</a>
{
  <span class="comment">// Modified in DOM Level 3:</span>
  void    <a href="#events-EventTarget-addEventListener">addEventListener</a>(DOMString <a href="#events-EventTarget-aelparam-type">type</a>,
                           <a href="#events-EventListener">EventListener</a>? <a href="#events-EventTarget-aelparam-listener">listener</a>,
                           <em>optional</em> boolean <a href="#addEventListener_useCapture">useCapture</a> = false);
  void    <a href="#events-EventTarget-removeEventListener">removeEventListener</a>(DOMString <a href="#events-EventTarget-relparam-type">type</a>,
                              <a href="#events-EventListener">EventListener</a>? <a href="#events-EventTarget-relparam-listener">listener</a>,
                              <em>optional</em> boolean <a href="#removeEventListener_useCapture">useCapture</a> = false);
  boolean <a href="#events-EventTarget-dispatchEvent">dispatchEvent</a>(<a href="#events-Event">Event</a> <a href="#events-EventTarget-dispatchparam-event">event</a>);
};
</code></pre>
						</dd>

						<dt><strong>Methods</strong></dt>
						<dd>
							<dl>
								<dt><code class="method-name"><a id="events-EventTarget-addEventListener">addEventListener</a></code></dt>
								<dd>
									<div class="method">
										<p>Registers an event listener on the <a href="#interface-EventTarget"><code>EventTarget</code></a>. The listener is registered for the capture phase if the
											<code>useCapture</code> parameter is <code>true</code>, and for the bubble phase otherwise. When the event reaches the target element, listeners for both
											the capture and bubble phases are triggered as part of the target phase.
										</p>

										<div class="parameters">
											<p><strong>Parameters</strong></p>

											<div class="paramtable">
												<dl>
													<dt><a id="events-EventTarget-aelparam-type"><code class="parameter-name">type</code></a> of type <code>DOMString</code></dt>
													<dd><p>Specifies the <a href="#events-event-type-type"><code>Event.type</code></a> associated with the event for which the user is registering.</p></dd>

													<dt><a id="events-EventTarget-aelparam-listener"><code class="parameter-name">listener</code></a> of type <a href="#events-EventListener"><code>EventListener
														</code></a></dt>
													<dd><p>The <code>listener</code> parameter <span class="must">must</span> be an object that implements the <a href="#events-EventListener"><code>EventListener</code></a> interface or a function.
														If <code>listener</code> is a function then it <span class="must">must</span> be used as the callback for the event; otherwise, if <code>listener</code> implements <a href="#events-EventListener">
														<code>EventListener</code></a>, then its <a href="#events-EventListener-handleEvent">handleEvent</a> method <span class="must">must</span> be used as the callback.</p></dd>

													<dt><a id="addEventListener_useCapture"><code class="parameter-name">useCapture</code></a> of type <code>boolean</code></dt>
													<dd>
														<p>If true, <code>useCapture</code> indicates that the user wishes to add the event listener for the <a class="def" href="#glossary-capture-phase">capture</a>
															and <a class="def" href="#glossary-target-phase">target</a> phases only, i.e., this event listener will not be triggered during the <a class="def"
															href="#glossary-bubbling-phase"> bubbling</a> phase. If <code>false</code>, the event listener <span class="must">must</span> only be triggered during the <a class="def"
															href="#glossary-target-phase">target</a> and <a class="def" href="#glossary-bubbling-phase">bubbling</a> phases.</p>

														<p>This parameter <span class="must">must</span> be optional. If not provided, the <a href="#events-EventTarget-addEventListener">EventTarget.addEventListener</a> method <span class="must">must</span> behave as if <a
															href="#addEventListener_useCapture"><code class="parameter-name">useCapture</code></a> were specified to be <code>false</code>.</p>

														<p class="note" id="addEventListener_useCapture-author"><strong>Authoring Note:</strong>  The <a href="#events-EventTarget-addEventListener"><code class="parameter-name">
															useCapture</code></a> parameter was manditory in DOM2 Events [<a href="#references-DOM2Events">DOM2 Events</a>], and omitting this parameter could cause an error
															in older implementations.</p>
													</dd>
												</dl>
											</div>
										</div>
									<div><strong>No Return Value</strong></div>

									<div><strong>No Exceptions</strong></div>
								</div>
								</dd>

								<dt><code class="method-name"><a id="events-EventTarget-removeEventListener">removeEventListener</a></code></dt>
								<dd>
									<div class="method">
										<p>Removes an event listener. Calling <code>removeEventListener</code> with arguments that do not identify any currently registered <a href="#events-EventListener"><code>
											EventListener</code></a> on the <code>EventTarget</code> has no effect. </p>

										<div class="parameters">
											<p><strong>Parameters</strong></p>

											<div class="paramtable">
												<dl>
													<dt><a id="events-EventTarget-relparam-type"><code class="parameter-name">type</code></a> of type <code>DOMString</code></dt>
													<dd><p>Specifies the <a href="#events-event-type-type"><code>Event.type</code></a> for which the user registered the event listener.</p></dd>

													<dt><a id="events-EventTarget-relparam-listener"><code class="parameter-name">listener</code></a> of type <a href="#events-EventListener"><code>EventListener</code></a></dt>
													<dd><p>The <a href="#events-EventListener"><code>EventListener</code></a> to be removed.</p></dd>

													<dt><code id="removeEventListener_useCapture" class="parameter-name">useCapture</code> of type <code>boolean</code></dt>
													<dd>
														<p>Specifies whether the <a href="#events-EventListener"><code>EventListener</code></a> being removed was registered for the capture phase or not. Implementations
															<span class="must">must</span> treat the same listener that was registered twice with both <code>useCapture</code> true and <code>useCapture</code> false as independent registrations, and
															remove them independently.</p>

														<p class="note"><strong>Authoring Note:</strong>  If a listener was registered twice, once for the capture and target phases and once for the target and bubbling phases,
															this represents two unique registrations. Removal of an event listener registered for the capture and target phases does not affect the same event listener registered
															for the target and bubbling phases, and vice versa.</p>

														<p>This parameter <span class="must">must</span> be optional. If not provided, the <a href="#events-EventTarget-removeEventListener">EventTarget.removeEventListener</a> method <span class="must">must</span> behave as if <a
															href="#removeEventListener_useCapture"><code class="parameter-name">useCapture</code></a> were specified to be <code>false</code>.</p>

														<p class="note"><strong>Authoring Note:</strong>  The <a href="#removeEventListener_useCapture"><code class="parameter-name">useCapture</code></a> parameter was manditory in DOM2
															Events [<a href="#references-DOM2Events">DOM2 Events</a>], and omitting this parameter could cause an error in older implementations.</p>
													</dd>
												</dl>
											</div>
										</div>
										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>

								<dt><code class="method-name"><a id="events-EventTarget-dispatchEvent">dispatchEvent</a></code> modified in <strong class="version">DOM Level 3</strong></dt>
								<dd>
									<div class="method">
										<p>Dispatches an event into the implementation's event model. The <a class="def" href="#glossary-event-target">event target</a> of the event <span class="must">must</span> be the <code>EventTarget</code>
											object on which <code>dispatchEvent</code> is called.</p>

										<p class="warning"><strong>Warning!</strong>  For security reasons, events dispatched using <a href="#events-EventTarget-dispatchEvent">
											<code>EventTarget.dispatchEvent()</code></a> <span class="must">must</span> have a <code class="attribute-name"><a href="#events-event-type-isTrusted">isTrusted</a></code> attribute value
											of <code>false</code>.  See <a href="#trusted-events">trusted events</a> for more details.</p>

										<p class="note"><strong>Note:</strong> while a dispatch (triggered by <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a>) is in progress, calls to
											<a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> are ignored (the method returns immediately without side-effects) and calls to
											<a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a> result in an exception.</p>

										<div class="parameters">
											<p><strong>Parameters</strong></p>

											<div class="paramtable">
												<dl>
													<dt><a id="events-EventTarget-dispatchparam-event"><code class="parameter-name">event</code></a> of type <a href="#events-Event"><code>Event</code></a></dt>
													<dd><p>The event to be dispatched.</p></dd>

													<dd>
														<p class="note"><strong>Note: </strong>This parameter receives an <code>Event</code> object, or any object that inherits from <code>Event</code>, e.g., <code>MouseEvent</code>,
															<code>KeyboardEvent</code>, <code>MutationEvent</code>, etc.</p>
													</dd>
												</dl>
											</div>
										</div>
										<div class="return">
											<p><strong>Return Value</strong></p>

											<div class="returntable">
												<table summary="Layout table: the first cell contains the type of the return value, the second contains a short description" border="0">
													<tr>
														<td><p><code>boolean</code></p></td>

														<td><p>If after the event object finishes propagating through the DOM event flow its <a href="#events-event-type-defaultPrevented"><code>Event.defaultPrevented</code></a>
															attribute is <code>false</code>, then this method returns <code>true</code>. Otherwise this method returns <code>false</code>.</p></td>
													</tr>
												</table>
											</div>
										</div>
										<div class="exceptions">
											<p><strong>Exceptions</strong></p>
											<ul class="exception">
												<li>If the <a href="#events-event-type-type"><code>Event.type</code></a> was not specified by initializing the event before <code>dispatchEvent</code> was called OR
													the <a href="#events-Event"><code>Event</code></a> object is already being dispatched, a <code>DOMException</code> of type <em><code>InvalidStateError</code></em>
													is thrown.</li>
											</ul>
										</div>
									</div>
								</dd>

							</dl>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>

		<h2><a id="interface-EventListener" href="#interface-EventListener">4.4 Interface EventListener</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-EventListener">EventListener</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
				<dd>
					<p>The <code>EventListener</code> interface is the primary way to handle events. <code>EventListener</code> represents the callback object that the user agent will
						invoke when dispatching an <code>Event</code> to an <a href="#events-EventTarget"><code>EventTarget</code></a>.</p>

					<p class="note"><strong>Note:</strong> Authors define an object which implements the <code>EventListener</code> interface and register their event listener using <a
						href="#events-EventTarget-addEventListener">EventTarget.addEventListener</a>. In JavaScript, an <code>EventListener</code> can be either a function or an object
						with a <code>handleEvent</code> member function.</p>

					<p class="note"><strong>Note:</strong> It is a best practice for authors to remove their <code>EventListener</code> from its <a href="#events-EventTarget"><code>EventTarget</code></a>
						after they have completed using the listener.</p>

					<p>Copying a <code>Node</code>, with methods such as <code>Node.cloneNode</code> or <code>Range.cloneContents</code> [<cite><a class="informative"
						href="#references-DOMRange">DOM Range</a></cite>], <span class="mustnot">must not</span> copy the event listeners attached to it.
						Event listeners can be attached to the newly created <code>Node</code> afterwards, if so desired.</p>

					<p>Moving a <code>Node</code>, with methods such as <code>Document.adoptNode</code>, <code>Node.appendChild</code>, or <code>Range.extractContents</code>
						[<cite><a class="informative" href="#references-DOMRange">DOM Range</a></cite>], <span class="mustnot">must not</span> cause the event listeners attached to it to be removed or un-registered.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<dd>
							<pre class="idl" id="idl-interface-EventListener"><code>
<span class="comment">// Introduced in DOM Level 2:</span>
callback interface <a href="#events-EventListener">EventListener</a>
{
  void <a href="#events-EventListener-handleEvent">handleEvent</a>(<a href="#events-Event">Event</a> event);
};
</code></pre>
						</dd>

						<dt><strong>Methods</strong></dt>
						<dd>
							<dl>
								<dt><code class="method-name"><a id="events-EventListener-handleEvent">handleEvent</a></code></dt>
								<dd>
									<div class="method">
										<p>This method <span class="must">must</span> be called whenever an event occurs of the event type for which the <code>EventListener</code> interface was registered.</p>

										<div class="parameters">
											<p><strong>Parameters</strong></p>

											<div class="paramtable">
												<dl>
													<dt><code class="parameter-name">event</code> of type <a href="#events-Event"><code>Event</code></a></dt>
													<dd><p>The <a href="#events-Event"><code>Event</code></a> contains contextual information about the <a class="def" href="#glossary-event">event</a>.</p></dd>
												</dl>
											</div>
										</div>
										<div><strong>No Return Value</strong></div>

										<div><strong>No Exceptions</strong></div>
									</div>
								</dd>
							</dl>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>

		<h2><a id="interface-DocumentEvent" href="#interface-DocumentEvent">4.5 Interface DocumentEvent</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-DocumentEvent">DocumentEvent</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
				<dd>
					<p>The <code>DocumentEvent</code> interface provides a mechanism by which the user can create an <a href="#events-Event"><code>Event</code></a> object of a type supported
						by the implementation. The <code>DocumentEvent</code> interface <span class="must">must</span> be implemented on the same object that implements the <code>Document</code> interface.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<!-- NOTE: This is preserved as a [NoInterfaceObject] definition (rather than a partial interface Document { ..} because SVG also needs to implement this interface on their SVGSVGElement interface -->
						<dd>
							<pre class="idl" id="idl-interface-DocumentEvent"><code>
<span class="comment">// Introduced in DOM Level 2:</span>
[NoInterfaceObject]
interface <a href="#events-DocumentEvent">DocumentEvent</a>
{
  <span class="comment">// Modified in DOM Level 3:</span>
  <a href="#events-Event">Event</a> <a href="#events-DocumentEvent-createEvent">createEvent</a>(DOMString eventInterface);
};
Document implements <a href="#events-DocumentEvent">DocumentEvent</a>;
</code></pre>
						</dd>

						<dt><strong>Methods</strong></dt>
						<dd>
							<dl>
								<dt><code class="method-name"><a id="events-DocumentEvent-createEvent">createEvent</a></code></dt>
								<dd>
									<div class="method">
										<p>Creates an event object of the type specified.</p>

										<div class="parameters">
											<p><strong>Parameters</strong></p>

											<div class="paramtable">
												<dl>
													<dt><code class="parameter-name">eventInterface</code> of type <code>DOMString</code></dt>
													<dd>
														<p>The <code>eventInterface</code> parameter specifies the name of the DOM Events interface to be supported by the created event
															object, e.g., <code>"Event"</code>, <code>"MouseEvent"</code>, <code>"MutationEvent"</code>, and so on.</p>

														<p class="note"><strong>Note: </strong>After calling <code>createEvent</code>, and prior to dispatching the event with the
															<a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a> method, the
															<a href="#events-Event"><code>Event</code></a> will need to be initialized with the appropriate event initialization
															method (e.g., <code>initEvent</code>, <code>initMouseEvent</code>, etc.) in order to associate it with an event type and related values.</p>

														<p class="example"><strong>Example:</strong>  A content author wishing to synthesize some kind of <a href="#events-UIEvent"><code>UIEvent</code></a>
															would invoke <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("UIEvent")</code></a>. The <a href="#events-event-type-initUIEvent"><code>
															UIEvent.initUIEvent()</code></a> method could then be called on the newly created <a class="noxref" href="#events-UIEvent"><code>UIEvent</code></a> object to
															set the specific type of user interface event to be dispatched, <a class="eventtype" href="#event-type-scroll"><code>scroll</code></a> for example, and set its
															context information, e.g., <a href="#events-UIEvent-detail"><code>UIEvent.detail</code></a>.</p>

														<p>For backward compatibility, the following case-insensitive feature names are valid values for the parameter <code>eventInterface</code>:</p>

														<table class="data-table" summary="The first column contains the feature name, the second contains the resulting event interface returned by createEvent">
															<tr>
																<th>Legacy feature name</th>
																<th>Resulting event interface</th>
															</tr>
															<tr>
																<td><code>"Events"</code></td>
																<td><a href="#interface-Event"><code>Event</code></a></td>
															</tr>
															<tr>
																<td><code>"HTMLEvents"</code></td>
																<td><a href="#interface-Event"><code>Event</code></a></td>
															</tr>
															<tr>
																<td><code>"UIEvents"</code></td>
																<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
															</tr>
															<tr>
																<td><code>"MouseEvents"</code></td>
																<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
															</tr>
															<tr>
																<td><code>"MutationEvents"</code></td>
																<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
															</tr>
														</table>

														<p class="warning"><strong>Warning!</strong>  For security reasons, events generated using <a href="#events-DocumentEvent-createEvent">
															<code>DocumentEvent.createEvent("Event")</code></a> <span class="must">must</span> have a <code class="attribute-name"><a href="#events-event-type-isTrusted">isTrusted</a></code> attribute
															value of <code>false</code>.  See <a href="#trusted-events">trusted events</a> for more details.</p>
													</dd>
												</dl>
											</div>
										</div>
										<div class="return">
											<p><strong>Return Value</strong></p>

											<div class="returntable">
												<table summary="Layout table: the first cell contains the type of the return value, the second contains a short description" border="0">
													<tr>
														<td><a href="#events-Event"><code>Event</code></a></td>

														<td>The newly created event object.</td>
													</tr>
												</table>
											</div>
										</div>
										<div class="exceptions">
											<p><strong>Exceptions</strong></p>

											<ul class="exception">
												<li>If the implementation does not support the <a href="#events-Event"><code>Event</code></a> interface requested, a <code>DOMException</code> of type <em><code>NotSupportedError</code></em>
													is thrown.</li>
											</ul>
										</div>
									</div>
								</dd>
							</dl>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>
	</div>

	<!-- Section: The Events ========================================================-->

	<h1><a id="events-module" href="#events-module">5. Events Module</a></h1>
	<div>

		<h2><a id="event-types" href="#event-types">5.1 Event Types</a></h2>
		<div>
			<p>Each event <span class="must">must</span> be associated with a type, called <em>event type</em> and available as the <a href="#events-event-type-type"><code class="interface-attribute">type</code></a>
				attribute on the event object. The event type <span class="must">must</span> be of type <code>DOMString</code>.</p>

			<h3><a id="event-types-list" href="#event-types-list">5.1.1 List of DOM3 Event Types</a></h3>
			<div>
				<p>Depending on the level of DOM support, or the devices used for display (e.g., screen) or interaction (e.g., mouse, keyboard, touch screen, or voice), these event
					types can be generated by the implementation. When used with an [<cite><a class="informative" href="#references-XML">XML 1.0</a></cite>] or
					[<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] application, the specifications of those languages <span class="may">may</span> restrict the
					semantics and scope (in particular the possible <a class="def" href="#glossary-event-target">event targets</a>) associated
					with an event type. Refer to the specification defining the language used in order to find those restrictions or to find event types that are
					not defined in this document.</p>

				<p>The following table provides an informative summary of the event types defined in this specification.</p>

				<table class="data-table" summary="This table contains the complete list of event types defined by DOM Level 3 Events. The first column contains the local name of the event type. The second column indicates if the event accomplish the bubbling phase or not (all events accomplish the capture and target phases). The third column indicates if the default action associated with the event can be canceled. The fourth column indicates the nodes that can be target of the event. the fifth (and last) column indicates the DOM interface implemented by the event object.">
					<tr>
						<th>Event Type</th>
						<th>Sync / Async</th>
						<th>Bubbling phase</th>
						<th>Trusted event target types</th>
						<th>DOM interface</th>
						<th>Cancelable</th>
						<th>Default Action</th>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-abort"><code>abort</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-Event"><code>Event</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-blur"><code>blur</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-click"><code>click</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
						<td>Yes</td>
						<td>Show a <a class="def" href="#glossary-text-composition-system">text composition system</a> candidate window</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
						<td>Yes</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>ProcessingInstruction</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMFocusOut"><code>DOMFocusOut</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMNodeInserted"><code>DOMNodeInserted</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
							<code>ProcessingInstruction</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMNodeInsertedIntoDocument"><code>DOMNodeInsertedIntoDocument</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
							<code>ProcessingInstruction</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMNodeRemoved"><code>DOMNodeRemoved</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
							<code>ProcessingInstruction</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMNodeRemovedFromDocument"><code>DOMNodeRemovedFromDocument</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
							<code>ProcessingInstruction</code></td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-DOMSubtreeModified"><code>DOMSubtreeModified</code></a>
							<p class="warning"><strong>Warning!</strong> Deprecated</p>
						</td>
						<td>Sync</td>
						<td>Yes</td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>DocumentFragment</code>, <code>Element</code>, <code>Attr</code>
						</td>
						<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-error"><code>error</code></a></td>
						<td>Async</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-Event"><code>Event</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-focus"><code>focus</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-focusIn"><code>focusin</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-focusout"><code>focusout</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Document</code>, <code>Element</code></td>
						<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
						<td>Yes</td>
						<td>Varies: <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event; launch <a class="def" href="#glossary-text-composition-system">text composition
							system</a>; <a class="eventtype" href="#event-type-blur"><code>blur</code></a> and <a class="eventtype" href="#event-type-focus"><code>focus</code></a> events;
							<a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event; other event</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Document</code>, <code>Element</code></td>
						<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
						<td>Yes</td>
						<td>Varies: launch <a class="def" href="#glossary-text-composition-system">text composition system</a>; <a class="eventtype" href="#event-type-blur"><code>blur</code></a>
							and <a class="eventtype" href="#event-type-focus"><code>focus</code></a> events; <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a>
							event; other event</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Document</code>, <code>Element</code></td>
						<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
						<td>Yes</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-load"><code>load</code></a></td>
						<td>Async</td>
						<td>No</td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
						<td><a href="#events-Event"><code>Event</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td>Varies: start a drag/drop operation; start a text selection; start a scroll/pan interaction (in combination with the middle mouse button, if supported)</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
						<td>Yes</td>
						<td>Invoke a context menu (in combination with the right mouse button, if supported)</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-resize"><code>resize</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code></td>
						<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-scroll"><code>scroll</code></a></td>
						<td>Async</td>
						<td>No / <a href="#scroll-document">Yes</a></td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
						<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-select"><code>select</code></a></td>
						<td>Sync</td>
						<td>Yes</td>
						<td><code>Element</code></td>
						<td><a href="#events-Event"><code>Event</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-unload"><code>unload</code></a></td>
						<td>Sync</td>
						<td>No</td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
						<td><a href="#events-Event"><code>Event</code></a></td>
						<td>No</td>
						<td>none</td>
					</tr>
					<tr>
						<td><a class="eventtype" href="#event-type-wheel"><code>wheel</code></a></td>
						<td>Async</td>
						<td>Yes</td>
						<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
						<td><a href="#events-WheelEvent"><code>WheelEvent</code></a></td>
						<td>Yes</td>
						<td>Scroll (or zoom) the document</td>
					</tr>
				</table>

				<p class="example"><strong>Example: </strong>The following is one way to interpret the above table: the <a class="eventtype" href="#event-type-load"><code>load</code></a> event will
					trigger event listeners attached on <code>Element</code> nodes for that event and on the capture and target phases. This event is not cancelable. If an event listener for the
					<a class="eventtype" href="#event-type-load"><code>load</code></a> event is attached to a node other than <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
					<code>Document</code>, or <code>Element</code> nodes, or if it is attached to the bubbling phase only, this event listener would not be triggered.</p>

				<p class="note"><strong>Note: </strong>Don't interpret the above table as definitive for the listed event types. For example, the <a class="eventtype"><code>load</code></a> event is used in other
					specifications, for example, in XMLHttpRequest. Similarly, <a href="#events-EventTarget-dispatchEvent"><code>dispatchEvent</code></a> can be used to dispatch untrusted events to
					listeners on <strong>any</strong> object that also implements <a href="#interface-EventTarget"><code>EventTarget</code></a>.</p>

				<p class="note"><strong>Note: </strong>The event objects associated with the event types described above contain additional context information--refer to the description of the DOM
					interfaces for further information.</p>
			</div>
		</div>

		<h2><a id="event-definitions" href="#event-definitions">5.2 Event Module Definitions</a></h2>
		<div>
			<p>The DOM Event Model allows a DOM implementation to support multiple modules of events. The model has been designed to allow addition of new event modules in the future.
				This document does not attempt to define all possible events. For purposes of interoperability, the DOM defines a module of user interface events including lower
				level device dependent events and a module of document mutation events.</p>

			<h3><a id="events-uievents" href="#events-uievents">5.2.1 User Interface Event Types</a></h3>
			<div>
				<p>The User Interface event module contains basic event types associated with user interfaces and document manipulation.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-UIEvent">UIEvent</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
					<dd>
						<p>The <code>UIEvent</code> interface provides specific contextual information associated with User Interface events.</p>

						<p>To create an instance of the <code>UIEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("UIEvent")</code></a>
							method call.</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-UIEvent"><code>
<span class="comment">// Introduced in DOM Level 2:</span>
interface <a href="#events-UIEvent">UIEvent</a> : <a href="#events-Event">Event</a>
{
  readonly attribute AbstractView? <a href="#events-UIEvent-view">view</a>;
  readonly attribute long          <a href="#events-UIEvent-detail">detail</a>;
  <span class="comment">// Deprecated in DOM Level 3:</span>
  void                             <a href="#events-event-type-initUIEvent">initUIEvent</a>(DOMString typeArg,
                                               boolean canBubbleArg,
                                               boolean cancelableArg,
                                               AbstractView? viewArg,
                                               long detailArg);
};
</code></pre>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-UIEvent-detail">detail</a></code> of type <code>long</code>, readonly</dt>
									<dd>
										<p>Specifies some detail information about the <a href="#events-Event"><code>Event</code></a>, depending on the type of event.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-UIEvent-view">view</a></code> of type <code>AbstractView</code>, readonly</dt>
									<dd>
										<p>The <code>view</code> attribute identifies the <code>AbstractView</code> from which the event was generated.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
									</dd>
								</dl>
							</dd>

							<dt><strong>Methods</strong></dt>
							<dd>
								<dl>
									<dt><code class="method-name"><a id="events-event-type-initUIEvent">initUIEvent</a></code></dt>
									<dd>
										<div class="method">
											<p>Initializes attributes of an <code>UIEvent</code> object. This method has the same behavior as <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a>.</p>

											<p class="warning"><strong>Warning!</strong> The <code>initUIEvent</code> method is deprecated, but supported for backwards-compatibility with widely-deployed
												implementations. See <a href="#new-event-interface-initializers">Appendix A</a> for a suggested (informative-only) alternate initializer syntax.</p>

											<div class="parameters">
												<p><strong>Parameters</strong></p>

												<div class="paramtable">
													<dl>
														<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
														<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

														<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
														<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

														<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
														<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

														<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
														<dd><p>Specifies <a href="#events-UIEvent-view"><code>UIEvent.view</code></a>. This value <span class="may">may</span> be <code>null</code>.</p></dd>

														<dt><code class="parameter-name">detailArg</code> of type <code>long</code></dt>
														<dd><p>Specifies <a href="#events-UIEvent-detail"><code>UIEvent.detail</code></a>.</p></dd>
													</dl>
												</div>
											</div>
											<div><strong>No Return Value</strong></div>

											<div><strong>No Exceptions</strong></div>
										</div>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<p>The User Interface event types are listed below.  Some of these events use the <a href="#events-UIEvent"><code>UIEvent</code></a> interface if generated from a
					user interface, but the <a href="#events-Event"><code>Event</code></a> interface otherwise, as detailed in each event.</p>

				<!-- DOMActivate -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMActivate"><dfn><a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMActivate</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element being activated</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a button, link, or other state-changing element is activated.  Refer to
								<a href="#event-flow-activation">Activation triggers and behavior</a> for more details.</p>

							<p class="warning" id="DOMActivate-deprecated"><strong>Warning!</strong> The <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> <a
								class="def" href="#glossary-event-type">event type</a> is defined in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">
								deprecates</a> the use of this event type in favor of the related <a class="def" href="#glossary-event-type">event type</a> <a class="eventtype" href="#event-type-click">
								<code>click</code></a>.  Other specifications <span class="may">may</span> define and maintain their own <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a>
								<a class="def" href="#glossary-event-type">event type</a> for backwards compatibility.</p>

							<p class="note" id="DOMActivate-click"><strong>Note:</strong>   While <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> and <a class="eventtype"
								href="#event-type-click"><code>click</code></a> are not completely equivalent, implemented behavior for the <a class="eventtype" href="#event-type-click"><code>click</code></a>
								<a class="def" href="#glossary-event-type">event type</a> has developed to encompass the most critical accessibility aspects for which the <a class="eventtype" href="#event-type-DOMActivate">
								<code>DOMActivate</code></a> <a class="def" href="#glossary-event-type">event type</a> was designed, and is more widely implemented.  Content authors are encouraged
								to use the <a class="eventtype" href="#event-type-click"><code>click</code></a> <a class="def" href="#glossary-event-type">event type</a> rather than the related
								<a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a> or <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> <a class="def"
								href="#glossary-event-type">event type</a> to ensure maximum accessibility.</p>
						</dd>
					</dl>
				</div>

				<!-- load -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-load"><dfn><a class="eventtype" href="#event-type-load"><code>load</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>load</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a> if generated from a user interface, <a href="#events-Event"><code>Event</code></a> otherwise.</td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Async</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: common object whose contained resources have loaded</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when the DOM implementation finishes loading the resource (such as the document)
								and any dependent resources (such as images, style sheets, or scripts). Dependent resources that fail to load <span class="mustnot">must not</span> prevent this event from firing if the resource
								that loaded them is still accessible via the DOM. If this event type is dispatched, implementations are <span class="required">required</span> to dispatch this event at least on the <code>Document</code>
								node.</p>

							<p class="note"><strong>Note:</strong> for legacy reasons, <a class="eventtype" href="#event-type-load"><code>load</code></a> events for resources inside
								the document (e.g., images) do not include the <a class="def" href="#glossary-defaultView">defaultView</a> in the propagation path in HTML implementations. See
								[<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] for more information.</p>
						</dd>
					</dl>
				</div>

				<!-- unload -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-unload"><dfn><a class="eventtype" href="#event-type-unload"><code>unload</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>unload</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a> if generated from a user interface, <a href="#events-Event"><code>Event</code></a> otherwise.</td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: common object whose contained resources have been removed</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when the DOM Implementation removes from the environment the resource (such
								as the document) or any dependent resources (such as images, style sheets, scripts). The document <span class="must">must</span> be unloaded after the dispatch of this event type. If this
								event type is dispatched, implementations are <span class="required">required</span> to dispatch this event at least on the <code>Document</code> node.</p>
						</dd>
					</dl>
				</div>

				<!-- abort -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-abort"><dfn><a class="eventtype" href="#event-type-abort"><code>abort</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>abort</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a> if generated from a user interface, <a href="#events-Event"><code>Event</code></a> otherwise.</td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element whose resources have been stopped from loading without error</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when the loading of a resource has been aborted, such as by a user canceling
								the load while it is still in progress.</p>
						</dd>
					</dl>
				</div>

				<!-- error -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-error"><dfn><a class="eventtype" href="#event-type-error"><code>error</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>error</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a> if generated from a user interface, <a href="#events-Event"><code>Event</code></a> otherwise.</td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Async</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element whose resources have been stopped from loading due to an error</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a resource failed to load, or has been loaded but cannot be interpreted
								according to its semantics, such as an invalid image, a script execution error, or non-well-formed XML.</p>
						</dd>
					</dl>
				</div>

				<!-- select -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-select"><dfn><a class="eventtype" href="#event-type-select"><code>select</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>select</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a> if generated from a user interface, <a href="#events-Event"><code>Event</code></a> otherwise.</td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element whose text content has been selected</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a user selects some text.  This event is dispatched after the selection
								has occurred.</p>

							<p>This specification does not provide contextual information to access the selected text.  Where applicable, a <a class="def" href="#glossary-host-language">host
								language</a> <span class="should">should</span> define rules for how a user <span class="may">may</span> select content (with consideration for international language conventions), at what point the <a class="eventtype"
								href="#event-type-select"><code>select</code></a> event is dispatched, and how a content author <span class="may">may</span> access the user-selected content.</p>

							<p class="note"><strong>Note:</strong>  In order to access to user-selected content, content authors will use native capabilities of the <a
								class="def" href="#glossary-host-language">host languages</a>, such as the <code>Document.getSelection()</code> method of the <a href="https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#selections">
								HTML Editing APIs</a> [<cite><a class="informative" href="#references-HTMLEd">HTML Editing</a></cite>].</p>

							<p class="note"><strong>Note:</strong> The <a class="eventtype" href="#event-type-select"><code>select</code></a> event might not be available
								for all elements in all languages.  For example, in [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>], <a class="eventtype" href="#event-type-select">
								<code>select</code></a> events can be dispatched only on form <code>input</code> and <code>textarea</code> elements.  Implementations can dispatch <a class="eventtype"
								href="#event-type-select"><code>select</code></a> events in any context deemed appropriate, including text selections outside of form controls, or image or
								markup selections such as in SVG.</p>
						</dd>
					</dl>
				</div>

				<!-- resize -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-resize"><dfn><a class="eventtype" href="#event-type-resize"><code>resize</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>resize</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: object which has been resized</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a document view has been resized. This event type is dispatched after
								all effects for that occurrence of resizing of that particular <a class="def" href="#glossary-event-target">event target</a> have been executed by the <a class="def"
								href="#glossary-user-agent">user agent</a>.</p>

							<p><a class="def" href="#glossary-user-agent">User agents</a> which support continuous reflow of the document's layout during user-initiated resizing <span class="must">must</span> dispatch
								this event synchronously after each reflow of the document.</p>

							<p>The <a class="def" href="#glossary-defaultView"><code>defaultView</code></a> object <span class="should">should</span> always be resizable.  A <a class="def" href="#glossary-host-language">
								host language</a> <span class="may">may</span> define certain elements to be resizable, and under what conditions (e.g., specific elements like <code>&lt;iframe&gt;</code>, or elements
								with particular characteristics like width and height); however, this specification does not define the behavior for elements.</p>

							<p class="note"><strong>Note:</strong>  The <a class="eventtype" href="#event-type-resize"><code>resize</code></a> event is distinct from the
								SVG <code class="eventtype">zoom</code> event types, though both can occur at the same time, or as the consequence of the same user action.  In particular, browser
								<q>font zooming</q> or <q>page zooming</q> will not necessarily trigger a <a class="eventtype" href="#event-type-resize"><code>resize</code></a> event.</p>

							<p class="note"><strong>Note:</strong> In previous DOM Events specifications, the <a class="eventtype" href="#event-type-resize"><code>resize</code></a>
								event type was defined to have a <a class="def" href="#glossary-bubbling-phase">bubbling phase</a>, but for performance reasons, this was not implemented in most
								user agents, and this specification removes the <a class="def" href="#glossary-bubbling-phase">bubbling phase</a> for this event.</p>
						</dd>
					</dl>
				</div>

				<!-- scroll -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-scroll"><dfn><a class="eventtype" href="#event-type-scroll"><code>scroll</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>scroll</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-UIEvent"><code>UIEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Async</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No / <a href="#scroll-document">Yes</a></td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: object which has been scrolled</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a document view or an element has been scrolled.  This event type is dispatched
								after the scroll has occurred.</p>

							<p id="scroll-document">When dispatched on the <code>Document</code> element, this event type <span class="must">must</span> bubble to the <a class="def" href="#glossary-defaultView"><code>
								defaultView</code></a> object.</p>
						</dd>
					</dl>
				</div>

			</div>

			<h3><a id="events-focusevent" href="#events-focusevent">5.2.2 Focus Event Types</a></h3>
			<div>

				<p class="note"><strong>Note:</strong> This interface and its associated event types and <a href="#events-focusevent-event-order">focus event
					order</a> were designed in accordance to the concepts and guidelines defined in <a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/">User Agent Accessibility
					Guidelines 2.0</a> [<a href="#references-UAAG2">UAAG 2.0</a>], with particular attention on the <a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/#gl-focus-mechanism">
					focus mechanism</a> and the terms defined in the <a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/#def-focus">glossary entry for focus</a>.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-FocusEvent">FocusEvent</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
					<dd>
						<p>The <code>FocusEvent</code> interface provides specific contextual information associated with Focus events.</p>

						<p>
							To create an instance of the <code>FocusEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("FocusEvent")</code></a>
							method call.
						</p>

						<p class="note">
							<strong>Authoring Note: </strong>See <a href="#new-event-interface-initializers">Appendix A</a> for information about programmatically initializing
						FocusEvent objects.
						</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-FocusEvent"><code>
<span class="comment">// Introduced in DOM Level 3:</span>
interface <a href="#events-FocusEvent">FocusEvent</a> : <a href="#events-UIEvent">UIEvent</a>
{
  readonly attribute <a href="#events-EventTarget">EventTarget</a>? <a href="#events-FocusEvent-relatedTarget">relatedTarget</a>;
};
</code></pre>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-FocusEvent-relatedTarget">relatedTarget</a></code> of type <a href="#events-EventTarget"><code>EventTarget</code></a>,
										readonly</dt>
									<dd>
										<p>Used to identify a secondary <a href="#events-EventTarget"><code>EventTarget</code></a> related to a Focus event, depending on the type of event.</p>

										<p>For security reasons with nested browsing contexts, when tabbing into or out of a nested context, the relevant EventTarget <span class="should">should</span> be <code>null</code>.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<h4><a id="events-focusevent-event-order" href="#events-focusevent-event-order">5.2.2.1 Focus Event Order</a></h4>
				<div>
					<p>
						The focus events defined in this specification occur in a set order relative to one another.  The following is the typical sequence of events when a focus is shifted
						between elements (this order assumes that no element is initially focused):</p>

					<ol>
						<li><em>[user shifts focus]</em> <a class="eventtype" href="#event-type-focusIn"><code>focusin</code></a> (before first target element receives focus)</li>
						<li><a class="eventtype" href="#event-type-focus"><code>focus</code></a> (after first target element receives focus)</li>
						<li><a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code></a> (if supported)</li>
						<li><em>[user shifts focus]</em> <a class="eventtype" href="#event-type-focusout"><code>focusout</code></a> (before first target element loses focus)</li>
						<li><a class="eventtype" href="#event-type-focusIn"><code>focusin</code></a> (before second target element receives focus)</li>
						<li><a class="eventtype" href="#event-type-blur"><code>blur</code></a> (after first target element loses focus)</li>
						<li><a class="eventtype" href="#event-type-DOMFocusOut"><code>DOMFocusOut</code></a> (if supported)</li>
						<li><a class="eventtype" href="#event-type-focus"><code>focus</code></a> (after second target element receives focus)</li>
						<li><a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code></a> (if supported)</li>
					</ol>

					<p class="note"><strong>Note:</strong>  This specification does not define the behavior of focus events when interacting with methods such as <code>focus()</code> or
						<code>blur()</code>; see the relevant specifications where those methods are defined for such behavior.</p>
				</div>

				<h4><a id="events-focusevent-doc-focus" href="#events-focusevent-doc-focus">5.2.2.2 Document Focus and Focus Context</a></h4>
				<div>
					<p>This event module includes event types for notification of changes in document <a class="def" href="#glossary-event-focus">focus</a>.  Depending on the environment,
						document focus <span class="may">may</span> be distinct from <a class="def" href="#glossary-user-agent">user agent</a> focus and operating system focus; this is referred to as focus context.
						For example, in a typical desktop browser environment, the operating system context focus might be on one of many different applications, one of which is the browser;
						when the browser has focus, the user can shift the application context focus (such as with the tab key) among different browser user interface fields (e.g., the
						Web site location bar, a search field, etc.) before or after achieving document focus; once the document itself has focus, sequential shifting of focus will step
						through the focusable elements in the document.  The event types defined in this specification deal exclusively with document focus, and the <a class="def" href="#glossary-event-target">
						event target</a> identified in the event details <span class="must">must</span> only be part of the document or documents in the window, never a part of the browser or operating system,
						even when switching from one focus context to another.</p>

					<p>Normally, a document always has a focused element, even if it is the document element itself, and a persistent <a class="def" href="#glossary-event-focus-ring">focus
						ring</a>; when switching between focus contexts, the document's currently focused element and focus ring normally remain in their current state; for example,
						if a document has three focusable elements, with the second element focused, when a user changes operating system focus to another application and then back to
						the browser, the second element will still be focused within the document, and tabbing will change the focus to the third element.  A <a class="def" href="#glossary-host-language">
						host language</a> <span class="may">may</span> define specific elements which might receive focus, the conditions under which an element <span class="may">may</span> receive focus, the means by which
						focus <span class="may">may</span> be changed, and the order in which the focus changes.  For example, in some cases an element might be given focus by moving a pointer over it, while other
						circumstances might require a mouse click; some elements might not be focusable at all, and some might be focusable only by special means (clicking on the element),
						but not by tabbing to it.  Documents <span class="may">may</span> contain multiple focus rings.  Other specifications <span class="may">may</span> define a more complex focus model than is described in this specification,
						including allowing multiple elements to have the current focus.</p>
				</div>

				<p>The Focus event types are listed below.</p>

				<!-- blur -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-blur"><dfn><a class="eventtype" href="#event-type-blur"><code>blur</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>blur</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> losing
												focus</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>

											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> loses
								focus. The focus <span class="must">must</span> be taken from the element before the dispatch of this event type.  This event type is similar to <a class="eventtype" href="#event-type-focusout">
								<code>focusout</code></a>, but is dispatched after focus is shifted, and does not bubble.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMFocusIn -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMFocusIn"><dfn><a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMFocusIn</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> receiving
												focus</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>

											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> receives
								focus. The focus <span class="must">must</span> be given to the element before the dispatch of this event type. This event type <span class="must">must</span> be dispatched after the event type <a class="eventtype"
								href="#event-type-focus"><code>focus</code></a>.</p>

							<p class="warning" id="_7"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMFocusIn"><code>DOMFocusIn</code></a> event type is defined in this
								specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type in favor
								of the related event types <a class="eventtype" href="#event-type-focus"><code>focus</code></a> and <a class="eventtype" href="#event-type-focusIn"><code>focusin</code></a>.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMFocusOut -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMFocusOut"><dfn><a class="eventtype" href="#event-type-DOMFocusOut"><code>DOMFocusOut</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMFocusOut</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> losing
												focus</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> loses
								focus. The focus <span class="must">must</span> be taken from the element before the dispatch of this event type. This event type <span class="must">must</span> be dispatched after the event type <a class="eventtype"
								href="#event-type-blur"><code>blur</code></a>.</p>

							<p class="warning" id="_8"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMFocusOut"><code>DOMFocusOut</code></a> event type is defined in
								this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type in
								favor of the related event types <a class="eventtype" href="#event-type-blur"><code>blur</code></a> and <a class="eventtype" href="#event-type-focusout"><code>focusout</code></a>.</p>
						</dd>
					</dl>
				</div>

				<!-- focus -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-focus"><dfn><a class="eventtype" href="#event-type-focus"><code>focus</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>focus</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> receiving
												focus</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>

											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> receives
								focus. The focus <span class="must">must</span> be given to the element before the dispatch of this event type.  This event type is similar to <a class="eventtype" href="#event-type-focusIn">
								<code>focusin</code></a>, but is dispatched after focus is shifted, and does not bubble.</p>
						</dd>
					</dl>
				</div>

				<!-- focusin -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-focusIn"><dfn><a class="eventtype" href="#event-type-focusIn"><code>focusin</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>focusin</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> receiving
												focus</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>

											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <a class="def" href="#glossary-event-target">event
												target</a> losing focus  (if any).</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> is about
								to receive focus. This event type <span class="must">must</span> be dispatched before the element is given focus.  The <a class="def" href="#glossary-event-target">event target</a> <span class="must">must</span>
								be the element which is about to receive focus.  This event type is similar to <a class="eventtype" href="#event-type-focus"><code>focus</code></a>, but is dispatched
								before focus is shifted, and does bubble.</p>

							<p class="note" id="_9"><strong>Note:</strong> When using this event type, the content author can use the event's <code class="attribute-name"><a href="#events-FocusEvent-relatedTarget">
								FocusEvent.relatedTarget</a></code> attribute (or a host-language-specific method or means) to get the currently focused element before the focus shifts to the
								next focus <a class="def" href="#glossary-event-target">event target</a>, thus having access to both the element losing focus and the element gaining focus
								without the use of the <a class="eventtype" href="#event-type-blur"><code>blur</code></a> or <a class="eventtype" href="#event-type-focusout">focusout</a> event
								types.</p>
						</dd>
					</dl>
				</div>

				<!-- focusout -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-focusout"><dfn><a class="eventtype" href="#event-type-focusout"><code>focusout</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>focusout</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-FocusEvent"><code>FocusEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-event-target">event target</a> losing
												focus</li>

											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a>,
												<code>null</code></li>

											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>

											<li><a href="#events-FocusEvent-relatedTarget"><code class="attribute-name">FocusEvent.relatedTarget</code></a>: <a class="def" href="#glossary-event-target">event
												target</a> receiving focus.</li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when an <a class="def" href="#glossary-event-target">event target</a> is about
								to lose focus. This event type <span class="must">must</span> be dispatched before the element loses focus.  The <a class="def" href="#glossary-event-target">event target</a> <span class="must">must</span> be the
								element which is about to lose focus.  This event type is similar to <a class="eventtype" href="#event-type-blur"><code>blur</code></a>, but is dispatched before
								focus is shifted, and does bubble.</p>
						</dd>
					</dl>
				</div>
			</div>

			<h3><a id="events-mouseevents" href="#events-mouseevents">5.2.3 Mouse Event Types</a></h3>
			<div>

				<p>The mouse event module originates from the [<cite><a class="informative" href="#references-HTML40">HTML 4.01</a></cite>] <code>onclick</code>, <code>ondblclick</code>,
					<code>onmousedown</code>, <code>onmouseup</code>, <code>onmouseover</code>, <code>onmousemove</code>, and <code>onmouseout</code> attributes. This event module
					is specifically designed for use with pointing input devices, such as a mouse or a trackball.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-MouseEvent">MouseEvent</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
					<dd>
						<p>The <code>MouseEvent</code> interface provides specific contextual information associated with Mouse events.</p>

						<p>In the case of nested elements, mouse events are always targeted at the most deeply nested element.</p>

						<p class="note"><strong>Note:</strong> Ancestors of the targeted element can use event bubbling to obtain notifications of mouse events which occur within their descendent
							elements.</p>

						<p>To create an instance of the <code>MouseEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("MouseEvent")</code></a>
							method call.</p>

						<p class="note"><strong>Note:</strong> When initializing <code>MouseEvent</code> objects using <code>initMouseEvent</code>, implementations can use the client
							coordinates <code>clientX</code> and <code>clientY</code> for calculation of other coordinates (such as target coordinates exposed by <a class="def" href="#glossary-DOM-Level-0">
							DOM Level 0</a> implementations or other proprietary attributes, e.g., <code>pageX</code>).</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-MouseEvent"><code>
<span class="comment">// Modified in DOM Level 3:</span>
interface <a href="#events-MouseEvent">MouseEvent</a> : <a href="#events-UIEvent">UIEvent</a> {
  readonly attribute long           <a href="#events-MouseEvent-screenX">screenX</a>;
  readonly attribute long           <a href="#events-MouseEvent-screenY">screenY</a>;
  readonly attribute long           <a href="#events-MouseEvent-clientX">clientX</a>;
  readonly attribute long           <a href="#events-MouseEvent-clientY">clientY</a>;
  readonly attribute boolean        <a href="#events-MouseEvent-ctrlKey">ctrlKey</a>;
  readonly attribute boolean        <a href="#events-MouseEvent-shiftKey">shiftKey</a>;
  readonly attribute boolean        <a href="#events-MouseEvent-altKey">altKey</a>;
  readonly attribute boolean        <a href="#events-MouseEvent-metaKey">metaKey</a>;
  readonly attribute unsigned short <a href="#events-MouseEvent-button">button</a>;
  readonly attribute unsigned short <a href="#events-MouseEvent-buttons">buttons</a>;
  readonly attribute <a href="#events-EventTarget">EventTarget</a>?   <a href="#events-MouseEvent-relatedTarget">relatedTarget</a>;
  <span class="comment">// Deprecated in DOM Level 3:</span>
  void                              <a href="#events-event-type-initMouseEvent">initMouseEvent</a>(DOMString typeArg,
                                                   boolean canBubbleArg,
                                                   boolean cancelableArg,
                                                   AbstractView? viewArg,
                                                   long detailArg,
                                                   long screenXArg,
                                                   long screenYArg,
                                                   long clientXArg,
                                                   long clientYArg,
                                                   boolean ctrlKeyArg,
                                                   boolean altKeyArg,
                                                   boolean shiftKeyArg,
                                                   boolean metaKeyArg,
                                                   unsigned short buttonArg,
                                                   <a href="#events-EventTarget">EventTarget</a>? relatedTargetArg);
  <span class="comment">// Introduced in DOM Level 3:</span>
  boolean                           <a href="#events-MouseEvent-getModifierState">getModifierState</a>(DOMString keyArg);
};
</code></pre>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-MouseEvent-altKey">altKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd><p>Refer to the <a href="#events-KeyboardEvent-altKey"><code>KeyboardEvent.altKey</code></a> attribute.</p></dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-button">button</a></code> of type <code>unsigned short</code>, readonly</dt>
									<dd>During mouse events caused by the depression or release of a mouse button, <code>button</code> <span class="must">must</span> be used to indicate which pointer device button changed state.
										<p>The value of the <a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> attribute <span class="must">must</span> be as follows:</p>

										<ul>
											<li><code>0</code> <span class="must">must</span> indicate the primary button of the device (in general, the left button  or the only button on single-button devices, used to activate a user
												interface control or select text) or the un-initialized value.</li>
											<li><code>1</code> <span class="must">must</span> indicate the auxiliary button (in general, the middle button, often combined with a mouse wheel).</li>
											<li><code>2</code> <span class="must">must</span> indicate the secondary button (in general, the right button, often used to display a context menu).</li>
										</ul>

										<p>Some pointing devices provide or simulate more buttons, and values higher than <code>2</code> <span class="may">may</span> be used to represent such buttons.</p>

										<p class="note"><strong>Note:</strong> The value of <code>button</code> is not updated for events not caused by the depression/release of a mouse button. In these
											scenarios, take care not to interpret the value <code>0</code> as the left button, but rather as the <a class="def" href="#glossary-un-initialized-value">un-initialized
											value</a></p>

										<p class="note"><strong>Authoring Note:</strong> Some <a class="def" href="#glossary-default-action">default actions</a> related to events such as
											<a class="eventtype"><code>mousedown</code></a> and <a class="eventtype"><code>mouseup</code></a> depend on the specific mouse button in use.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-buttons">buttons</a></code> of type <code>unsigned short</code>, readonly</dt>
									<dd>
										<p>During any mouse events, <code>buttons</code> <span class="must">must</span> be used to indicate which combination of mouse buttons are
											currently being pressed, expressed as a bitmask.</p>

										<p class="note"><strong>Note:</strong> Though similarly named, the values for the <code>buttons</code> attribute and the <a href="#events-MouseEvent-button"><code>button</code></a>
											attribute are very different. The value of <code>button</code> is assumed to be valid during <a class="eventtype"><code>mousedown</code></a>/
											<a class="eventtype"><code>mouseup</code></a> event handlers, whereas the <code>buttons</code> attribute reflects the state of the mouse's buttons for any
											trusted <code>MouseEvent</code> object (while it is being dispatched), because it can represent the "no button currently active" state (0).</p>

										<p>The value of the <a href="#events-MouseEvent-buttons"><code>MouseEvent.buttons</code></a> attribute <span class="must">must</span> be as follows:</p>

										<ul>
											<li><code>0</code> <span class="must">must</span> indicates no button is currently active.</li>
											<li><code>1</code> <span class="must">must</span> indicate the primary button of the device (in general, the left button or the only button on single-button devices, used to activate a user
												interface control or select text).</li>
											<li><code>2</code> <span class="must">must</span> indicate the secondary button (in general, the right button, often used to display a context menu), if present.</li>
											<li><code>4</code> <span class="must">must</span> indicate the auxiliary button (in general, the middle button, often combined with a mouse wheel).</li>
										</ul>

										<p>Some pointing devices provide or simulate more buttons.  To represent such buttons, the value <span class="must">must</span> be doubled for each successive button (in the binary series <code>
											8</code>, <code>16</code>, <code>32</code>, ... ).</p>

										<p class="note" id="buttons-mask"><strong>Note:</strong> Because the sum of any set of button values is a unique number, a content author can use a bitwise operation
											to determine how many buttons are currently being pressed and which buttons they are, for an arbitrary number of mouse buttons on a device, e.g., the value <code>3</code>
											indicates that the left and right button are currently both pressed, while the value <code>5</code> indicates that the left and middle button are currently both
											pressed.</p>

										<p class="note"><strong>Authoring Note: </strong>Some <a class="def" href="#glossary-default-action">default actions</a> related to events such as
											<a class="eventtype"><code>mousedown</code></a> and <a class="eventtype"><code>mouseup</code></a> depend on the specific mouse button in use.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-clientX">clientX</a></code> of type <code>long</code>, readonly</dt>
									<dd>
										<p>The horizontal coordinate at which the event occurred relative to the viewport associated with the event.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-clientY">clientY</a></code> of type <code>long</code>, readonly</dt>
									<dd>
										<p>The vertical coordinate at which the event occurred relative to the viewport associated with the event.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-ctrlKey">ctrlKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p>Refer to the <a href="#events-KeyboardEvent-ctrlKey"><code>KeyboardEvent.ctrlKey</code></a> attribute.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-metaKey">metaKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p>Refer to the <a href="#events-KeyboardEvent-metaKey"><code>KeyboardEvent.metaKey</code></a> attribute.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-relatedTarget">relatedTarget</a></code> of type <a href="#events-EventTarget"><code>EventTarget</code></a>,
										readonly</dt>
									<dd>
										<p>Used to identify a secondary <a href="#events-EventTarget"><code>EventTarget</code></a> related to a UI event, depending on the type of event.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-screenX">screenX</a></code> of type <code>long</code>, readonly</dt>
									<dd>
										<p>The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-screenY">screenY</a></code> of type <code>long</code>, readonly</dt>
									<dd>
										<p>The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MouseEvent-shiftKey">shiftKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p>Refer to the <a href="#events-KeyboardEvent-shiftKey"><code>KeyboardEvent.shiftKey</code></a> attribute.</p>
									</dd>
								</dl>
							</dd>

							<dt><strong>Methods</strong></dt>
							<dd>
								<dl>
									<dt><code class="method-name"><a id="events-MouseEvent-getModifierState">getModifierState</a></code> introduced in <strong class="since">DOM Level 3</strong></dt>
									<dd>
										<div class="method">
											<p>Queries the state of a modifier using a key value. See also <a href="#keys-Modifiers">Modifier keys</a>.</p>

											<div class="parameters">
												<p><strong>Parameters</strong></p>

												<div class="paramtable">
													<dl>
														<dt><code class="parameter-name">keyArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Refer to the <a href="#events-KeyboardEvent-getModifierState"><code>KeyboardEvent.getModifierState()</code></a> method for a description of this parameter.</p>
														</dd>
													</dl>
												</div>
											</div>
											<div class="return">
												<p><strong>Return Value</strong></p>

												<div class="returntable">
													<table summary="Layout table: the first cell contains the type of the return value, the second contains a short description" border="0">
														<tr>
															<td><code>boolean</code></td>
															<td><code>true</code> if it is a modifier key and the modifier is activated, <code>false</code> otherwise.</td>
														</tr>
													</table>
												</div>
											</div>
											<div><strong>No Exceptions</strong></div>
										</div>
									</dd>

									<dt><code class="method-name"><a id="events-event-type-initMouseEvent">initMouseEvent</a></code></dt>
									<dd>
										<div class="method">
											<p>Initializes attributes of a <code>MouseEvent</code> object. This method has the same behavior as <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a>.</p>

											<p class="warning"><strong>Warning!</strong> The <code>initMouseEvent</code> method is deprecated, but supported for backwards-compatibility with widely-deployed
												implementations. See <a href="#new-event-interface-initializers">Appendix A</a> for a suggested (informative-only) alternate initializer syntax.</p>

											<div class="parameters">
												<p><strong>Parameters</strong></p>

												<div class="paramtable">
													<dl>
														<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">detailArg</code> of type <code>long</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">screenXArg</code> of type <code>long</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-screenX"><code>MouseEvent.screenX</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">screenYArg</code> of type <code>long</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-screenY"><code>MouseEvent.screenY</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">clientXArg</code> of type <code>long</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-clientX"><code>MouseEvent.clientX</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">clientYArg</code> of type <code>long</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-clientY"><code>MouseEvent.clientY</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">ctrlKeyArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-ctrlKey"><code>MouseEvent.ctrlKey</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">altKeyArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-altKey"><code>MouseEvent.altKey</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">shiftKeyArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-shiftKey"><code>MouseEvent.shiftKey</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">metaKeyArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-metaKey"><code>MouseEvent.metaKey</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">buttonArg</code> of type <code>unsigned short</code></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">relatedTargetArg</code> of type <a href="#events-EventTarget"><code>EventTarget</code></a></dt>
														<dd>
															<p>Specifies <a href="#events-MouseEvent-relatedTarget"><code>MouseEvent.relatedTarget</code></a>. This value <span class="may">may</span> be <code>null</code>.</p>
														</dd>
													</dl>
												</div>
											</div>
											<div><strong>No Return Value</strong></div>

											<div><strong>No Exceptions</strong></div>
										</div>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<p id="current-click-count">Implementations <span class="must">must</span> maintain the <em>current click count</em> when generating mouse events. This <span class="must">must</span> be a non-negative integer indicating
					the number of consecutive clicks of a pointing device button within a specific time. The delay after which the count resets is specific to the
					environment configuration.</p>

				<h4><a id="events-mouseevent-event-order" href="#events-mouseevent-event-order">5.2.3.2 Mouse Event Order</a></h4>
				<div>
					<p>Certain mouse events defined in this specification occur in a set order relative to one another.  The following is the typical sequence of events when a pointing
						device's cursor is moved over an element:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a><br/>
						(Pointing device is moved into an element...)</li>
						<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a></li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a></li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (multiple events)<br/>
						(Pointing device is moved out of the element...)</li>
						<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a></li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a></li>
					</ol>

					<p>When a pointing device is moved into an element <em>A</em>, and then into a nested element <em>B</em> and then back out again, the following is the typical
						sequence of events:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a><br/>
						(Pointing device is moved into element A...)</li>
						<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (multiple events in element <em>A</em>)<br/>
						(Pointing device is moved into nested element B...)</li>
						<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (multiple events in element <em>B</em>)<br/>
						(Pointing device is moved from element B into A...)</li>
						<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (multiple events in element <em>A</em>)<br/>
						(Pointing device is moved out of element A...)</li>
						<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a> (element <em>A</em>)</li>
					</ol>

					<p>Sometimes elements can be visually overlapped using CSS. In the following example, three elements labeled A, B, and C all have the same dimensions and
						absolute position on a web page. Element C is a child of B, and B is a child of A in the DOM:</p>

					<div class="figure" style="text-align: center">
						<img src="images/stacked-event-mouse-dispatch.png" alt="graphical representation of three stacked elements all on top of each other. The bottom element is labeled A and the top element is C" title="graphical representation of elements stacked on top of each other" />
						<p style="text-align: left"><em>Figure 3: graphical representation of three stacked elements all on top of each other, with the pointing device moving over the stack.</em></p>
					</div>

					<p>When the pointing device is moved from outside the element stack to the element labeled C and then moved out again, the following series of events occur:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a><br/>
						(Pointing device is moved into element C; the topmost element in the stack)</li>
						<li><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> (element <em>C</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a> (element <em>A</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a> (element <em>C</em>)</li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (multiple events in element <em>C</em>)<br/>
						(Pointing device is moved out of element C...)</li>
						<li><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> (element <em>C</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a> (element <em>C</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a> (element <em>B</em>)</li>
						<li><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a> (element <em>A</em>)</li>
					</ol>

					<p class="note"><strong>Note:</strong> that <code>mouseover</code>/<code>mouseout</code> are only fired once, while <code>mouseenter</code>/<code>mouseleave</code>
						events are fired three times.</p>

					<p>The following is the typical sequence of events when a button associated with a pointing device (e.g., a mouse button or trackpad) is pressed and released over
						an element:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a></li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (<span class="optional">optional</span>, multiple events, some limits)</li>
						<li><a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a></li>
						<li><a class="eventtype" href="#event-type-click"><code>click</code></a></li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (<span class="optional">optional</span>, multiple events, some limits)</li>
						<li><a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a></li>
						<li><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a> (<span class="optional">optional</span>, multiple events, some limits)</li>
						<li><a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a></li>
						<li><a class="eventtype" href="#event-type-click"><code>click</code></a></li>
						<li><a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a></li>
					</ol>

					<p class="note"><strong>Note: </strong>The lag time, degree, distance, and number of <a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a>
						events allowed between the <a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a> and <a class="eventtype" href="#event-type-mouseup">
						<code>mouseup</code></a> events while still firing a <a class="eventtype" href="#event-type-click"><code>click</code></a> or <a class="eventtype"
						href="#event-type-dblclick"><code>dblclick</code></a> event will be implementation-, device-, and platform-specific. This tolerance can aid users that have physical
						disabilities like unsteady hands when these users interact with a pointing device.</p>

					<p>Each implementation will determine the appropriate hysteresis tolerance, but in general <span class="should">should</span> fire <a class="eventtype" href="#event-type-click"><code>click</code></a>
						and <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a> events when the event target of the associated <a class="eventtype"
						href="#event-type-mousedown"><code>mousedown</code></a> and <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> events is the same element with no
						<a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> or <a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a>
						events intervening, and <span class="should">should</span> fire <a class="eventtype" href="#event-type-click"><code>click</code></a> and <a class="eventtype" href="#event-type-dblclick">
						<code>dblclick</code></a> events on the nearest common ancestor when the event targets of the associated <a class="eventtype" href="#event-type-mousedown">
						<code>mousedown</code></a> and <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> events are different.</p>

					<p>If the <a class="def" href="#glossary-event-target">event target</a> (e.g. the target element) is removed from the DOM during the mouse events sequence, the remaining
						events of the sequence <span class="mustnot">must not</span> be fired on that element.</p>

					<p class="example"><strong>Example:</strong> if the target element is removed from the DOM as the result of a <a class="eventtype" href="#event-type-mousedown">
						<code>mousedown</code></a> event, no events for that element will be dispatched for <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>,
						<a class="eventtype" href="#event-type-click"><code>click</code></a>, or <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a>, nor any default
						activation events; however, the <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> event will still be dispatched on the element that is exposed
						to the mouse after the removal of the initial target element. Similarly,  if the target element is removed from the DOM during the dispatch of a <a class="eventtype"
						href="#event-type-mouseup"><code>mouseup</code></a> event, the <a class="eventtype" href="#event-type-click"><code>click</code></a> and subsequent events will
						not be dispatched.</p>

				</div>

				<p>The Mouse event types are listed below. In the case of nested elements, mouse event types are always targeted at the most deeply nested element. Ancestors of the
					targeted element <span class="may">may</span> use bubbling to obtain notification of mouse events which occur within its descendent elements.</p>

				<!-- click -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-click"><dfn><a class="eventtype" href="#event-type-click"><code>click</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>click</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Varies</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: indicates the <a href="#current-click-count">current click count</a>;
												the attribute value <span class="must">must</span> be <code>1</code> when the user begins this action and increments by <code>1</code> for each click.</li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: value based on current button pressed</li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>The <a class="eventtype" href="#event-type-click"><code>click</code></a> event type <span class="must">must</span> be dispatched on the <a class="def" href="#glossary-topmost-event-target">
								topmost event target</a> indicated by the pointer, when the user presses down and releases the pointer button, or otherwise activates the pointer in a manner that
								simulates such an action.  The actuation method of the mouse button depends upon the pointer device and the environment configuration, e.g., it <span class="may">may</span> depend on
								the screen location or the delay between the press and release of the pointing device button.</p>

							<p>The <a class="eventtype" href="#event-type-click"><code>click</code></a> event <span class="may">may</span> be preceded by the <a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a>
								and <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> events on the same element, disregarding changes between other node types (e.g., text
								nodes).  Depending upon the environment configuration, the <a class="eventtype" href="#event-type-click"><code>click</code></a> event <span class="may">may</span> be dispatched if one or
								more of the event types <a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a>, <a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a>,
								and <a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> occur between the press and release of the pointing device button.  The <a class="eventtype"
								href="#event-type-click"><code>click</code></a> event <span class="may">may</span> also be followed by the <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a>
								event.</p>

							<p class="example"><strong>Example:</strong> If a user mouses down on a text node child of a &lt;p&gt; element which has been styled with
								a large line-height, shifts the mouse slightly such that it is no longer over an area containing text but is still within the containing block of that &lt;p&gt;
								element (i.e., the pointer is between lines of the same text block, but not over the text node per se), then subsequently mouses up, this will likely still trigger
								a <a class="eventtype" href="#event-type-click"><code>click</code></a> event (if it falls within the normal temporal hysteresis for a <a class="eventtype" href="#event-type-click">
								<code>click</code></a>), since the user has stayed within the scope of the same element; user-agent-generated mouse events are not dispatched on text nodes.
							</p>

							<p>In addition to being associated with pointer devices, the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type <span class="must">must</span> be dispatched as
								part of an element activation, as described in <a href="#event-flow-activation">Activation triggers and behavior</a>.</p>

							<p class="note"><strong>Note:</strong> For maximum accessibility, content authors are encouraged to use the <a class="eventtype" href="#event-type-click">
								<code>click</code></a> event type when defining activation behavior for custom controls, rather than other pointing-device event types such as <a class="eventtype"
								href="#event-type-mousedown"><code>mousedown</code></a> or <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>, which are more device-specific.
								Though the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type has its origins in pointer devices (e.g., a mouse), subsequent implementation
								enhancements have extended it beyond that association, and it can be considered a device-independent event type for element activation.</p>

							<p>The <a class="def" href="#glossary-default-action">default action</a> of the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type varies
								based on the <a class="def" href="#glossary-event-target">event target</a> of the event and the value of the <a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a>
								or <a href="#events-MouseEvent-buttons"><code>MouseEvent.buttons</code></a> attributes.  Typical <a class="def" href="#glossary-default-action">default actions</a>
								of the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type are as follows:</p>

							<ul>
								<li><em>Left click</em> (<a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> value is <code>0</code>, <a href="#events-MouseEvent-buttons"><code>
									MouseEvent.buttons</code></a> value is <code>1</code>):
									<ul>
										<li>If the <a class="def" href="#glossary-event-target">event target</a> has associated activation behavior, the <a class="def" href="#glossary-default-action">default
											action</a> <span class="must">must</span> be to execute that activation behavior (see <a href="#event-flow-activation">Activation triggers and behavior</a>).</li>

										<li>If the <a class="def" href="#glossary-event-target">event target</a> is focusable, the <a class="def" href="#glossary-default-action">default action</a> <span class="must">must</span> be
											to give that element document focus.</li>
									</ul>
								</li>
								<li><em>Right click</em> (<a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> value is <code>1</code>, <a href="#events-MouseEvent-buttons"><code>
									MouseEvent.buttons</code></a> value is <code>2</code>):
									<ul>
										<li>The <a class="def" href="#glossary-default-action">default action</a> <span class="must">must</span> be to provide a context menu of options related to that <a class="def" href="#glossary-event-target">
											event target</a>.</li>
									</ul>
								</li>
								<li><em>Middle click</em> (<a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> value is <code>2</code>, <a href="#events-MouseEvent-buttons"><code>
									MouseEvent.buttons</code></a> value is <code>4</code>):
									<ul>
										<li>If the <a class="def" href="#glossary-event-target">event target</a> has associated activation behavior, the <a class="def" href="#glossary-default-action">default
											action</a> <span class="must">must</span> be to execute that activation behavior in an alternate fashion (such as opening a link in a new tab or window).</li>

										<li>If the <a class="def" href="#glossary-event-target">event target</a> has no associated activation behavior, a user agent <span class="may">may</span> assign a custom <a class="def" href="#glossary-default-action">
											default action</a> such as an alternate scrolling or panning mode.</li>
									</ul>
								</li>
							</ul>
						</dd>
					</dl>
				</div>

				<!-- dblclick -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-dblclick"><dfn><a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>dblclick</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: indicates the <a href="#current-click-count">current click count</a></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: value based on current button pressed</li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device button is clicked twice over an element. The definition
								of a double click depends on the environment configuration, except that the event target <span class="must">must</span> be the same between <a class="eventtype" href="#event-type-mousedown">
								<code>mousedown</code></a>, <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a>, and <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a>.
								This event type <span class="must">must</span> be dispatched after the event type <a class="eventtype" href="#event-type-click"><code>click</code></a> if a click and double click occur simultaneously,
								and after the event type <a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a> otherwise.</p>

							<p class="note"><strong>Note:</strong> Canceling the <a class="eventtype" href="#event-type-click"><code>click</code></a> event does not affect the firing
								of a <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a> event.</p>

							<p>As with the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type, the <a class="def" href="#glossary-default-action">default action</a>
								of the <a class="eventtype" href="#event-type-dblclick"><code>dblclick</code></a> event type varies based on the <a class="def" href="#glossary-event-target">event
								target</a> of the event and the value of the <a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> or <a href="#events-MouseEvent-buttons"><code>MouseEvent.buttons</code></a>
								attributes.  Normally, the typical <a class="def" href="#glossary-default-action">default actions</a> of the <a class="eventtype" href="#event-type-dblclick"><code>
								dblclick</code></a> event type match those of the <a class="eventtype" href="#event-type-click"><code>click</code></a> event type, with the following additional
								behavior:</p>

							<ul>
								<li><em>Left click</em> (<a href="#events-MouseEvent-button"><code>MouseEvent.button</code></a> value is <code>0</code>, <a href="#events-MouseEvent-buttons"><code>
									MouseEvent.buttons</code></a> value is <code>1</code>):
									<ul>
										<li>If the <a class="def" href="#glossary-event-target">event target</a> is selectable, the <a class="def" href="#glossary-default-action">default action</a> <span class="must">must</span>
											be to select part or all of the selectable content; subsequent clicks <span class="may">may</span> select additional selectable portions of that content.</li>
									</ul>
								</li>
							</ul>
						</dd>
					</dl>
				</div>

				<!-- mousedown -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mousedown"><dfn><a class="eventtype" href="#event-type-mousedown"><code>mousedown</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mousedown</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Varies: Start a drag/drop operation; start a text selection; start a scroll/pan interaction (in combination with the middle mouse button, if supported)</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: indicates the <a href="#current-click-count">current click count</a> incremented
												by one. For example, if no click happened before the <a class="eventtype"><code>mousedown</code></a>, <a href="#events-UIEvent-detail"><code>UIEvent.detail</code></a> will
												contain the value <code>1</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: value based on current button pressed</li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device button is pressed over an element.</p>

							<p class="note"><strong>Note: </strong>Many implementations use the <a class="eventtype"><code>mousedown</code></a> event to begin a variety of contextually dependent <a class="def"
								href="#glossary-default-action">default actions</a>. These default actions can be prevented if this event is canceled. Some of these default actions could include: beginning
								a drag/drop interaction with an image or link; starting text selection; etc. Additionally, some implementations provide a mouse-driven panning feature that is activated when
								the middle mouse button is pressed at the time the <a class="eventtype"><code>mousedown</code></a> event is dispatched.</p>

						</dd>
					</dl>
				</div>

				<!-- mouseenter -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mouseenter"><dfn><a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mouseenter</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: indicates the <a class="def" href="#glossary-event-target">
												event target</a> a pointing device is exiting, if any.</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device is moved onto the boundaries of an element or one of
								its descendent elements.  This event type is similar to <a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a>, but differs in that it does
								not bubble, and <span class="mustnot">must not</span> be dispatched when the pointer device moves from an element onto the boundaries of one of its descendent elements.</p>

							<p class="note"><strong>Note:</strong> There are similarities between this event type and the CSS <a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
								title="Selectors"><code>:hover</code> pseudo-class</a> <a href="#references-CSS2">[CSS2.1]</a>.  See also the <a class="eventtype" href="#event-type-mouseleave"><code>
								mouseleave</code></a> event type.</p>

						</dd>
					</dl>
				</div>

				<!-- mouseleave -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mouseleave"><dfn><a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mouseleave</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: indicates the <a class="def" href="#glossary-event-target">
												event target</a> a pointing device is entering, if any.</li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device is moved off of the boundaries of an element and all
								of its descendent elements.  This event type is similar to <a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a>, but differs in that does
								not bubble, and that it <span class="mustnot">must not</span> be dispatched until the pointing device has left the boundaries of the element and the boundaries of all of its children.</p>

							<p class="note"><strong>Note:</strong> There are similarities between this event type and the CSS <a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
								title="Selectors"><code>:hover</code> pseudo-class</a> <a href="#references-CSS2">[CSS2.1]</a>.  See also the <a class="eventtype" href="#event-type-mouseenter"><code>
								mouseenter</code></a> event type.</p>
						</dd>
					</dl>
				</div>

				<!-- mousemove -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mousemove"><dfn><a class="eventtype" href="#event-type-mousemove"><code>mousemove</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mousemove</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device is moved while it is over an element.  The frequency
								rate of events while the pointing device is moved is implementation-, device-, and platform-specific, but multiple consecutive <a class="eventtype" href="#event-type-mousemove">
								<code>mousemove</code></a> events <span class="should">should</span> be fired for sustained pointer-device movement, rather than a single event for each instance of mouse movement.  Implementations
								are encouraged to determine the optimal frequency rate to balance responsiveness with performance.</p>

							<p class="note"><strong>Authoring Note: </strong>In some implementation environments, such as a browser, <a class="eventtype"><code>mousemove</code></a> events can continue
								to fire if the user began a drag operation (e.g., a mouse button is pressed) and the pointing device has left the boundary of the user agent.</p>

						</dd>
					</dl>
				</div>

				<!-- mouseout -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mouseout"><dfn><a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mouseout</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>:  indicates the <a class="def" href="#glossary-event-target">
												event target</a> a pointing device is entering, if any.</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device is moved off of the boundaries of an element.  This
								event type is similar to <a class="eventtype" href="#event-type-mouseleave"><code>mouseleave</code></a>, but differs in that does bubble, and that it <span class="must">must</span> be dispatched
								when the pointer device moves from an element onto the boundaries of one of its descendent elements.</p>

							<p class="note"><strong>Note:</strong> See also the <a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a> event type.</p>
						</dd>
					</dl>
				</div>

				<!-- mouseover -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mouseover"><dfn><a class="eventtype" href="#event-type-mouseover"><code>mouseover</code></a></dfn></dt>
						<dd>
							<table summary="This table contains information about the semantics of the given event type" border="0" cellpadding="2" cellspacing="0">
								<tbody>
									<tr>
										<th>Type</th>
										<td><strong><code>mouseover</code></strong></td>
									</tr>
									<tr>
										<th>Interface</th>
										<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
									</tr>
									<tr>
										<th>Sync / Async</th>
										<td>Sync</td>
									</tr>
									<tr>
										<th>Bubbles</th>
										<td>Yes</td>
									</tr>
									<tr>
										<th>Target</th>
										<td><code>Element</code></td>
									</tr>
									<tr>
										<th>Cancelable</th>
										<td>Yes</td>
									</tr>
									<tr>
										<th>Default action</th>
										<td>none</td>
									</tr>
									<tr>
										<th>Context info</th>
										<td>
											<ul>
												<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
												<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
												<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
												<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
												<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
												<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
												<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
												<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
													modifier was active, otherwise <code>false</code></li>
												<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
													'Control'</code></a> modifier was active, otherwise <code>false</code></li>
												<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
													'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
												<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
													'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
												<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: <code>0</code></li>
												<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
													no buttons pressed</li>
												<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>:  indicates the <a class="def" href="#glossary-event-target">
													event target</a> a pointing device is exiting, if any.</li>
											</ul>
										</td>
									</tr>
								</tbody>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device is moved onto the boundaries of an element.  This event
								type is similar to <a class="eventtype" href="#event-type-mouseenter"><code>mouseenter</code></a>, but differs in that it bubbles, and that it <span class="must">must</span> be dispatched
								when the pointer device moves onto the boundaries of an element whose ancestor element is the <a class="def" href="#glossary-event-target">event target</a> for
								the same event listener instance.</p>

							<p class="note"><strong>Note:</strong> See also the <a class="eventtype" href="#event-type-mouseout"><code>mouseout</code></a> event type.</p>
						</dd>
					</dl>
				</div>

				<!-- mouseup -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-mouseup"><dfn><a class="eventtype" href="#event-type-mouseup"><code>mouseup</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>mouseup</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MouseEvent"><code>MouseEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Invoke a context menu (in combination with the right mouse button, if supported)</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: indicates the <a href="#current-click-count">current click count</a> incremented
												by one.</li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: value based on the pointer position on the screen</li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: value based on the pointer position within the viewport</li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: value based on current button pressed</li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: value based on all buttons current depressed, <code>0</code> if
												no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: <code>null</code></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a pointing device button is released over an element.</p>

							<p class="note"><strong>Note: </strong>Many implementations will invoke a context menu as the default action of this event if the right mouse button is being released.</p>

							<p class="note"><strong>Authoring Note: </strong>In some implementation environments, such as a browser, a <a class="eventtype"><code>mouseup</code></a> event
								can be dispatched even if the pointing device has left the boundary of the user agent, e.g., if the user began a drag operation with a mouse button pressed).</p>
						</dd>
					</dl>
				</div>
			</div>

			<h3><a id="events-wheelevents" href="#events-wheelevents">5.2.4 Wheel Event Types</a></h3>
			<div>
				<p>Wheels are devices that can be rotated in one or more spatial dimensions, and which can be associated with a pointer device. The coordinate system depends on the
					environment configuration.</p>

				<p class="example"><strong>Example:</strong> The user's environment might be configured to associate vertical scrolling with rotation along the y-axis, horizontal
					scrolling with rotation along the x-axis, and zooming with rotation along the z-axis.</p>

				<p>The deltaX, deltaY, and deltaZ attributes of <a href="#events-WheelEvent"><code>WheelEvent</code></a> objects indicate a measurement along their respective axes
					in units of pixels, lines, or pages. The reported measurements are provided after an environment-specific algorithm translates the actual rotation/movement of
					the wheel device into the appropriate values and units.</p>

				<p class="note"><strong>Authoring Note:</strong> A user's environment settings can be customized to interpret actual rotation/movement of a wheel device in different ways.
					One movement of a common <q>dented</q> mouse wheel can produce a measurement of 162 pixels (162 is just an example value, actual values can depend on the current screen
					dimensions of the user-agent). But a user can change their default environment settings to speed-up their mouse wheel, increasing this number. Furthermore, some
					mouse wheel software can support acceleration (the faster the wheel is rotated/moved, the greater the delta of each measurement) or even sub-pixel rotation measurements.
					Because of this, authors can not assume a given rotation amount in one user agent will produce the same delta value in all user agents.</p>

				<p>The sign (positive or negative) of the values of the deltaX, deltaY, and deltaZ attributes <span class="must">must</span> be consistent between multiple dispatches of the
					<a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event while the motion of the actual wheel device is rotating/moving in the same direction. If a user agent scrolls as the
					default action of the <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event then the sign of the delta <span class="should">should</span> be given by a right-hand coordinate system where positive X,
					Y, and Z axes are directed towards the right-most edge, bottom-most edge, and farthest depth (away from the user) of the document, respectively.</p>

				<p class="note"><strong>Note:</strong> Individual user agents can (depending on their environment and hardware configuration) interpret the same physical user interaction
					on the wheel differently. For example, a vertical swipe on the edge of a trackpad from top to bottom can be interpreted as a wheel action intended to either scroll the
					page down or to pan the page up (i.e., resulting in either a positive or negative deltaY value respectively).</p>

				<dl>
					<dt><strong>Interface <em><a id="events-WheelEvent">WheelEvent</a></em></strong> (introduced in <strong class="since">DOM Level 3</strong>)</dt>
					<dd>
						<p>The <code>WheelEvent</code> interface provides specific contextual information associated with <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> events.</p>

						<p>To create an instance of the <code>WheelEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("WheelEvent")</code></a>
							method call.</p>

						<p class="note"><strong>Authoring Note: </strong>See <a href="#new-event-interface-initializers">Appendix A</a> for information about programmatically initializing
							WheelEvent objects.</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-WheelEvent"><code>
<span class="comment">// Introduced in DOM Level 3:</span>
interface <a href="#events-WheelEvent">WheelEvent</a> : <a href="#events-MouseEvent">MouseEvent</a>
{
  <span class="comment">// DeltaModeCode</span>
  const unsigned long              <a href="#events-DOM_DELTA_PIXEL">DOM_DELTA_PIXEL</a> = 0x00;
  const unsigned long              <a href="#events-DOM_DELTA_LINE">DOM_DELTA_LINE</a>  = 0x01;
  const unsigned long              <a href="#events-DOM_DELTA_PAGE">DOM_DELTA_PAGE</a>  = 0x02;

  readonly attribute double         <a href="#events-WheelEvent-deltaX">deltaX</a>;
  readonly attribute double         <a href="#events-WheelEvent-deltaY">deltaY</a>;
  readonly attribute double         <a href="#events-WheelEvent-deltaZ">deltaZ</a>;
  readonly attribute unsigned long <a href="#events-WheelEvent-deltaMode">deltaMode</a>;
};
</code></pre>
							</dd>

							<dt><strong>Definition group <em><a id="events-ID-WheelEvent-DeltaModeCode">DeltaModeCode</a></em></strong></dt>
							<dd>
								<p>This set of constants <span class="must">must</span> be used to indicate the units of measurement for the <a href="#glossary-delta"><code>delta</code></a> values.  The precise measurement
									is specific to device, operating system, and application configurations.</p>

								<dl>
									<dt><strong>Defined Constants</strong></dt>
									<dd>
										<dl>
											<dt><a id="events-DOM_DELTA_PIXEL"><code class="constant-name">DOM_DELTA_PIXEL</code></a></dt>
											<dd>The units of measurement for the <a href="#glossary-delta"><code>delta</code></a> <span class="must">must</span> be pixels.  This is the most typical case in most operating system and implementation
												configurations.</dd>

											<dt><a id="events-DOM_DELTA_LINE"><code class="constant-name">DOM_DELTA_LINE</code></a></dt>
											<dd>The units of measurement for the <a href="#glossary-delta"><code>delta</code></a> <span class="must">must</span> be individual lines of text.  This is the case for many form controls.</dd>

											<dt><a id="events-DOM_DELTA_PAGE"><code class="constant-name">DOM_DELTA_PAGE</code></a></dt>
											<dd>The units of measurement for the <a href="#glossary-delta"><code>delta</code></a> <span class="must">must</span> be pages, either defined as a single screen or as a demarcated page.</dd>
										</dl>
									</dd>
								</dl>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-WheelEvent-deltaX">deltaX</a></code> of type <code>double</code>, readonly</dt>
									<dd>
										<p>In user agents where the default action of the <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event is to scroll, the value <span class="must">must</span> be the measurement along
											the x-axis (in pixels, lines, or pages) to be scrolled in the case where the event is not cancelled. Otherwise, this is an implementation-specific
											measurement (in pixels, lines, or pages) of the movement of a wheel device around the x-axis.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-WheelEvent-deltaY">deltaY</a></code> of type <code>double</code>, readonly</dt>
									<dd>
										<p>In user agents where the default action of the <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event is to scroll, the value <span class="must">must</span> be the measurement along
											the y-axis (in pixels, lines, or pages) to be scrolled in the case where the event is not cancelled. Otherwise, this is an implementation-specific
											measurement (in pixels, lines, or pages) of the movement of a wheel device around the y-axis.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-WheelEvent-deltaZ">deltaZ</a></code> of type <code>double</code>, readonly</dt>
									<dd>
										<p>In user agents where the default action of the <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event is to scroll, the value <span class="must">must</span> be the measurement along
											the z-axis (in pixels, lines, or pages) to be scrolled in the case where the event is not cancelled. Otherwise, this is an implementation-specific
											measurement (in pixels, lines, or pages) of the movement of a wheel device around the z-axis.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-WheelEvent-deltaMode">deltaMode</a></code> of type <code>unsigned long</code>, readonly</dt>
									<dd>
										<p>The <code>deltaMode</code> attribute contains an indication of the units of measurement for the <a href="#glossary-delta"><code>delta</code></a> values.
											The default value is <a href="#events-DOM_DELTA_PIXEL"><code class="constant-name">DOM_DELTA_PIXEL</code></a> (pixels).</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<p>The Wheel event types are listed below.</p>

				<!-- wheel -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-wheel"><dfn><a class="eventtype" href="#event-type-wheel"><code>wheel</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>wheel</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-WheelEvent"><code>WheelEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Async</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>scroll (or zoom) the document</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: <a class="def" href="#glossary-topmost-event-target">topmost event target</a></li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-MouseEvent-screenX"><code class="attribute-name">MouseEvent.screenX</code></a>: if the wheel is associated with a pointing device, the value based
												on the pointer position on the screen, otherwise <code>0</code></li>
											<li><a href="#events-MouseEvent-screenY"><code class="attribute-name">MouseEvent.screenY</code></a>: if the wheel is associated with a pointing device, the value based
												on the pointer position on the screen, otherwise <code>0</code></li>
											<li><a href="#events-MouseEvent-clientX"><code class="attribute-name">MouseEvent.clientX</code></a>: if the wheel is associated with a pointing device, the value based
												on the pointer position within the viewport, otherwise <code>0</code></li>
											<li><a href="#events-MouseEvent-clientY"><code class="attribute-name">MouseEvent.clientY </code></a>: if the wheel is associated with a pointing device, the value
												based on the pointer position within the viewport, otherwise <code>0</code></li>
											<li><a href="#events-MouseEvent-altKey"><code class="attribute-name">MouseEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">'Alt'</code></a>
												modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-ctrlKey"><code class="attribute-name">MouseEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-shiftKey"><code class="attribute-name">MouseEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-metaKey"><code class="attribute-name">MouseEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-MouseEvent-button"><code class="attribute-name">MouseEvent.button</code></a>: if wheel is associated with a pointing device, value based on current
												button pressed, otherwise <code>0</code></li>
											<li><a href="#events-MouseEvent-buttons"><code class="attribute-name">MouseEvent.buttons</code></a>: if wheel is associated with a pointing device, value based on
												all buttons current depressed, <code>0</code> if no buttons pressed</li>
											<li><a href="#events-MouseEvent-relatedTarget"><code class="attribute-name">MouseEvent.relatedTarget</code></a>: indicates the <a class="def" href="#glossary-event-target">
												event target</a> the pointing device is pointing at, if any.</li>
											<li><a href="#events-WheelEvent-deltaX"><code class="attribute-name">WheelEvent.deltaX</code></a>: expected amount that the page will scroll along the x-axis according
												to the deltaMode units; or an implemenation-specific value of movement of a wheel around the x-axis</li>
											<li><a href="#events-WheelEvent-deltaY"><code class="attribute-name">WheelEvent.deltaY</code></a>: expected amount that the page will scroll along the y-axis according
												to the deltaMode units; or an implemenation-specific value of movement of a wheel around the y-axis</li>
											<li><a href="#events-WheelEvent-deltaZ"><code class="attribute-name">WheelEvent.deltaZ</code></a>: expected amount that the page will scroll along the z-axis according
												to the deltaMode units; or an implemenation-specific value of movement of a wheel around the z-axis</li>
											<li><a href="#events-WheelEvent-deltaMode"><code class="attribute-name">WheelEvent.deltaMode</code></a>: unit indicator (pixels, lines, or pages) for the deltaX, deltaY,
												and deltaZ attributes</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a mouse wheel has been rotated around any axis, or when an equivalent
								input device (such as a mouse-ball, certain tablets or touchpads, etc.) has emulated such an action. Depending on the platform and input device, diagonal wheel
								deltas <span class="may">may</span> be delivered either as a single <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event with multiple non-zero axes or as separate <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a>
								events for each non-zero axis.</p>

							<p>The typical <a class="def" href="#glossary-default-action">default action</a> of the <a class="eventtype" href="#event-type-wheel"><code>wheel</code></a> event
								type is to scroll (or in some cases, zoom) the document by the indicated amount.  If this event is canceled, the implementation <span class="mustnot">must not</span> scroll or zoom the document
								(or perform whatever other implementation-specific default action is associated with this event type).</p>

							<p class="note"><strong>Note:</strong> In some <a class="def" href="#glossary-user-agent">user agents</a>, or with some input devices, the speed that the wheel has been
								turned can affect the <a href="#glossary-delta"><code>delta</code></a> values, with a faster speed producing a higher <a href="#glossary-delta"><code>delta</code></a> value.</p>
						</dd>
					</dl>
				</div>
			</div>

			<h3><a id="events-keyboardevents" href="#events-keyboardevents">5.2.5 Keyboard Event Types</a></h3>
			<div>

				<p>Keyboard events are device dependent, i.e., they rely on the capabilities of the input devices and how they are mapped in the operating systems. Refer to <a href="#keys">
					Keyboard events and key values</a> for more details, including examples on how Keyboard Events are used in combination with Composition Events. Depending on the
					character generation device, keyboard events might not be generated.</p>

				<p class="note"><strong>Authoring Note:</strong> Keyboard events are only one modality of providing textual input. For editing scenarios, consider also using the "input" event
					defined in [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] as an alternate to (or in addition to) keyboard events.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-KeyboardEvent">KeyboardEvent</a></em></strong> (introduced in <strong class="since">DOM Level 3</strong>)</dt>
					<dd>
						<p>The <code>KeyboardEvent</code> interface provides specific contextual information associated with keyboard devices. Each keyboard event references a key using a
							value. Keyboard events are commonly directed at the element that has the focus.</p>

						<p>The <code>KeyboardEvent</code> interface provides convenient attributes for some common modifiers keys: <a href="#events-KeyboardEvent-ctrlKey"><code>KeyboardEvent.ctrlKey</code></a>,
							<a href="#events-KeyboardEvent-shiftKey"><code>KeyboardEvent.shiftKey</code></a>, <a href="#events-KeyboardEvent-altKey"><code>KeyboardEvent.altKey</code></a>,
							<a href="#events-KeyboardEvent-metaKey"><code>KeyboardEvent.metaKey</code></a>. These attributes are equivalent to using the method <a href="#events-KeyboardEvent-getModifierState">
							<code>KeyboardEvent.getModifierState(keyArg)</code></a> with <code class="key">'Control'</code>, <code class="key">'Shift'</code>, <code class="key">'Alt'</code>,
							or <code class="key">'Meta'</code> respectively.</p>

						<p>To create an instance of the <code>KeyboardEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("KeyboardEvent")</code></a>
							method call.</p>

						<p class="note"><strong>Authoring Note: </strong>See <a href="#new-event-interface-initializers">Appendix A</a> for information about programmatically initializing
							KeyboardEvent objects.</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-KeyboardEvent"><code>
<span class="comment">// Introduced in DOM Level 3:</span>
interface <a href="#events-KeyboardEvent">KeyboardEvent</a> : <a href="#events-UIEvent">UIEvent</a>
{
  <span class="comment">// KeyLocationCode</span>
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_STANDARD">DOM_KEY_LOCATION_STANDARD</a> = 0x00;
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_LEFT">DOM_KEY_LOCATION_LEFT</a>     = 0x01;
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_RIGHT">DOM_KEY_LOCATION_RIGHT</a>    = 0x02;
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_NUMPAD">DOM_KEY_LOCATION_NUMPAD</a>   = 0x03;
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_MOBILE">DOM_KEY_LOCATION_MOBILE</a>   = 0x04;
  const unsigned long              <a href="#events-DOM_KEY_LOCATION_JOYSTICK">DOM_KEY_LOCATION_JOYSTICK</a> = 0x05;

  readonly attribute DOMString     <a href="#events-KeyboardEvent-char">char</a>;
  readonly attribute DOMString     <a href="#events-KeyboardEvent-key">key</a>;
  readonly attribute unsigned long <a href="#events-KeyboardEvent-location">location</a>;
  readonly attribute boolean       <a href="#events-KeyboardEvent-ctrlKey">ctrlKey</a>;
  readonly attribute boolean       <a href="#events-KeyboardEvent-shiftKey">shiftKey</a>;
  readonly attribute boolean       <a href="#events-KeyboardEvent-altKey">altKey</a>;
  readonly attribute boolean       <a href="#events-KeyboardEvent-metaKey">metaKey</a>;
  readonly attribute boolean       <a href="#events-KeyboardEvent-repeat">repeat</a>;
  readonly attribute DOMString     <a href="#events-KeyboardEvent-locale">locale</a>;
  boolean                          <a href="#events-KeyboardEvent-getModifierState">getModifierState</a>(DOMString keyArg);
};
</code></pre>
							</dd>

							<dt><strong>Definition group <em><a id="events-ID-KeyboardEvent-KeyLocationCode">KeyLocationCode</a></em></strong></dt>
							<dd>
								<p>This set of constants <span class="must">must</span> be used to indicate the location of a key on the device. In case a DOM implementation wishes to provide a new location information, a
									value different from the following constant values <span class="must">must</span> be used.</p>

								<dl>
									<dt><strong>Defined Constants</strong></dt>
									<dd>
										<dl>
											<dt><a id="events-DOM_KEY_LOCATION_STANDARD"><code class="constant-name">DOM_KEY_LOCATION_STANDARD</code></a></dt>
											<dd>
												<p>The key activation <span class="mustnot">must not</span> be distinguished as the left or right version of the key, and did not originate from the numeric keypad (or did not originate with
												a virtual key corresponding to the numeric keypad).</p>

												<p class="example"><strong>Example:</strong> the <code class="key">'Q'</code> key on a PC 101 Key US keyboard.</p>
											</dd>

											<dt><a id="events-DOM_KEY_LOCATION_LEFT"><code class="constant-name">DOM_KEY_LOCATION_LEFT</code></a></dt>
											<dd>
												<p>The key activated originated from the left key location (there is more than one possible location for this key).</p>

												<p class="example"><strong>Example:</strong> the left <code class="key">'Control'</code> key on a PC 101 Key US keyboard.</p>
											</dd>

											<dt><a id="events-DOM_KEY_LOCATION_RIGHT"><code class="constant-name">DOM_KEY_LOCATION_RIGHT</code></a></dt>
											<dd>
												<p>The key activation originated from the right key location (there is more than one possible location for this key).</p>

												<p class="example"><strong>Example:</strong> the right <code class="key">'Shift'</code> key on a PC 101 Key US keyboard.</p>
											</dd>

											<dt><a id="events-DOM_KEY_LOCATION_NUMPAD"><code class="constant-name">DOM_KEY_LOCATION_NUMPAD</code></a></dt>
											<dd>
												<p>The key activation originated on the numeric keypad or with a virtual key corresponding to the numeric keypad.</p>

												<p class="example"><strong>Example:</strong> the <code class="key">'1'</code> key on a PC 101 Key US keyboard located on the numeric pad.</p>
											</dd>

											<dt><a id="events-DOM_KEY_LOCATION_MOBILE"><code class="constant-name">DOM_KEY_LOCATION_MOBILE</code></a></dt>
											<dd>
												<p>The key activation originated on a mobile device, either on a physical keypad or a virtual keyboard.</p>

												<p class="example"><strong>Example:</strong> the <code class="key">'#'</code> key or softkey on a mobile device.</p>
											</dd>

											<dt><a id="events-DOM_KEY_LOCATION_JOYSTICK"><code class="constant-name">DOM_KEY_LOCATION_JOYSTICK</code></a></dt>
											<dd>
												<p>The key activation originated on a game controller or a joystick on a mobile device.</p>

												<p class="example"><strong>Example:</strong> the <code class="key">'DownLeft'</code> key on a game controller.</p>
											</dd>

										</dl>
									</dd>
								</dl>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-KeyboardEvent-altKey">altKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p><code>true</code> if the <a href="#key-Alt"><code class="key">'Alt'</code></a> (alternative) or <code>Option</code> key modifier was active.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-ctrlKey">ctrlKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p><code>true</code> if the <a href="#key-Control"><code class="key">'Control'</code></a> (control) key modifier was active.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-char">char</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>char</code> holds the character value of the key pressed.  If the key press has a printed representation, then the value <span class="must">must</span> be a non-empty Unicode character
											string, conforming to the <a href="#key-algorithm">algorithm for determining the key value</a> defined in this specification.  For a key associated with a macro
											to insert multiple characters, the value of the <code>char</code> attribute will hold the entire sequence of characters.  For a key which does not have a character
											representation, the value <span class="must">must</span> be the <a class="def" href="#glossary-empty-string">empty string</a>.</p>

										<p class="note"><strong>Note:</strong> the <code>char</code> attribute is not related to the legacy <code>charCode</code> attribute and does
											not have the same set of values.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-key">key</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>key</code> holds the key value of the key pressed.  If the value is has a printed representation, it <span class="must">must</span> match the value of the <a href="#events-KeyboardEvent-char">
											<code>KeyboardEvent.char</code></a> attribute; if the value is a control key which has no printed representation, it <span class="must">must</span> be one of the key values defined in the
											<a href="#keys-keyvalues">key values set</a>, as determined by the <a href="#key-algorithm">algorithm for determining the key value</a>. Implementations that are
											unable to identify a key <span class="must">must</span> use the key value <a href="#key-Unidentified"><code class="key">'Unidentified'</code></a>.</p>

										<p class="note"><strong>Note:</strong> the <code>key</code> attribute is not related to the legacy <code>keyCode</code> attribute and does not have the same set of values.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-location">location</a></code> of type <code>unsigned long</code>, readonly</dt>
									<dd>
										<p>The <code>location</code> attribute contains an indication of the location of the key on the device, as described in <a href="#events-ID-KeyboardEvent-KeyLocationCode">
											Keyboard event types</a>.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-metaKey">metaKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p><code>true</code> if the meta (Meta) key modifier was active.</p>

										<p class="note"><strong>Note:</strong> The <code>'Command'</code> key modifier on Macintosh systems is represented using this key modifier.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-shiftKey">shiftKey</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p><code>true</code> if the shift (Shift) key modifier was active.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-repeat">repeat</a></code> of type <code>boolean</code>, readonly</dt>
									<dd>
										<p><code>true</code> if the key has been pressed in a sustained manner.  Holding down a key <span class="must">must</span> result in the repeating the events
											<a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>, <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a>
											(when supported by the user agent) in this order, at a rate determined by the system configuration. For mobile devices which have <em>long-key-press</em>
											behavior, the first key event with a <a href="#events-KeyboardEvent-repeat">repeat</a> attribute value of <code>'true'</code> <span class="must">must</span> serve as an
											indication of a <em>long-key-press</em>. The length of time that the key <span class="must">must</span> be pressed in order to begin repeating is configuration-dependent.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>false</code>.</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-KeyboardEvent-locale">locale</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p>The <code>locale</code> <code>DOMString</code> attribute contains a BCP-47 tag [<a href="#ref-BCP-47">BCP-47</a>] indicating the locale for which the keyboard originating
											the event is configured, e.g. <code>"en-US"</code>. The <code>locale</code> <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">empty string</a> when inapplicable
											or unknown, e.g. when this information is not exposed by the underlying platform.</p>

										<p class="note"><strong>Note:</strong> <code>locale</code> does not necessarily indicate the locale of the data or the context in which
											it is being entered.  For example, a French user often might not switch to an English keyboard setting when typing English, in which case the <code>locale</code>
											will still indicate French.  Nor can it be used to definitively calculate the <q>physical</q> or <q>virtual</q> key associated with the event, or the character
											printed on that key.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>
								</dl>
							</dd>

							<dt><strong>Methods</strong></dt>
							<dd>
								<dl>
									<dt><code class="method-name"><a id="events-KeyboardEvent-getModifierState">getModifierState</a></code></dt>
									<dd>
										<div class="method">
											<p>Queries the state of a modifier using a key value. See also <a href="#keys-Modifiers">Modifier keys</a>.</p>

											<div class="parameters">
												<p><strong>Parameters</strong></p>

												<div class="paramtable">
													<dl>
														<dt><code class="parameter-name">keyArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>A modifier key value.  Modifier keys defined in this specification are
																<a href="#key-Alt"><code class="key">'Alt'</code></a>
																<a href="#key-AltGraph"><code class="key">'AltGraph'</code></a>
																<a href="#key-CapsLock"><code class="key">'CapsLock'</code></a>
																<a href="#key-Control"><code class="key">'Control'</code></a>
																<a href="#key-Fn"><code class="key">'Fn'</code></a>
																<a href="#key-Meta"><code class="key">'Meta'</code></a>
																<a href="#key-NumLock"><code class="key">'NumLock'</code></a>
																<a href="#key-Scroll"><code class="key">'Scroll'</code></a>
																<a href="#key-Shift"><code class="key">'Shift'</code></a>
																<a href="#key-SymbolLock"><code class="key">'SymbolLock'</code></a>, and
																<a href="#key-OS"><code class="key">'OS'</code></a>
																User agents <span class="may">may</span> support additional implementation-specific modifier keys depending on the environment.</p>

															<p class="note"><strong>Note:</strong> If an application wishes to distinguish between right and left modifiers, this information could be
																deduced using keyboard events and <a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a>.</p>
														</dd>
													</dl>
												</div>
											</div>
											<div class="return">
												<p><strong>Return Value</strong></p>

												<div class="returntable">
													<table summary="Layout table: the first cell contains the type of the return value, the second contains a short description" border="0">
														<tr>
															<td><code>boolean</code></td>
															<td><code>true</code> if it is a modifier key and the modifier is activated, <code>false</code> otherwise.</td>
														</tr>
													</table>
												</div>
											</div>

											<div><strong>No Exceptions</strong></div>
										</div>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<p class="warning"><strong>Warning!</strong>  Legacy keyboard event implementations include three additional attributes, <code>keyCode</code>, <code>charCode</code>, and
					<code>which</code>.  The <code>keyCode</code> attribute indicates a numeric value associated with a particular key on a computer keyboard,
					while the <code>charCode</code> attribute indicates the <acronym title="American Standard Code for Information Interchange">ASCII</acronym> value of the character
					associated with that key (which might be the same as the <code>keyCode</code> value) and is applicable only to keys that produce a
					<a class="def" href="#glossary-character-value">character value</a>.  In practice, <code>keyCode</code> and <code>charCode</code> are inconsistent across platforms
					and even the same implementation on different operating systems or using different localizations.  DOM Level 3 Events  does not define values for either
					<code>keyCode</code> or <code>charCode</code>, or behavior for <code>charCode</code>; content authors can use <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a>
					or <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> instead, in conforming DOM Level 3 Events implementations. <em>For more information, see
					the informative appendix on <a href="#legacy-key-attributes">Legacy key attributes: keyCode, charCode, and which</a>.</em></p>

				<p class="note"><strong>Note:</strong> For compatibility with existing content, virtual keyboards, such as software keyboards on screen-based
					input devices, are expected to produce the normal range of keyboard events, even though they do not possess physical keys.</p>

				<p class="note"><strong>Note:</strong> In some implementations or system configurations, some key events, or their values, might be suppressed by the <a class="def" href="#glossary-ime">IME</a> in use.</p>

				<h4><a id="events-keyboard-event-order" href="#events-keyboard-event-order">5.2.5.1 Keyboard Event Order</a></h4>
				<div>
					<p>The keyboard events defined in this specification occur in a set order relative to one another, for any given key:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a></li>

						<li><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> (only for keys which produce a <a class="def" href="#glossary-character-value">character
							value</a>)</li>

						<li>If the key is depressed for a sustained period, the following events <span class="may">may</span> repeat at an environment-dependent rate: <!-- and the key should seek counseling -->
							<ul>
								<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> (with <a href="#events-KeyboardEvent-repeat">repeat</a> attribute set to <code>
									true</code>)</li>

								<li><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> (with <a href="#events-KeyboardEvent-repeat">repeat</a> attribute set to <code>
									true</code>; only for keys which produce a <a class="def" href="#glossary-character-value">character value</a>)</li>
							</ul>
						</li>
						<li><em>Any <a class="def" href="#glossary-default-action">default actions</a> related to this key</em></li>

						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a></li>
					</ol>

					<p class="note"><strong>Note:</strong> Typically, any <a class="def" href="#glossary-default-action">default actions</a> associated with any particular
						key are completed before the <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> event is dispatched; this might delay the <a class="eventtype"
						href="#event-type-keyup"><code>keyup</code></a> event slightly (though this is not likely to be a perceptible delay).</p>

					<p>The <a class="def" href="#glossary-event-target">event target</a> of a key event is the currently focused element which is processing the keyboard activity; this
						is often an HTML <code>input</code> element or a textual element which is editable, but <span class="may">may</span> be an element defined by the <a class="def" href="#glossary-host-language">
							host language</a> to accept keyboard input for non-text purposes, such as the activation of a hotkey or trigger of some other behavior; if no suitable element
						is in focus, the event target will be the root element.</p>

					<p class="note"><strong>Note:</strong>  The <a class="def" href="#glossary-event-target">event target</a> might change between different key events;
						for example, a <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event on the <a href="#key-Tab"><code class="key">'Tab'</code></a> key
						will likely have a different <a class="def" href="#glossary-event-target">event target</a> than the  <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>
						event on the same keystroke.</p>
				</div>

				<p>The keyboard event types are listed below.</p>

				<!-- keydown -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-keydown"><dfn><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>keydown</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Varies: <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event; launch <a class="def" href="#glossary-text-composition-system">text composition
										system</a>; <a class="eventtype" href="#event-type-blur"><code>blur</code></a> and <a class="eventtype" href="#event-type-focus"><code>focus</code></a> events;
										<a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event; other event</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the key event, root element if no suitable
												input element focused</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-KeyboardEvent-char"><code class="attribute-name">KeyboardEvent.char</code></a>: the character value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-key"><code class="attribute-name">KeyboardEvent.key</code></a>: the key value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-location"><code class="attribute-name">KeyboardEvent.location</code></a>: the location of the key on the device.</li>
											<li><a href="#events-KeyboardEvent-altKey"><code class="attribute-name">KeyboardEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">
												'Alt'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-shiftKey"><code class="attribute-name">KeyboardEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-ctrlKey"><code class="attribute-name">KeyboardEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-metaKey"><code class="attribute-name">KeyboardEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-repeat"><code class="attribute-name">KeyboardEvent.repeat</code></a>:  <code>true</code> if a key has been depressed long enough
												to trigger key repetition, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-locale"><code class="attribute-name">KeyboardEvent.locale</code></a>: the language code for the key event, if available; otherwise,
												the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a key is pressed down. The <a class="eventtype" href="#event-type-keydown">
								<code>keydown</code></a> event type is device dependent and relies on the capabilities of the input devices and how they are mapped in the operating system. This
								event type <span class="must">must</span> be generated after the <a class="def" href="#glossary-key-mapping">key mapping</a>. This event type <span class="must">must</span> be dispatched before the <a class="eventtype"
								href="#event-type-keypress"><code>keypress</code></a> and <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> events event associated with the
								same key.</p>

							<p>The default action of the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event depends upon the key:</p>

							<ul>
								<li>if the key is associated with a character, the default action <span class="must">must</span> be to dispatch a <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a>
									event; in the case where the key which is associated with multiple characters (such as with a macro or certain sequences of dead keys), the default action <span class="must">must</span>
									be to dispatch one <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event for each character</li>

								<li>if the key is associated with a <a class="def" href="#glossary-text-composition-system">text composition system</a>, the default action <span class="must">must</span> be to launch that
									system</li>

								<li>if the key is the <a href="#key-Tab"><code class="key">'Tab'</code></a> key, the default action <span class="must">must</span> be to shift the document focus from the currently focused
									element (if any) to the new focused element, as described in <a href="#events-focusevent">Focus Event Types</a></li>

								<li>if the key is the <a href="#key-Enter"><code class="key">'Enter'</code></a> or <a href="#key-Spacebar"><code class="key">'Space'</code></a> key and the
									current focus is on a state-changing element, the default action <span class="must">must</span> be to dispatch a <a class="eventtype" href="#event-type-click"><code>click</code></a> event,
									and a <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a> event if that event type is supported by the <a class="def" href="#glossary-user-agent">
									user agent</a> (refer to <a href="#event-flow-activation">activation triggers and behavior</a> for more details)</li>
							</ul>

							<p>If this event is canceled, the associated event types <span class="mustnot">must not</span> be dispatched, and the associated actions <span class="mustnot">must not</span> be performed.</p>

							<p class="note"><strong>Note:</strong> the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> and <a class="eventtype" href="#event-type-keyup">
								<code>keyup</code></a> events are traditionally associated with detecting any key, not just those which produce a <a class="def" href="#glossary-character-value">character
								value</a>.</p>
						</dd>
					</dl>
				</div>

				<!-- keypress -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-keypress"><dfn><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>keypress</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Varies: launch <a class="def" href="#glossary-text-composition-system">text composition system</a>; <a class="eventtype" href="#event-type-blur"><code>blur</code></a>
										and <a class="eventtype" href="#event-type-focus"><code>focus</code></a> events; <a class="eventtype" href="#event-type-DOMActivate"><code>DOMActivate</code></a>
										event; other event</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the key event, root element if no suitable
												input element focused</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-KeyboardEvent-char"><code class="attribute-name">KeyboardEvent.char</code></a>: the character value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-key"><code class="attribute-name">KeyboardEvent.key</code></a>: the key value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-location"><code class="attribute-name">KeyboardEvent.location</code></a>: the location of the key on the device.</li>
											<li><a href="#events-KeyboardEvent-altKey"><code class="attribute-name">KeyboardEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">
												'Alt'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-shiftKey"><code class="attribute-name">KeyboardEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-ctrlKey"><code class="attribute-name">KeyboardEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-metaKey"><code class="attribute-name">KeyboardEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-repeat"><code class="attribute-name">KeyboardEvent.repeat</code></a>:  <code>true</code> if a key has been depressed long enough
												to trigger key repetition, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-locale"><code class="attribute-name">KeyboardEvent.locale</code></a>: the language code for the key event, if available; otherwise,
												the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a key is pressed down, if and only if that key normally produces a <a
								class="def" href="#glossary-character-value">character value</a>. The <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event type is device
								dependent and relies on the capabilities of the input devices and how they are mapped in the operating system. This event type <span class="must">must</span> be generated after the <a class="def"
								href="#glossary-key-mapping">key mapping</a>. It <span class="mustnot">must not</span> be fired when using an <a class="def" href="#glossary-ime">input method editor</a>.  This event type
								<span class="must">must</span> be dispatched after the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event and before the <a class="eventtype" href="#event-type-keyup">
								<code>keyup</code></a> event associated with the same key.</p>

							<p class="note"><strong>Note:</strong> the <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event is traditionally associated with detecting a
								<a class="def" href="#glossary-character-value">character value</a> rather than a physical key, and might not be available on all keys in some configurations.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event type is defined in this
								specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type. When
								in editing contexts, authors can subscribe to the "input" event defined in [<cite><a class="informative" href="#references-HTML5">HTML5</a></cite>] instead.</p>
						</dd>
					</dl>
				</div>

				<!-- keyup -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-keyup"><dfn><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>keyup</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Document</code>, <code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the key event, root element if no suitable
												input element focused</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-KeyboardEvent-char"><code class="attribute-name">KeyboardEvent.char</code></a>: the character value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-key"><code class="attribute-name">KeyboardEvent.key</code></a>: the key value of the key pressed.</li>
											<li><a href="#events-KeyboardEvent-location"><code class="attribute-name">KeyboardEvent.location</code></a>: the location of the key on the device.</li>
											<li><a href="#events-KeyboardEvent-altKey"><code class="attribute-name">KeyboardEvent.altKey</code></a>: <code>true</code> if <a href="#key-Alt"><code class="key">
												'Alt'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-shiftKey"><code class="attribute-name">KeyboardEvent.shiftKey</code></a>:  <code>true</code> if <a href="#key-Shift"><code class="key">
												'Shift'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-ctrlKey"><code class="attribute-name">KeyboardEvent.ctrlKey</code></a>:  <code>true</code> if <a href="#key-Control"><code class="key">
												'Control'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-metaKey"><code class="attribute-name">KeyboardEvent.metaKey</code></a>:  <code>true</code> if <a href="#key-Meta"><code class="key">
												'Meta'</code></a> modifier was active, otherwise <code>false</code></li>
											<li><a href="#events-KeyboardEvent-repeat"><code class="attribute-name">KeyboardEvent.repeat</code></a>: <code>false</code></li>
											<li><a href="#events-KeyboardEvent-locale"><code class="attribute-name">KeyboardEvent.locale</code></a>: the language code for the key event, if available; otherwise,
												the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a key is released.  The <a class="eventtype" href="#event-type-keyup">
								<code>keyup</code></a> event type is device dependent and relies on the capabilities of the input devices and how they are mapped in the operating system.  This
								event type <span class="must">must</span> be generated after the <a class="def" href="#glossary-key-mapping">key mapping</a>. This event type <span class="must">must</span> be dispatched after the <a class="eventtype"
								href="#event-type-keydown"><code>keydown</code></a> and <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> events event associated with
								the same key.</p>

							<p class="note"><strong>Note:</strong> the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> and <a class="eventtype" href="#event-type-keyup">
								<code>keyup</code></a> events are traditionally associated with detecting any key, not just those which produce a <a class="def" href="#glossary-character-value">character
								value</a>.</p>
						</dd>
					</dl>
				</div>
			</div>

			<h3><a id="events-compositionevents" href="#events-compositionevents">5.2.6 Composition Event Types</a></h3>
			<div>

				<p>Composition Events provide a means for inputing text in a supplementary or alternate manner than by Keyboard Events, in order to allow the use of characters that
					might not be commonly available on keyboard. For example, Composition events might be used to add accents to characters despite their absence from standard US keyboards,
					to build up logograms of many Asian languages from their base components or categories, to select word choices from a combination of key presses on a mobile device
					keyboard, or to convert voice commands into text using a speech recognition processor.  Refer to <a href="#keys">Keyboard events and key values</a> for examples
					on how Composition Events are used in combination with keyboard events.</p>

				<p>Conceptually, a composition session consists of one <a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a> event, one or more
					<a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a> events, and one <a class="eventtype" href="#event-type-compositionend">
					<code>compositionend</code></a> event, with the value of the <a href="#events-CompositionEvent-data">data</a> attribute persisting between each <q>stage</q>
					of this event chain during each session.</p>

				<p class="note"><strong>Note:</strong> While a composition session is active, keyboard events can be dispatched to the DOM if the keyboard is the input device used
					with the composition session. See the <a href="#event-type-compositionstart"><code>compositionstart</code> event details</a> and <a href="#keys-IME">IME section</a>
					for relevent event ordering.</p>

				<p>Not all <a class="def" href="#glossary-ime">IME</a> systems or devices expose the necessary data to the DOM, so the active composition string (the <q>Reading Window</q>
					or <q>candidate selection menu option</q>) might not be available through this interface, in which case the selection <span class="may">may</span> be represented by the <a class="def" href="#glossary-empty-string">
					empty string</a>.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-CompositionEvent">CompositionEvent</a></em></strong> (introduced in <strong class="since">DOM Level 3</strong>)</dt>
					<dd>
						<p>The <code>CompositionEvent</code> interface provides specific contextual information associated with Composition Events.</p>

						<p>To create an instance of the <code>CompositionEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("CompositionEvent")</code></a>
							method call.</p>

						<p class="note"><strong>Authoring Note: </strong>See <a href="#new-event-interface-initializers">Appendix A</a> for information about programmatically initializing
							CompositionEvent objects.</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-CompositionEvent"><code>
<span class="comment">// Introduced in DOM Level 3:</span>
interface <a href="#events-CompositionEvent">CompositionEvent</a> : <a href="#events-UIEvent">UIEvent</a>
{
  readonly attribute DOMString? <a href="#events-CompositionEvent-data">data</a>;
  readonly attribute DOMString  <a href="#events-CompositionEvent-locale">locale</a>;
};
</code></pre>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-CompositionEvent-data">data</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>data</code> holds the value of the characters generated by an input method. This <span class="may">may</span> be a single Unicode character or a non-empty sequence of Unicode characters
											[<cite><a class="normative" href="#references-Unicode">Unicode</a></cite>]. Characters <span class="should">should</span> be normalized as defined by the Unicode normalization form <em>NFC</em>,
											defined in [<cite><a class="normative" href="#references-UnicodeNormalization">UAX #15</a></cite>]. This attribute <span class="may">may</span> be null or contain the <a class="def" href="#glossary-empty-string">
											empty string</a>.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-CompositionEvent-locale">locale</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p>The <code>locale</code> <code>DOMString</code> attribute contains a BCP-47 tag [<a href="#ref-BCP-47">BCP-47</a>] indicating the locale for which the IME originating
											the event is configured, e.g. <code>"ja"</code>, <code>"zh-Hans"</code>, <code>"ko"</code>. <span class="may">May</span> be the <a class="def" href="#glossary-empty-string">empty string</a>
											when inapplicable or unknown, e.g. when this information is not exposed by the underlying platform or application.</p>

										<p class="note"><strong>Note:</strong> <code>locale</code> does not necessarily indicate the locale of the data or the context in
											which it is being entered.  For example, a French user often might not switch to an English keyboard setting when typing English, in which case the <code>locale</code>
											will still indicate French, even though the data is actually English.  Similarly, an IME application could fail to distinguish between the locale of Chinese and
											Kanji characters.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<h4><a id="events-composition-event-order" href="#events-composition-event-order">5.2.6.1 Composition Event Order</a></h4>
				<div>
					<p>The composition events defined in this specification occur in a set order relative to one another:</p>

					<ol>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a> (multiple events)</li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a></li>
					</ol>
				</div>

				<h4><a id="handwriting" href="#handwriting">5.2.6.2 Handwriting Recognition Systems</a></h4>
				<div>
					<p>The following example describes a possible sequence of events when composing a text passage <q>text</q> with a handwriting recognition system, such as on a pen
						tablet, as modeled using Composition Events.</p>

					<ol>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a>: <code>''</code></li>
						<li><em>[User writes word on tablet surface]</em>
							<a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code>'test'</code></li>
						<li><em>[User rejects first word-match suggestion, selects different match]</em>
							<a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code>'text'</code></li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a>: <code>'text'</code></li>
					</ol>
				</div>

				<p>The composition event types are listed below.</p>

				<!-- compositionstart -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-compositionstart"><dfn><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>compositionstart</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>Start a new composition session when a <a class="def" href="#glossary-text-composition-system">text composition system</a> is enabled</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the composition</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-CompositionEvent-data"><code class="attribute-name">CompositionEvent.data</code></a>: the original string being edited, otherwise the <a class="def"
												href="#glossary-empty-string">empty string</a></li>
											<li><a href="#events-CompositionEvent-locale"><code class="attribute-name">CompositionEvent.locale</code></a>: the language code for the composition event, if available;
												otherwise, the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a <a class="def" href="#glossary-text-composition-system">text composition
								system</a> is enabled and a new composition session is about to begin (or has begun, depending on the <a class="def" href="#glossary-text-composition-system">text composition
								system</a>) in preparation for composing a passage of text. This event type is device-dependent, and <span class="may">may</span> rely upon the capabilities of the text conversion system and how it is
								mapped into the operating system. When a keyboard is used to feed an input method editor, this event type is generated after a <a class="eventtype"><code>keydown</code></a> event,
								but speech or handwriting recognition systems <span class="may">may</span> send this event type without keyboard events.  Some implemenations <span class="may">may</span> populate the
								<a href="#events-CompositionEvent-data"><code>data</code></a> attribute of the <a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a> event
								with the text currently selected in the document (for editing and replacement); otherwise, the value of the <a href="#events-CompositionEvent-data"><code>data</code></a>
								attribute <span class="must">must</span> be  the <a class="def" href="#glossary-empty-string">empty string</a>.</p>

							<p>This event <span class="must">must</span> be dispatched immediately before a <a class="def" href="#glossary-text-composition-system">text composition system</a> begins a new composition session, and
								before the DOM is modified due to the composition process. The default action of this event is for the <a class="def" href="#glossary-text-composition-system">text
								composition system</a> to start a new composition session. If this event is canceled, the <a class="def" href="#glossary-text-composition-system">text composition system</a> <span class="should">should</span>
								discard the current composition session.</p>

							<p class="note"><strong>Note: </strong>Canceling the <a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a> <em>event type</em> is distinct
								from canceling the <a class="def" href="#glossary-text-composition-system">text composition system</a> itself (e.g., by hitting a cancel button or closing an <a class="def"
								href="#glossary-ime">IME</a> window).</p>

							<p class="note"><strong>Note: </strong>Some IMEs do not support cancelling an in-progress composition session (e.g., such as GTK which doesn't presently have such an API). In these
								cases, calling <a href="#events-event-type-preventDefault"><code>preventDefault</code></a> will not stop this event's default action.</p>
						</dd>
					</dl>
				</div>

				<!-- compositionupdate -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-compositionupdate"><dfn><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>compositionupdate</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the composition, <code>null</code> if not
												accessible</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-CompositionEvent-data"><code class="attribute-name">CompositionEvent.data</code></a>: the string comprising the current results of the composition
												session, which <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">empty string</a> if the content has been deleted</li>
											<li><a href="#events-CompositionEvent-locale"><code class="attribute-name">CompositionEvent.locale</code></a>: the language code for the composition event, if available;
												otherwise, the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="should">should</span> dispatch this event during a composition session when a <a class="def" href="#glossary-text-composition-system">
								text composition system</a> updates its active text passage with a new character, which is added to the string in <a href="#events-CompositionEvent-data"><code>CompositionEvent.data</code></a>.
								Some <a class="def" href="#glossary-text-composition-system">text composition systems</a> might not expose this information to the DOM, in which case this event will not fire
								during the composition process. If the composition session is canceled, this event will be fired immediately before the <a class="eventtype" href="#event-type-compositionend">
								<code>compositionend</code></a> event, and the <a href="#events-CompositionEvent-data"><code>CompositionEvent.data</code></a> attribute will be set to the <a class="def"
								href="#glossary-empty-string">empty string</a>.</p>
						</dd>
					</dl>
				</div>

				<!-- compositionend -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-compositionend"><dfn><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>compositionend</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: focused element processing the composition</li>
											<li><a href="#events-UIEvent-view"><code class="attribute-name">UIEvent.view</code></a>: <a class="def" href="#glossary-defaultView"><code>defaultView</code></a></li>
											<li><a href="#events-UIEvent-detail"><code class="attribute-name">UIEvent.detail</code></a>: <code>0</code></li>
											<li><a href="#events-CompositionEvent-data"><code class="attribute-name">CompositionEvent.data</code></a>: the string comprising the final result of the composition
												session, which <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">empty string</a> if the content has been deleted or if the composition process has been canceled</li>
											<li><a href="#events-CompositionEvent-locale"><code class="attribute-name">CompositionEvent.locale</code></a>: the language code for the composition event, if available;
												otherwise, the <a class="def" href="#glossary-empty-string">empty string</a></li>
										</ul>
									</td>
								</tr>
							</table>
							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a <a class="def" href="#glossary-text-composition-system">text composition
								system</a> completes or cancels the current composition session.</p>

							<p>This event is dispatched immediately after the <a class="def" href="#glossary-text-composition-system">text composition system</a> completes the composition session
								(e.g., the <a class="def" href="#glossary-ime">IME</a> is closed, minimized, switched out of focus, or otherwise dismissed, and the focus switched back to the
								<a class="def" href="#glossary-user-agent">user agent</a>).</p>
						</dd>
					</dl>
				</div>
			</div>

			<h3><a id="events-mutationevents" href="#events-mutationevents">5.2.7 Mutation Events</a></h3>
			<div>

				<p>The mutation and mutation name event modules are designed to allow notification of any changes to the structure of a document, including attribute, text, or name
					modifications.</p>

				<p class="note"><strong>Note:</strong> none of the event types associated with the <code>MutationEvent</code> interface are designated as cancelable. This stems from
					the fact that it is very difficult to make use of existing DOM interfaces which cause document modifications if any change to the document might or might not take
					place due to cancelation of the resulting event. Although this is still a desired capability, it was decided that it would be better left until the addition of
					transactions into the DOM.</p>

				<p>Many single modifications of the tree can cause multiple mutation events to be dispatched. Rather than attempt to specify the ordering of mutation events due to
					every possible modification of the tree, the ordering of these events is left to the implementation.</p>

				<p class="warning"><strong>Warning!</strong>  The <a href="#events-MutationEvent">MutationEvent interface</a> was introduced in DOM Level 2 Events, but has not yet been
					completely and interoperably implemented across <a class="def" href="#glossary-user-agent">user agents</a>. In addition, there have been critiques that the interface, as designed,
					introduces a performance and implementation challenge. DOM4 [<a href="#references-DOM4">DOM4</a>] provides a new mechanism using a <code>MutationObserver</code> interface which
					addresses the use cases that mutation events solve, but in a more performant manner. Thus, this specification describes mutation events for reference and completeness of legacy
					behavior, but <a class="def" href="#glossary-deprecated">deprecates</a> the use of the <a href="#events-MutationEvent"><code>MutationEvent</code></a> interface.</p>

				<dl>
					<dt><strong>Interface <em><a id="events-MutationEvent">MutationEvent</a></em></strong> (introduced in <strong class="since">DOM Level 2</strong>)</dt>
					<dd>
						<p>The <code>MutationEvent</code> interface provides specific contextual information associated with Mutation events.</p>

						<p>To create an instance of the <code>MutationEvent</code> interface, use the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("MutationEvent")</code></a>
							method call.</p>

						<dl>
							<dt><strong>WebIDL Definition</strong></dt>
							<dd>
								<pre class="idl" id="idl-interface-MutationEvent"><code>
<span class="comment">// Deprecated in DOM Level 3:</span>
interface <a href="#events-MutationEvent">MutationEvent</a> : <a href="#events-Event">Event</a>
{
  <span class="comment">// attrChangeType</span>
  const unsigned short              <a href="#events-MODIFICATION">MODIFICATION</a> = 1;
  const unsigned short              <a href="#events-ADDITION">ADDITION</a>     = 2;
  const unsigned short              <a href="#events-REMOVAL">REMOVAL</a>      = 3;

  readonly attribute Node?          <a href="#events-MutationEvent-relatedNode">relatedNode</a>;
  readonly attribute DOMString      <a href="#events-MutationEvent-prevValue">prevValue</a>;
  readonly attribute DOMString      <a href="#events-MutationEvent-newValue">newValue</a>;
  readonly attribute DOMString      <a href="#events-MutationEvent-attrName">attrName</a>;
  readonly attribute unsigned short <a href="#events-MutationEvent-attrChange">attrChange</a>;
  void                              <a href="#events-event-type-initMutationEvent">initMutationEvent</a>(DOMString typeArg,
                                                      boolean canBubbleArg,
                                                      boolean cancelableArg,
                                                      Node? relatedNodeArg,
                                                      DOMString prevValueArg,
                                                      DOMString newValueArg,
                                                      DOMString attrNameArg,
                                                      unsigned short attrChangeArg);
};
</code></pre>
							</dd>

							<dt><strong>Definition group <em><a id="events-MutationEvent-attrChangeType">attrChangeType</a></em></strong></dt>
							<dd>
								<p>An integer indicating in which way the <code>Attr</code> was changed.</p>

								<dl>
									<dt><strong>Defined Constants</strong></dt>
									<dd>
										<dl>
											<dt><a id="events-ADDITION"><code class="constant-name">ADDITION</code></a></dt>
											<dd>The <code>Attr</code> was just added.</dd>

											<dt><a id="events-MODIFICATION"><code class="constant-name">MODIFICATION</code></a></dt>
											<dd>The <code>Attr</code> was modified in place.</dd>

											<dt><a id="events-REMOVAL"><code class="constant-name">REMOVAL</code></a></dt>
											<dd>The <code>Attr</code> was just removed.</dd>
										</dl>
									</dd>
								</dl>
							</dd>

							<dt><strong>Attributes</strong></dt>
							<dd>
								<dl>
									<dt><code class="attribute-name"><a id="events-MutationEvent-attrChange">attrChange</a></code> of type <code>unsigned short</code>, readonly</dt>
									<dd>
										<p><code>attrChange</code> indicates the type of change which triggered the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
											event. The values can be <code>MODIFICATION</code>, <code>ADDITION</code>, or <code>REMOVAL</code>.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>0</code>.</p>

										<p class="warning"><strong>Warning:</strong> There is no defined constant for the attrChange value of 0 (the un-initialized value).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MutationEvent-attrName">attrName</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>attrName</code> indicates the name of the changed <code>Attr</code> node in a <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
											event.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MutationEvent-newValue">newValue</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>newValue</code> indicates the new value of the <code>Attr</code> node in <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
											events, and of the <code>CharacterData</code> node in <a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a>
											events.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MutationEvent-prevValue">prevValue</a></code> of type <code>DOMString</code>, readonly</dt>
									<dd>
										<p><code>prevValue</code> indicates the previous value of the <code>Attr</code> node in <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
											events, and of the <code>CharacterData</code> node in <a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a>
											events.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>""</code> (the empty string).</p>
									</dd>

									<dt><code class="attribute-name"><a id="events-MutationEvent-relatedNode">relatedNode</a></code> of type <code>Node</code>, readonly</dt>
									<dd>
										<p><code>relatedNode</code> <span class="must">must</span> be used to identify a secondary node related to a mutation event. For example, if a mutation event is dispatched to a node indicating
											that its parent has changed, the <code>relatedNode</code> will be the changed parent. If an event is instead dispatched to a subtree indicating a node was changed
											within it, the <code>relatedNode</code> <span class="must">must</span> be the changed node. In the case of the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
											event it indicates the <code>Attr</code> node which was modified, added, or removed.</p>

										<p>The <a class="def" href="#glossary-un-initialized-value">un-initialized value</a> of this attribute <span class="must">must</span> be <code>null</code>.</p>
									</dd>
								</dl>
							</dd>


							<dt><strong>Methods</strong></dt>
							<dd>
								<dl>
									<dt><code class="method-name"><a id="events-event-type-initMutationEvent">initMutationEvent</a></code></dt>
									<dd>
										<div class="method">
											<p>Initializes attributes of a <code>MutationEvent</code> object. This method has the same behavior as <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a>.</p>

											<div class="parameters">
												<p><strong>Parameters</strong></p>

												<div class="paramtable">
													<dl>
														<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
														<dd>
															<p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p>
														</dd>

														<dt><code class="parameter-name">relatedNodeArg</code> of type <code>Node</code></dt>
														<dd>
															<p>Specifies <a href="#events-MutationEvent-relatedNode"><code>MutationEvent.relatedNode</code></a>.</p>
														</dd>

														<dt><code class="parameter-name">prevValueArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Specifies <a href="#events-MutationEvent-prevValue"><code>MutationEvent.prevValue</code></a>. This value <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">
																empty string</a>.</p>
														</dd>

														<dt><code class="parameter-name">newValueArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Specifies <a href="#events-MutationEvent-newValue"><code>MutationEvent.newValue</code></a>. This value <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">empty
																string</a>.</p>
														</dd>

														<dt><code class="parameter-name">attrNameArg</code> of type <code>DOMString</code></dt>
														<dd>
															<p>Specifies <a href="#events-MutationEvent-attrName"><code>MutationEvent.attrName</code></a>. This value <span class="may">may</span> be the <a class="def" href="#glossary-empty-string">empty
																string</a>.</p>
														</dd>

														<dt><code class="parameter-name">attrChangeArg</code> of type <code>unsigned short</code></dt>
														<dd>
															<p>Specifies <a href="#events-MutationEvent-attrChange"><code>MutationEvent.attrChange</code></a>. This value <span class="may">may</span> be <code>0</code>.</p>
														</dd>
													</dl>
												</div>
											</div>

											<div><strong>No Return Value</strong></div>

											<div><strong>No Exceptions</strong></div>
										</div>
									</dd>
								</dl>
							</dd>
						</dl>
					</dd>
				</dl>

				<p>The mutation event types are listed below.</p>

				<!-- DOMAttrModified -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMAttrModified"><dfn><a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMAttrModified</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element whose attribute is being modified</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the name of the changed <code>Attr</code> node</li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: the numerical code corresponding to the most applicable
												<a href="#events-MutationEvent-attrChangeType">attrChangeType</a></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>:  the <code>Attr</code> node that has been modified,
												added, or removed.</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: new value of the attribute, if the <code>Attr</code> node
												has been added or modified</li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: previous value of the attribute, if the <code>Attr</code>
												node has been removed or modified</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event after an <code>Attr.value</code> has been modified and after an <code>Attr</code>
								node has been added to or removed from an <code>Element</code>. The <a class="def" href="#glossary-event-target">event target</a> of this event <span class="must">must</span> be the <code>Element</code>
								node where the change occurred. It is implementation dependent whether this event type occurs when the children of the <code>Attr</code> node are changed in ways
								that do not affect the value of <code>Attr.value</code>.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a> event type is defined
								in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMCharacterDataModified -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMCharacterDataModified"><dfn><a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMCharacterDataModified</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>ProcessingInstruction</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: object whose content is being modified</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>: parent node of the object whose content is being
												modified</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: new value of the object</li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: previous value of the object</li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event after <code>CharacterData.data</code> or <code>ProcessingInstruction.data</code>
								have been modified, but the node itself has not been inserted or deleted.  The <a class="def" href="#glossary-event-target">event target</a> of this event <span class="must">must</span>
								be the <code>CharacterData</code> node or the <code>ProcessingInstruction</code> node.</p>

							<p class="warning" id="_45"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMCharacterDataModified"><code>DOMCharacterDataModified</code></a>
								event type is defined in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the
								use of this event type.</p>
						</dd>
					</dl>
				</div>


				<!-- DOMNodeInserted -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMNodeInserted"><dfn><a class="eventtype" href="#event-type-DOMNodeInserted"><code>DOMNodeInserted</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMNodeInserted</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
										<code>ProcessingInstruction</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element which is being inserted</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>:  parent node of the node that has been inserted,
												or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event type when a node other than an <code>Attr</code> node has been added as a child
								of another node.  A <a class="def" href="#glossary-user-agent">user agent</a> <span class="may">may</span> dispatch this event when an <code>Attr</code> node has been added to an <code>Element</code>
								node (see <a href="#DOMNodeInserted-attr">note</a> below). This event <span class="must">must</span> be dispatched after the insertion has taken place. The <a class="def" href="#glossary-event-target">
								event target</a> of this event <span class="must">must</span> be the node being inserted.</p>

							<p class="note" id="DOMNodeInserted-attr"><strong>Note:</strong> for detecting attribute insertion, use the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
								event type instead.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMNodeInserted"><code>DOMNodeInserted</code></a> event type is defined in this specification
								for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMNodeInsertedIntoDocument -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMNodeInsertedIntoDocument"><dfn><a class="eventtype" href="#event-type-DOMNodeInsertedIntoDocument"><code>DOMNodeInsertedIntoDocument</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMNodeInsertedIntoDocument</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
										<code>ProcessingInstruction</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element which is being inserted</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>:  parent node of the node that has been inserted,
												or the <code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a node has been inserted into a document, either through direct insertion
								of the node or insertion of a subtree in which it is contained; a <a class="def" href="#glossary-user-agent">user agent</a> <span class="may">may</span>  treat an <code>Attr</code>
								node as part of an <code>Element</code>'s subtree. This event <span class="must">must</span> be dispatched after the insertion has taken place. The <a class="def" href="#glossary-event-target">
								event target</a> of this event <span class="must">must</span> be the node being inserted. If the node is being directly inserted, the event type <a class="eventtype" href="#event-type-DOMNodeInserted">
								<code>DOMNodeInserted</code></a> <span class="must">must</span> occur before this event type.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMNodeInsertedIntoDocument"><code>DOMNodeInsertedIntoDocument</code></a>
								event type is defined in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the
								use of this event type.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMNodeRemoved -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMNodeRemoved"><dfn><a class="eventtype" href="#event-type-DOMNodeRemoved"><code>DOMNodeRemoved</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMNodeRemoved</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
										<code>ProcessingInstruction</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element which is being removed</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>: the parent node of the node being removed, or the
												<code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a node other than an <code>Attr</code> node is being removed from its
								parent node.  A <a class="def" href="#glossary-user-agent">user agent</a> <span class="may">may</span> dispatch this event when an <code>Attr</code> node is being removed from its <code>ownerElement</code>
								(see <a href="#DOMNodeRemoved-attr">note</a> below). This event <span class="must">must</span> be dispatched before the removal takes place. The <a class="def" href="#glossary-event-target">
								event target</a> of this event <span class="must">must</span> be the node being removed.</p>

							<p class="note" id="DOMNodeRemoved-attr"><strong>Note:</strong> for reliably detecting attribute removal, use the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
								event type instead.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMNodeRemoved"><code>DOMNodeRemoved</code></a> event type is defined
								in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type.
							</p>
						</dd>
					</dl>
				</div>

				<!-- DOMNodeRemovedFromDocument -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMNodeRemovedFromDocument"><dfn><a class="eventtype" href="#event-type-DOMNodeRemovedFromDocument"><code>DOMNodeRemovedFromDocument</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMNodeRemovedFromDocument</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><code>Element</code>, <code>Attr</code>, <code>Text</code>, <code>Comment</code>, <code>CDATASection</code>, <code>DocumentType</code>, <code>EntityReference</code>,
										<code>ProcessingInstruction</code></td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: element which is being removed</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>: the parent node of the node being removed, or the
												<code>ownerElement</code> in the case of <code>Attr</code> nodes</li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>A <a class="def" href="#glossary-user-agent">user agent</a> <span class="must">must</span> dispatch this event when a node is being removed from a document, either through direct removal
								of the node or removal of a subtree in which it is contained; a <a class="def" href="#glossary-user-agent">user agent</a> <span class="may">may</span> treat an <code>Attr</code>
								node as part of an <code>Element</code>'s subtree. This event <span class="must">must</span> be dispatched before the removal takes place. The <a class="def" href="#glossary-event-target">event
								target</a> of this event type <span class="must">must</span> be the node being removed. If the node is being directly removed, the event type <a class="eventtype" href="#event-type-DOMNodeRemoved">
								<code>DOMNodeRemoved</code></a> <span class="must">must</span> occur before this event type.</p>

							<p class="note"><strong>Note:</strong> for reliably detecting attribute removal, use the <a class="eventtype" href="#event-type-DOMAttrModified"><code>DOMAttrModified</code></a>
								event type instead.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMNodeRemovedFromDocument"><code>DOMNodeRemovedFromDocument</code></a>
								event type is defined in this specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the
								use of this event type.</p>
						</dd>
					</dl>
				</div>

				<!-- DOMSubtreeModified -->
				<div class="event-definition">
					<dl>
						<dt id="event-type-DOMSubtreeModified"><dfn><a class="eventtype" href="#event-type-DOMSubtreeModified"><code>DOMSubtreeModified</code></a></dfn></dt>
						<dd>
							<table border="0" summary="This table contains information about the semantics of the given event type" cellpadding="2" cellspacing="0">
								<tr>
									<th>Type</th>
									<td><strong><code>DOMSubtreeModified</code></strong></td>
								</tr>
								<tr>
									<th>Interface</th>
									<td><a href="#events-MutationEvent"><code>MutationEvent</code></a></td>
								</tr>
								<tr>
									<th>Sync / Async</th>
									<td>Sync</td>
								</tr>
								<tr>
									<th>Bubbles</th>
									<td>Yes</td>
								</tr>
								<tr>
									<th>Target</th>
									<td><a class="def" href="#glossary-defaultView"><code>defaultView</code></a>, <code>Document</code>, <code>DocumentFragment</code>, <code>Element</code>, <code>Attr</code>
									</td>
								</tr>
								<tr>
									<th>Cancelable</th>
									<td>No</td>
								</tr>
								<tr>
									<th>Default action</th>
									<td>none</td>
								</tr>
								<tr>
									<th>Context info</th>
									<td>
										<ul>
											<li><a href="#events-event-type-target"><code class="attribute-name">Event.target</code></a>: parent node of subtree being modified</li>
											<li><a href="#events-MutationEvent-attrName"><code class="attribute-name">MutationEvent.attrName</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-attrChange"><code class="attribute-name">MutationEvent.attrChange</code></a>: <code>0</code></li>
											<li><a href="#events-MutationEvent-relatedNode"><code class="attribute-name">MutationEvent.relatedNode</code></a>: <code>null</code></li>
											<li><a href="#events-MutationEvent-newValue"><code class="attribute-name">MutationEvent.newValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
											<li><a href="#events-MutationEvent-prevValue"><code class="attribute-name">MutationEvent.prevValue</code></a>: the <a class="def" href="#glossary-empty-string">empty
												string</a></li>
										</ul>
									</td>
								</tr>
							</table>

							<p>This is a general event for notification of all changes to the document. It can be used instead of the more specific mutation and mutation name events. It <span class="may">may</span> be
								dispatched after a single modification to the document or, at the implementation's discretion, after multiple changes have occurred. The latter case <span class="should">should</span> generally
								be used to accommodate multiple changes which occur either simultaneously or in rapid succession. The target of this event <span class="must">must</span> be the lowest common parent of the
								changes which have taken place. This event <span class="must">must</span> be dispatched after any other events caused by the mutation(s) have occurred.</p>

							<p class="warning"><strong>Warning!</strong> the <a class="eventtype" href="#event-type-DOMSubtreeModified"><code>DOMSubtreeModified</code></a> event type is defined in this
								specification for reference and completeness, but this specification <a class="def" href="#glossary-deprecated">deprecates</a> the use of this event type.</p>
						</dd>
					</dl>
				</div>

			</div>
		</div>

	</div>

	<!-- Section: Keyboard and key values ========================================================-->

	<h1><a id="keys" href="#keys">6. Keyboard events and key values</a></h1>
	<div>

		<p>This section contains necessary information regarding keyboard events:</p>

		<ul>
			<li>Explanation of keyboard layout, mapping, and key values.</li>
			<li>Relations between keys, such as <a class="def" href="#glossary-dead-key">dead keys</a> or modifiers keys.</li>
			<li>Relations between keyboard events and their default actions.</li>
			<li>The set of key values, and guidelines on how to extend this set.</li>
		</ul>

		<p class="note"><strong>Note:</strong> This section uses Serbian and Kanji characters which could be misrepresented or unavailable in the PDF version or printed
			version of this specification.</p>

		<h2><a id="keyboard-input" href="#keyboard-input">6.1 Keyboard Input</a></h2>
		<div>

			<p><em>This section is informative</em></p>

			<p>The relationship of each key to the complete keyboard has three separate aspects, each of which vary among different models and configurations of keyboards, particularly
				for locale-specific reasons:</p>

			<ul>
				<li><strong>Visual markings:</strong> the labels (or <em>legends</em>) that mark each key</li>
				<li><strong>Mechanical layout:</strong> the dimensions, size, and placement of the physical keys on the keyboard</li>
				<li><strong>Functional mapping:</strong> the abstract key-value association of each key.</li>
			</ul>

			<p>This specification only defines the functional mapping, in terms of <a href="#keys-keyvalues">key values</a>, but briefly describes <a href="#key-legends">key legends</a>
				and <a href="#keyboard-layout">keyboard layout</a> for background.</p>

			<h3><a id="key-legends" href="#key-legends">6.1.1 Key Legends</a></h3>
			<div>

				<p><em>This section is informative</em></p>

				<p>The visual markings normally consist of one or more characters which a keystroke on that key will produce (such as <code class="glyph">'F'</code>, <code class="glyph">
					'8'</code>, or <code class="glyph">'ш'</code>), or names or symbols which indicate that key's function (such as an upward-pointing arrow <code class="glyph">&#x21E7;</code> indicating
					<code class="key">'Shift'</code>, or the string <code>'Enter'</code>).  Keys are often referred to by this marking (e.g., <q>Press the <code>
					'Shift'</code> and <code>'F'</code> keys.</q>).  However, the visual appearance of the key has no bearing on its digital representation, and
					in many configurations <span class="may">may</span> be completely inaccurate; even the control and function keys, such as <code>'Enter'</code>, <span class="may">may</span> be mapped to different
					functionality, or even mapped as character keys.</p>

				<p>For historical reasons, the character keys are typically marked with the capital-letter equivalents of the character value they produce, e.g., the <code>
					'F'</code> key (the key marked with the glyph <code class="glyph">'F'</code>), will produce the character value <code class="char">'f'</code> when pressing
					without an active modifier key (<code class="key">'Shift'</code>) or modifier state (<code class="key">'CapsLock'</code>).</p>

				<p class="note"><strong>Note:</strong> the key legends for function keys do not normally produce any characters, although the symbol might have a Unicode equivalent; for example, the <code
					class="key">'Shift'</code> key might bear the symbol <code class="glyph">&#x21E7;</code>, which has the <a class="def" href="#glossary-unicode-code-point">Unicode code point</a> <code class="char">
					'\u21E7'</code>, but pressing the <code class="key">'Shift'</code> key will not produce this character value, and there is no <a class="def" href="#glossary-unicode-code-point">
					Unicode code point</a> for <code class="key">'Shift'</code>.</p>
			</div>

			<h3><a id="keyboard-layout" href="#keyboard-layout">6.1.2 Keyboard Layout</a></h3>
			<div>

				<p><em>This section is informative</em></p>

				<p>As with the key labels, the physical layout of the keys on the keyboard does not not affect the digital key value for any given key.  It is outside the scope of
					this specification to provide key values based on keyboard layout, particularly since there are so many possible layouts for a keyboard, and since users can change
					the mapping of keys in their operating system, e.g., by selecting a Dvorak <a class="def" href="#glossary-key-mapping">key mapping</a>.</p>

				<p>To illustrate the concept of keyboard layout mappings and its relation with keyboard events and key values, on the same keyboard (a PC/AT US keyboard), pressing
					the key labeled <code>Q</code> (with no modifier key activated) will produce different key values based on the mapping.  With a typical US <a class="def" href="#glossary-qwerty">
					QWERTY</a> keyboard layout mapping, it will produce the character <code class="glyph">'q'</code> (<code class="char">'\u0071'</code>, Latin Small Letter Q).  If
					the keyboard layout mapping is switched to a French mapping, pressing the same key will produce the character <code class="glyph">'a'</code> (<code class="char">'\u0041'</code>,
					Latin Capital Letter A).  If the keyboard layout mapping is switched to a Serbian (Cyrillic) mapping, pressing the same key will produce the character <code class="glyph">
					'&#x459;'</code> (<code class="char">'\u0459'</code>, Cyrillic Small Letter LJE).</p>

				<p>However, the physical layout of the keys <span class="may">may</span> be of interest to content authors developing games or other applications in which the location of the keys has an ergonomic
					relationship as the desired user interface controls, with little or no attention paid to the representational value of the key itself.  For example, many games
					might use the keys <code class="key">'A'</code>, <code class="key">'S'</code>, <code class="key">'D'</code>, and <code class="key">'W'</code> for <code class="key">
					'left'</code>, <code class="key">'down'</code>, <code class="key">'right'</code>, and <code class="key">'up'</code> respectively.  Content authors <span class="should">should</span>
					provide a means for the user to assign such controller keys to a custom setting appropriate to their keyboard configurations.  Implementations <span class="may">may</span> provide a means
					for the user to more comprehensively map the keyboard to their customized keyboard layout, but this is beyond the scope of this specification.</p>

				<p class="note"><strong>Note:</strong> Don't confuse key values with <em>scan codes</em>, which are the low-level hexadecimal signals produced for each key
					by the keyboard driver software. <em>Scan codes</em> are mapped at the operating system to a <acronym title="Virtual Key">VK</acronym> (<q>virtual key</q>), which
					in turn might be mapped to the user-defined key configuration.  Key values are a high-level abstraction of that final mapping.</p>

				<h4><a id="keyboard-desktop" href="#keyboard-desktop">6.1.2.1 Desktop and Laptop Keyboards</a></h4>
				<div>

					<p>In the case where a content author wishes to rely on the mechanical layout of a desktop or laptop keyboard, this specification suggests the keyboard configuration
						specified in ISO/IEC 9995, parts 2 and 3 [<cite><a class="informative" href="#references-ISO-9995-2-3">ISO-9995-2/3</a></cite>], which defines a common layout for
						primary, secondary, and auxiliary <a class="def" href="#glossary-key-mapping">key mappings</a> on a typical alphanumeric keyboard, as a common layout appropriate
						to some international uses.</p>

					<p class="note"><strong>Note:</strong> This keyboard layout is still, in essence, a <a class="def" href="#glossary-qwerty">QWERTY</a> keyboard, and will not
						match the keyboards or configurations of many users.  Content authors cannot rely upon any particular configuration, and are expected to create content in an internationalized
						and localizable manner.</p>

					<div id="figure-keyboard" class="figure" style="text-align: center">
						<object type="image/svg+xml" data="images/ISOIEC-9995-3-FCD-2009A.svg" width="900" height="300">
							<img src="images/ISOIEC-9995-3-FCD-2009A.png" alt="A graphical depiction of an ISO standard defining layouts of computer keyboards, ISO/IEC 9995, parts 2 and 3" />
						</object>
						<p><em>Figure 4: A graphical depiction of an ISO standard defining layouts of computer keyboards, ISO 9995, parts 2 and 3</em></p>
					</div>
				</div>

				<h4><a id="keyboard-mobile" href="#keyboard-mobile">6.1.2.2 Mobile Keypads</a></h4>
				<div>

					<p>In the case where a content author wishes to rely on the mechanical layout of a mobile keypad, this specification suggests the keyboard configuration specified
						in ISO/IEC 9995-8:2006 [<cite><a class="informative" href="#references-ISO-9995-8">ISO-9995-8</a></cite>], which defines a numeric keypad layout and secondary assignment
						of Unicode characters in the range <abbr title="a-z">\u0061..\u007A</abbr> to the number keys <code>2</code> through <code>9</code>, as a common layout appropriate to some
						international uses.</p>

					<p class="note"><strong>Note:</strong> This keypad layout, and in particular the distribution of letters is for English devices, and will not match the keypads
						or configurations of many users.  Content authors cannot rely upon any particular configuration, and are expected to create content in an internationalized and
						localizable manner.</p>

					<div id="figure-numberpad" class="figure" style="text-align:center">
						<object type="image/svg+xml" data="images/ISOIEC-9995-8-2006.svg" width="180" height="240">
							<img src="images/ISOIEC-9995-8-2006.png" alt="A graphical depiction of an ISO standard defining layouts of numeric keypads, with distribution of letters on the keys, ISO/IEC 9995-8:2006" />
						</object>
						<p><em>Figure 5: A graphical depiction of an ISO standard defining layouts of numeric keypads, with distribution of letters on the keys, ISO/IEC 9995-8:2006</em></p>
					</div>
				</div>

				<h4><a id="remote-control" href="#remote-control">6.1.2.3 Media Remote Controls</a></h4>
				<div>

					<p>Many keyboards contain special keys to control media functions.  Increasingly, many media devices, especially televisions, are Web-enabled.  Hybrid keyboard/remote-control
						devices are becoming more common.  To meet the needs of these hybrid Web/media devices, this specification defines keys that are common as remote control buttons,
						in addition to traditional keyboard keys.</p>

					<p>Because of the smaller form factor, keys (or buttons) on a remote control will often be modal, with one key performing different functions based on the context
						of the on-screen content.  Additionally, many keys serve as toggles, to change back and forth between two or more states (see toggling keys).</p>

					<div id="figure-remotecontrol" class="figure" style="text-align:center">
						<object type="image/svg+xml" data="images/remote-control.svg" width="102" height="422">
							<img src="images/remote-control.png" alt="A graphical depiction of a media remote control, with buttons mapped to specific keys values" />
						</object>
						<p><em>Figure 6: A graphical depiction of a media remote control, with buttons mapped to specific keys values</em></p>
					</div>

				</div>

				<h4><a id="keyboard-chording-virtual" href="#keyboard-chording-virtual">6.1.2.4 Virtual Keyboards and Chording Keyboards</a></h4>
				<div>

					<p>Virtual keyboards are software-based sets of keys, in a variety of different arrangements, commonly found on touch-screen devices; they are often modal, with the
						ability to switch between different dynamic sets of keys, such as alphabetic, numeric, or symbolic keys.  Because of the lack of physical constraints, these keyboards
						<span class="may">may</span> present the widest range of characters, including emoticons and other symbols, and <span class="may">may</span> have keys not represented by Unicode [<a href="#references-Unicode">Unicode</a>]
						or by the <a href="#key-values">key values set</a> defined in this specification.  Wherever possible, however, virtual keyboards <span class="should">should</span> produce the normal range
						of keyboard events and values, for ease of authoring and compatibility with existing content.</p>

					<p>Chording keyboards, also know as chorded keysets or chord keyboards, are key input devices which produce values by pressing several keys in combination or sequence,
						normally to simulate a full range of characters or commands on a reduced set of keys, often for single-handed use.  A chording keyboard <span class="may">may</span> have additional mode
						keys to switch between key values, and the number and type of keys pressed to produce a key value will vary, but the final key values produced by such keyboards
						<span class="should">should</span> match the range of key values described in this specification.</p>

					<p>For these and other alternative modal keyboards, the key values <a href="#key-Alphanumeric"><code class="key">'Alphanumeric'</code></a>, <a href="#key-CapsLock">
						<code class="key">'CapsLock'</code></a>, <a href="#key-NumLock"><code class="key">'NumLock'</code></a>, and <a href="#key-SymbolLock"><code class="key">
						'SymbolLock'</code></a> are <span class="recommended">recommended</span> for the keys which switch between different modes.</p>

				</div>

			</div>

		</div>

		<h2><a id="keys-keyvalues" href="#keys-keyvalues">6.2 Key Values</a></h2>
		<div>

			<p>A key value is a <code>DOMString</code> that can be used to indicate any given key on a keyboard, regardless of position or state, by the value it produces.  These
				key values <span class="may">may</span> be used as return values for keyboard events generated by the implementation, or as input values by the content author to specify desired input (such
				as for keyboard shortcuts).  This specification defines a set of common key values (called the <a href="#key-values">Key Values Set</a>), and rules for production
				of new key values.</p>

			<p>Key values can be used to detect the value of a key which has been pressed, using the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> or
				<a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attributes.  Content authors can retrieve the <a class="def" href="#glossary-character-value">
				character value</a> of upper- or lower-case letters, number, symbols, or other character-producing keys, and also the <a class="def" href="#glossary-key-value">key
				value</a> of control keys, modifier keys, function keys, or other keys that do not generate characters; these values can be used for monitoring particular
				input strings, for detecting and acting on modifier key input in combination with other inputs (such as a mouse), for creating virtual keyboards, or for any number
				of other purposes.</p>

			<p>Key values can also be used by content authors in string comparisons, as values for markup attributes (such as the HTML <code>accesskey</code>) in conforming <a
				class="def" href="#glossary-host-language">host languages</a>, or for other related purposes.   A conforming <a class="def" href="#glossary-host-language">host language</a>
				<span class="should">should</span> allow content authors to use either of the two equivalent string values for a key value: the <a class="def" href="#glossary-character-value">character value</a>,
				or the <a class="def" href="#glossary-key-value">key value</a>.</p>

			<p class="note"><strong>Note:</strong> While implementations will use the most relevant value for a key independently of the platform or keyboard layout mappings,
				content authors can not make assumptions on the ability of keyboard devices to generate them.  When using keyboard events and key values for shortcut-key combinations,
				content authors can <q>consider using numbers and function keys (F4, F5, and so on) instead of letters</q> ([<cite><a class="informative" href="#references-DWW95">DWW95</a></cite>])
				given that most keyboard layouts will provide keys for those.</p>

			<p>A key value does not indicate a specific key on the physical keyboard, nor does it reflect the character printed on the key; a key
				value indicates the current value of the event with consideration to the current state of all active keys and key input modes (including shift modes and <a class="def"
				href="#glossary-dead-key">dead keys</a>), as reflected in the operating-system mapping of the keyboard and reported to the implementation.  In other words, the
				key value for the key marked <code class="glyph">'O'</code> on a <a class="def" href="#glossary-qwerty">QWERTY</a> keyboard has the key value <code class="key">'o'</code> in an unshifted
				state, <code class="key">'O'</code> in a shifted state, <code class="key">'&#xF6;'</code> in an unshifted state during a dead-key operation to add an umlaut diacritic, and <code class="key">'&#xD6;'</code>
				in a shifted state during a dead-key operation to add an umlaut diacritic.  Because a user can map their keyboard to an arbitrary custom configuration, the content
				author is encouraged not to assume that a relationship exists between the shifted and unshifted states of a key and the majuscule form (uppercase or capital letters)
				and minuscule form (lowercase or small letters) of a character representation, but is encouraged instead to use the value of the <a href="#events-KeyboardEvent-key">
				<code>KeyboardEvent.key</code></a> or <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attributes.  The keyboard depicted in <a href="#figure-keyboard">
				Figure 4</a> illustrates one possible set of <a class="def" href="#glossary-key-mapping">key mappings</a> on one possible keyboard layout; many others exist,
				both standard and idiosyncratic.</p>

			<p>It is also important to note that there is not a one-to-one relationship between key event states and key values.  A particular key value might be associated with
				multiple keys; for example, many standard keyboards contain more than one key with the <code class="key">'Shift'</code> key value (normally distinguished by the
				<a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a> values <a href="#events-DOM_KEY_LOCATION_LEFT"><code class="constant-name">DOM_KEY_LOCATION_LEFT</code></a>
				and <a href="#events-DOM_KEY_LOCATION_RIGHT"><code class="constant-name">DOM_KEY_LOCATION_RIGHT</code></a>) or <code class="key">'8'</code> key value (normally
				distinguished by the <a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a> values <a href="#events-DOM_KEY_LOCATION_STANDARD"><code class="constant-name">
				DOM_KEY_LOCATION_STANDARD</code></a> and <a href="#events-DOM_KEY_LOCATION_NUMPAD"><code class="constant-name">DOM_KEY_LOCATION_NUMPAD</code></a>), and user-configured
				custom keyboard layouts <span class="may">may</span> duplicate any key value in multiple key-state scenarios (note that <a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a>
				is intended for standard keyboard layouts, and cannot always indicate a meaningful distinction).</p>

			<p>Similarly, a given key event state <span class="may">may</span> have different key values.  For most keys which represent characters, such as the letter <code class="glyph">'m'</code> or the question
				mark (<code class="glyph">'?'</code>), the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> and <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a>
				attributes will be the same.  However, for <em>printing control characters</em>, such as the backspace/back key, the <em>character value</em> is distinct from the
				<em>key value</em>, with different values for the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> and <a href="#events-KeyboardEvent-char"><code>
				KeyboardEvent.char</code></a> attributes; see the <a href="#key-values">Key Values Set</a> for more details.  Certain keys in some states, called <em>modifier keys</em>
				or <em>control keys</em>, have only a <a class="def" href="#glossary-key-value">key value</a> and no <a class="def" href="#glossary-character-value">character value</a>,
				such as the volume mute key, which has the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute value <code class="key">'VolumeMute'</code>
				and the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attribute value the <a class="def" href="#glossary-empty-string">empty string</a>.</p>

			<p>Finally, the meaning of any given character representation is context-dependent and complex.  For example, in some contexts, the asterisk (star) glyph (<code
				class="glyph">'*'</code>) represents a footnote or emphasis (when bracketing a passage of text); however, in some documents or executable programs it is equivalent
				to the mathematical multiplication operation, while in other documents or executable programs, that function is reserved for the multiplication symbol (<code class="glyph">'&#xD7;'</code>,
				Unicode value <code class="char">'\u00D7'</code>) or the Latin small letter <code>'x'</code> (due to the lack of a multiplication key on many keyboards
				and the superficial resemblance of the glyphs <code class="glyph">'&#xD7;'</code> and <code class="glyph">'x'</code>).  Thus, the semantic meaning or function of
				character representations is outside the scope of this specification.</p>

			<h3><a id="keys-unicode" href="#keys-unicode">6.2.1 Key Values and Unicode</a></h3>
			<div>

				<p>The <a class="def" href="#glossary-character-value">character values</a> described in this specification are Unicode [<a href="#references-Unicode">Unicode</a>]
					codepoints, and as such, have certain advantages.</p>

				<p>The most obvious advantage is that it allows the content author to use the full range of internationalized language functionality available in the implementation,
					regardless of the limitations of the text input devices on the system.  This opens up possibilities for virtual keyboards and Web-application-based <a class="def"
					href="#glossary-ime">input method editors</a>.</p>

				<p>Another benefit is that it allows the content author to utilize the Unicode general category properties programmatically.</p>

				<p>With legacy keyboard event attributes such as <code class="attribute-name">keyCode</code> and <code class="attribute-name">charCode</code>, content authors are forced to
					filter key input using cryptic, platform- and implementation-specific numeric codes, with poor internationalization, such as the following pseudocode:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<pre><code>
if ( ( event.charCode == 45 || event.charCode == 36 ) ||
     ( event.charCode &gt;= 48 &amp;&amp; event.charCode &lt;= 57 ) ||
     ( event.charCode &gt;= 96 &amp;&amp; event.charCode &lt;= 105 ) ) {
   <span class="comment">// minus sign, dollar sign, and numeric characters from keyboard and numpad</span>
   <span class="comment">// ...</span>
}
else if ( ( event.charCode &gt;= 65 &amp;&amp; event.charCode &lt;= 90 ) ||
          ( event.charCode &gt;= 97 &amp;&amp; event.charCode &lt;= 122 ) ) {
   <span class="comment">// alphabetic characters from Latin character set, A-Z, a-z</span>
   <span class="comment">// ...</span>
}
else {
   <span class="comment">// ...</span>
}
</code></pre>
				</div>

				<p>With key values and regular expressions, however, content authors can support selective and intuitive ranges for key-based input, in a cross-platform manner with
					advanced internationalization support, such as the following pseudocode:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<pre><code>
if ( event.key == "-" || event.key.match("\p{Sc}") || event.key.match("\p{N}") ) {
   <span class="comment">// minus sign, any currency symbol, and numeric characters (regardless of key location)</span>
   <span class="comment">// ...</span>
}
else if ( event.key.match("\p{L}") ) {
   <span class="comment">// alphabetic characters from any language, upper and lower case</span>
   <span class="comment">// ...</span>
}
else {
   <span class="comment">// ...</span>
}
</code></pre>
				</div>

				<p>In addition, because Unicode categorizes each assigned <a class="def" href="#glossary-unicode-code-point">code point</a> into a group of code points used by a particular
					human writing system, even more advanced capabilities are possible.</p>

				<p class="example"><strong>Example:</strong> A content author can match characters from a particular human script (e.g., Tibetan) using a regular expression such as
					<code>\p{Tibetan}</code>, to filter out other characters, or discover if a <a class="def" href="#glossary-unicode-code-point">code point</a> is in
					a certain code block (range of code points), using a regular expression like <code>\p{InCyrillic}</code>.</p>

				<p>To facilitate this, implementations <span class="should">should</span> support Unicode range detection using regular expressions, in a manner such as the Perl Compatible Regular Expressions
					(PCRE) [<a href="#references-pcre">PCRE</a>].</p>
			</div>

			<h3><a id="keys-Modifiers" href="#keys-Modifiers">6.2.2 Modifier keys</a></h3>
			<div>

				<p>Keyboard input uses modifier keys to change the normal behavior of a key.  Like other keys, modifier keys generate <a class="eventtype" href="#event-type-keydown">
					<code>keydown</code></a> and <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> events, as shown in the example below. Some modifiers are activated
					while the key is being pressed down or maintained pressed such as <code class="key">'Alt'</code>, <code class="key">'Control'</code>, <code class="key">'Shift'</code>,
					<code class="key">'AltGraph'</code>, or <code class="key">'Meta'</code>. Others modifiers are activated depending on their state such as <code class="key">'CapsLock'</code>,
					<code class="key">'NumLock'</code>, or <code class="key">'Scroll'</code>. Change in the state happens when the modifier key is being pressed down. The <a href="#events-KeyboardEvent">
					<code>KeyboardEvent</code></a> interface provides convenient attributes for some common modifiers keys: <a href="#events-KeyboardEvent-ctrlKey"><code>KeyboardEvent.ctrlKey</code></a>,
					<a href="#events-KeyboardEvent-shiftKey"><code>KeyboardEvent.shiftKey</code></a>, <a href="#events-KeyboardEvent-altKey"><code>KeyboardEvent.altKey</code></a>,
					<a href="#events-KeyboardEvent-metaKey"><code>KeyboardEvent.metaKey</code></a>. Some operating systems simulate the <code class="key">'AltGraph'</code> modifier
					key with the combination of the <code class="key">'Alt'</code> and <code class="key">'Control'</code> modifier keys. Implementations are encouraged to use the
					<code class="key">'AltGraph'</code> modifier key.</p>

				<p>The following example describes a possible sequence of events associated with the generation of the Unicode character Q (Latin Capital Letter Q, <a class="def"
					href="#glossary-unicode-code-point">Unicode code point</a> <code class="char">'\u0051'</code>) on a PC/AT US keyboard using a US mapping:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Shift'</code>, <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">
							shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital Letter
							Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital Letter Q
							key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Shift'</code></li>
					</ol>
				</div>

				<p>The following example describes an alternate sequence of keys to the example above, where the <code class="key">'Shift'</code> key is released before the <code
					class="key">'Q'</code> key.  The key value for the key labeled <code class="key">'Q'</code> will revert to its unshifted value for the <a class="eventtype" href="#event-type-keyup">
					<code>keyup</code></a> event:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Shift'</code>, <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">
							shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital Letter
							Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Shift'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'q'</code> (<code class="char">'\u0071'</code>, Latin Small Letter Q key)</li>
					</ol>
				</div>

				<p>The following example describes a possible sequence of keys that does not generate a Unicode character (using the same configuration):</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Control'</code>, ctrlKey</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'v'</code> (<code class="char">'\u0076'</code>, Latin Small Letter
							V key), ctrlKey</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>:  <code class="key">'v'</code> (<code class="char">'\u0076'</code>, Latin Small Letter V
							key), ctrlKey</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Control'</code></li>
					</ol>
				</div>

				<p>In some cases, modifier keys change the key value value for a key event.  For example, on some MacOS keyboards, the  key labeled <code>'delete'</code>
					functions the same as the <code class="key">'Backspace'</code> key on the Windows OS when unmodified, but when modified by the <code class="key">'Fn'</code>
					key, acts as the <code class="key">'Del'</code> key, and the value of the key value will match the most appropriate function of the key in its current modified
					state.</p>

			</div>

			<h3><a id="keys-DeadKeys" href="#keys-DeadKeys">6.2.3 Dead keys</a></h3>
			<div>

				<p>Some keyboard input uses <a class="def" href="#glossary-dead-key">dead keys</a> for the input of composed character sequences. Unlike the handwriting sequence,
					in which users enter the base character first, keyboard input requires to enter a special state when a <a class="def" href="#glossary-dead-key">dead key</a> is
					pressed and emit the character(s) only when one of a limited number of <q>legal</q> base character is entered.</p>

				<p class="note"><strong>Note:</strong> the MacOS and Linux operating systems use input methods to process <a class="def" href="#glossary-dead-key">dead keys</a>.)</p>

				<p>The <a class="def" href="#glossary-dead-key">dead keys</a> are represented in the key values set using combining diacritical marks.   While Unicode combining characters
					always follow the handwriting sequence, with the combining character trailing the corresponding letter, typical deadkey input <span class="may">may</span> reverse the sequence, with the
					combining character before the corresponding letter; for example, the word <em>naïve</em>, using the combining diacritic <em>¨</em>, would be represented sequentially
					in Unicode as <em>nai¨ve</em>, but <span class="may">may</span> be typed <em>na¨ive</em>.  The sequence of keystrokes <code class="char">'\u0302'</code> (Combining Circumflex Accent key) and <code class="char">'\u0065'</code>
					(key marked with the Latin Small Letter E) will likely produce (on a PC/AT french keyboard using a french mapping and without any modifier activated) the Unicode
					character <code class="glyph">'&#xEA;'</code> (Latin Small Letter E With Circumflex), as preferred by the Unicode Normalization Form <em>NFC</em>:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'ê'</code> (<code class="char">'\u00EA'</code>, LATIN SMALL LETTER
							E WITH CIRCUMFLEX)</li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a>: <code class="key">'ê'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'e'</code> (<code class="char">'\u0065'</code>, Latin Small Letter E key)</li>
					</ol>
				</div>

				<p class="note"><strong>Note:</strong> In step 5 above, the key value will <em>not</em> be <code class="key">'e'</code> (Latin Small Letter E key) under normal circumstances
					because the value delivered to the user agent will already be modified by the dead key operation.</p>

				<p>This process might be aborted when a user types an unsupported base character (that is, a base character for which the which the active diacritical mark is not
					available) after pressing a <a class="def" href="#glossary-dead-key">dead key</a>:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'q'</code> (<code class="char">'\u0071'</code>, The Latin Small Letter
							Q key)</li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'q'</code> (<code class="char">'\u0071'</code>, The Latin Small Letter
							Q key)</li>
					</ol>
				</div>
			</div>

			<h3><a id="keys-IME" href="#keys-IME">6.2.4 Input Method Editors</a></h3>
			<div>

				<p>This specification includes a model for <a class="def" href="#glossary-ime">input method editors (IMEs)</a>, through the <a href="#events-compositionevents">CompositionEvent</a>
					interface and events.  However, composition events and keyboard events do not necessarily map as a one-to-one relationship.  As an example, receiving a <a class="eventtype"
					href="#event-type-keydown"><code>keydown</code></a> for the <a href="#key-Accept"><code class="key">'Accept'</code></a> key value does not necessarily imply
					that the text currently selected in the <a class="def" href="#glossary-ime">IME</a> is being accepted, but indicates only that a keystroke happened, disconnected
					from the <a class="def" href="#glossary-ime">IME</a> Accept functionality (which would normally result in a <a class="eventtype" href="#event-type-compositionend">
					<code>compositionend</code></a> event in most <a class="def" href="#glossary-ime">IME</a> systems).  Keyboard events cannot be used to determine the current
					state of the input method editor, which can be obtained through the <a href="#events-CompositionEvent-data"><code>data</code></a> attribute of the <a href="#events-compositionevents">
					CompositionEvent</a> interface.  Additionally, <a class="def" href="#glossary-ime">IME</a> systems and devices vary in their functionality, and in which keys
					are used for activating that functionality, such that the <code class="key">'Convert'</code> and <code class="key">'Accept'</code> keys <span class="may">may</span> be represented
					by other available keys. Keyboard events correspond to the events generated by the input device after the keyboard layout mapping.</p>

				<p class="note"><strong>Note:</strong>  In some implementations or system configurations, some key events, or their values, might be suppressed
					by the <a class="def" href="#glossary-ime">IME</a> in use.</p>

				<p>The following example describes a possible sequence of keys to generate the Unicode character <code class="glyph">'&#x5E02;'</code> (Kanji character, part of CJK Unified Ideographs) using Japanese
					input methods. This example assumes that the input method editor is activated and in the Japanese-Romaji input mode. The keys <code class="key">'Convert'</code>
					and <code class="key">'Accept'</code> <span class="may">may</span> be replaced by others depending on the input device in use and the configuration of the IME, e.g., it can be respectively
					<code class="char">'\u0020'</code> (Space key) and <code class="key">'Enter'</code>.</p>

				<p class="note"><strong>Note:</strong> <code class="glyph">'&#x8A69;'</code> (<q>poem</q>) and <code class="glyph">'&#x5E02;'</code> (<q>city</q>) are homophones, both
					pronounced <q>shi</q>, so the user would use the <code class="key">'Convert'</code> key to select the proper option.</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'s'</code> (<code class="char">'\u0073'</code>, Latin Small Letter
							S key)</li>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'s'</code> (<code class="char">'\u0073'</code>, Latin Small Letter
							S key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'i'</code> (<code class="char">'\u0069'</code>, Latin Small Letter
							I key)</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'i'</code> (<code class="char">'\u0069'</code>, Latin Small Letter
							I key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="key">'&#x8A69;'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="key">'&#x5E02;'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Accept'</code></li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a>: <code class="key">'&#x5E02;'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Accept'</code></li>
					</ol>
				</div>

				<p>IME composition can also be canceled as in the following example, with conditions identical to the previous example.  The key <a href="#key-Cancel"><code class="key">
					'Cancel'</code></a> might also be replaced by others depending on the input device in use and the configuration of the IME, e.g., it could be <code class="char">'\u001B'</code>
					(Escape key).</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'s'</code> (<code class="char">'\u0073'</code>, Latin Small Letter
							S key)</li>
						<li><a class="eventtype" href="#event-type-compositionstart"><code>compositionstart</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'s'</code> (<code class="char">'\u0073'</code>, Latin Small Letter
							S key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'i'</code> (<code class="char">'\u0069'</code>, Latin Small Letter
							I key)</li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'i'</code> (<code class="char">'\u0069'</code>, Latin Small Letter
							I key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="key">'&#x8A69;'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="key">'&#x5E02;'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Convert'</code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Cancel'</code></li>
						<li><a class="eventtype" href="#event-type-compositionupdate"><code>compositionupdate</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-compositionend"><code>compositionend</code></a>: <code class="key">''</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Cancel'</code></li>
					</ol>
				</div>

				<p class="note"><strong>Note:</strong> Some <a class="def" href="#glossary-ime">input method editors</a> (such as on the MacOS operating system) might set an <a class="def" href="#glossary-empty-string">
					empty string</a> to the composition data attribute before canceling a composition.</p>

				<h4><a id="keys-IME_keys" href="#keys-IME_keys">6.2.4.1 Input Method Editor mode keys</a></h4>
				<div>

					<p>Some keys on certain devices are intended to activate <a class="def" href="#glossary-ime">input method editor</a> functionality, or to change the mode of an active
						<a class="def" href="#glossary-ime">input method editor</a>.  Custom keys for this purpose can be defined for different devices or language modes; the keys defined
						in this specification for this purpose are: <code>Alphanumeric</code>, <code>CodeInput</code>, <code>FinalMode</code>, <code>HangulMode</code>, <code>HanjaMode</code>,
						<code>Hiragana</code>, <code>JunjaMode</code>, <code>KanaMode</code>,
						<code>KanjiMode</code>, <code>Katakana</code>, and <code>RomanCharacters</code>.  When one of these keys is pressed, and no <a class="def" href="#glossary-ime">IME</a>
						is currently active, the appropriate <a class="def" href="#glossary-ime">IME</a> is expected to be activated in the mode indicated by the key (if available); if
						an <a class="def" href="#glossary-ime">IME</a> is already active when the key is pressed, the active <a class="def" href="#glossary-ime">IME</a> might change to
						the indicated mode, or a different <a class="def" href="#glossary-ime">IME</a> might be launched, or the might <span class="may">may</span> be ignored, on a device- and application-specific
						basis.</p>

					<p>This specification also defines other keys which are intended for operation specifically with <a class="def" href="#glossary-ime">input method editors</a>: <code>
						Accept</code>, <code>AllCandidates</code>, <code>Cancel</code>, <code>Convert</code>, <code>Compose</code>, <code>FullWidth</code>, <code>HalfWidth</code>, <code>NextCandidate</code>,
						<code>Nonconvert</code>, and <code>PreviousCandidate</code>.  The functions of these keys are not defined in this specification; refer to other resources for details
						on <a class="def" href="#glossary-ime">input method editor</a> functionality.</p>

					<p class="note"><strong>Note:</strong> keys with <a class="def" href="#glossary-ime">input method editor</a> functions are not restricted to that purpose, and can have other device- or implementation-specific
						purposes, as well.</p>
				</div>
			</div>

			<h3><a id="keys-cancelable_keys" href="#keys-cancelable_keys">6.2.5 Default actions and cancelable keyboard events</a></h3>
			<div>

				<p>Canceling the <a class="def" href="#glossary-default-action">default action</a> of a <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event
					<span class="mustnot">must not</span> affect its respective <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> event, but it <span class="must">must</span> prevent the respective <a class="eventtype"
					href="#event-type-keypress"><code>keypress</code></a> event (if supported) from being generated. The following example describes a possible sequence of keys
					to generate the Unicode character Q (Latin Capital Letter Q) on a PC/AT US keyboard using a US mapping:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Shift'</code>, <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">
							shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital
							Letter Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li>
							<em>The <a class="def" href="#glossary-default-action">default action</a> of the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event is
							prevented, e.g., by invoking <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> during the dispatch of the <a class="eventtype"
							href="#event-type-keydown"><code>keydown</code></a> event object</em></li>
						<li><em>No <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> event is generated</em></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital Letter
							Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Shift'</code></li>
					</ol>
				</div>

				<p>If the key is a modifier key, the keystroke <span class="must">must</span> still be taken into account for the modifiers states. The following example describes a possible sequence of keys
					to generate the Unicode character Q (Latin Capital Letter Q) on a PC/AT US keyboard using a US mapping:</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Shift'</code>, <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">
							shiftKey</a></code></li>
						<li><em>The <a class="def" href="#glossary-default-action">default action</a> of the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event is
							prevented, e.g., by invoking <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> during the dispatch of the <a class="eventtype"
							href="#event-type-keydown"><code>keydown</code></a> event object</em></li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital
							Letter Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a>: <code class="key">'Q'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Q'</code> (<code class="char">'\u0051'</code>, Latin Capital Letter
							Q key), <code class="attribute-name"><a href="#events-MouseEvent-shiftKey">shiftKey</a></code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'Shift'</code></li>
					</ol>
				</div>

				<p>If the key is part of a sequence of several keystrokes, whether it is a <a class="def" href="#glossary-dead-key">dead key</a> or it is contributing to an Input
					Method Editor sequence, the keystroke <span class="must">must</span> be ignored (not taken into account) only if the <a class="def" href="#glossary-default-action">default action</a> is
					canceled on the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event. Canceling a <a class="def" href="#glossary-dead-key">dead key</a>
					on a <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> event has no effect on <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a>
					events (if supported). The following example uses the keystrokes <code class="char">'\u0302'</code> (Combining Circumflex Accent key) and the key marked <code class="key">
					'e'</code> (<code class="char">'\u0065'</code>, Latin Small Letter E key) (on a PC/AT french keyboard using a french mapping and without any modifier activated):</p>

				<div class="example">
					<p><strong>Example:</strong></p>

					<ol>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><em>The <a class="def" href="#glossary-default-action">default action</a> of the <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> event is
							prevented, e.g., by invoking <a href="#events-event-type-preventDefault"><code>Event.preventDefault()</code></a> during the dispatch of the <a class="eventtype"
							href="#event-type-keydown"><code>keydown</code></a> event object</em></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="char">'\u0302'</code> (Combining Circumflex Accent key)</li>
						<li><a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>: <code class="key">'é'</code> (<code class="char">'\u00E9'</code>, LATIN SMALL LETTER
							E WITH ACUTE)</li>
						<li><a class="eventtype" href="#event-type-keypress"><code>keypress</code></a>: <code class="key">'é'</code></li>
						<li><a class="eventtype" href="#event-type-keyup"><code>keyup</code></a>: <code class="key">'é'</code></li>
					</ol>
				</div>
			</div>

			<h3><a id="keys-Guide" href="#keys-Guide">6.2.6 Guidelines for selecting and defining key values</a></h3>
			<div>

				<p><strong>This section is normative.</strong></p>

				<p>The list of key values contained in this specification is not exhaustive, and input devices <span class="may">may</span> have to define their own key values. Consider the current function
					of the key (i.e., with modifiers), taking into consideration the keyboard layout mapping in use, to determine if the key is represented by the set of defined key
					values, if a corresponding Unicode character exists from which a key value <span class="may">may</span> be derived, or if a new key value <span class="must">must</span> be defined.  The following algorithm determines
					the <em>key value</em> and <em>character value</em> to use:</p>

				<ol class="algo" id="key-algorithm">
					<li>If the primary current function of the key is to generate a character, then:
						<ol class="algo">
							<li>If there exists an appropriate character in the <a href="#keys-keyvalues">key values set</a>, then:
								<ol class="algo">
									<li>the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute <span class="must">must</span> be a string consisting of the <em>key value</em> of that character; and</li>
									<li>the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attribute <span class="must">must</span> be a string consisting of the <em>char value</em> of that character.</li>
								</ol>
							</li>
							<li>If there is no appropriate key value in the <a href="#keys-keyvalues">key values set</a>, and there exists an appropriate <a class="def" href="#glossary-unicode-code-point">
								Unicode code point</a>, then:
								<ol class="algo">
									<li>the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute <span class="must">must</span> be a string consisting of the <em>char value</em> of that character; and</li>
									<li>the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attribute <span class="must">must</span> be a string consisting of the <em>char value</em> of that character.</li>
								</ol>
							</li>
						</ol>
					</li>
					<li>If the primary current function of the key is to serve as a function key, then:
						<ol class="algo">
							<li>If there exists an appropriate key value in the <a href="#keys-keyvalues">key values set</a>, then:
								<ol class="algo">
									<li>the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute <span class="must">must</span> be a string consisting of the <em>key value</em> of that character; and</li>
									<li>the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> attribute <span class="must">must</span> be the <a class="def" href="#glossary-empty-string">empty string</a>.</li>
								</ol>
							</li>
							<li>If there is no appropriate key value in the <a href="#keys-keyvalues">key values set</a>, then a key value <span class="must">must</span> be devised.  The key value <span class="should">should</span> be as human friendly
								as possible and <span class="must">must</span> not contain whitespace characters.  The value <span class="must">must</span> be composed only of characters in the ranges
								(<abbr title="0-9"><code class="char">'\u0030'</code>..<code class="char">'\u0039'</code></abbr>),
								(<abbr title="A-Z"><code class="char">'\u0041'</code>..<code class="char">'\u005A'</code></abbr>), or
								(<abbr title="a-z"><code class="char">'\u0061'</code>..<code class="char">'\u007A'</code></abbr>), and <span class="must">must</span> begin with a character in the range
								(<abbr title="A-Z"><code class="char">'\u0041'</code>..<code class="char">'\u005A'</code></abbr>).
							</li>
						</ol>
					</li>
				</ol>

				<div class="example">
					<p><strong>Examples:</strong></p>

					<ul>
						<li>On a PC/AT US keyboard with a right-handed single-hand Dvorak <a class="def" href="#glossary-key-mapping">key mapping</a>, the key labeled <code class="key">
							'Q'</code> maps to the key values <code class="key">'5'</code> (unmodified) and <code class="key">'%'</code> (shifted).  The primary function of this key
							is to generate the character <code class="key">'5'</code> (<code class="char">'\u0035'</code>).  Since this character is a character (in Unicode general category
							<abbr title="Number, Decimal Digit">Nd</abbr>), the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> and <a href="#events-KeyboardEvent-char">
							<code>KeyboardEvent.char</code></a> attribute values for the unmodified key will be <code class="key">'5'</code>.</li>
						<li>On a French PC keyboard with a standard French mapping, the primary function of the <code class="key">'^'</code> key is as a <a class="def" href="#glossary-dead-key">
							dead key</a> for the circumflex diacritical mark.  This corresponds to the combining Unicode character <code class="char">'\u0302'</code>.  Since this character
							is in general category
							<abbr title="Mark, Nonspacing">Mn</abbr>, the key value will be <code class="char">'\u0302'</code>.</li>
						<li>On a Korean PC keyboard with a standard Korean mapping, the primary function of the <code class="key">'Ha/En'</code> key is to switch between Hangul and English
							input.  The predefined key value list has an appropriate entry for this key, <code class="key">'HangulMode'</code>, so this will be the key value.</li>
						<li>On some models of mobile devices, the primary function of the key with a picture of a calendar on it is to launch the calendaring program. Since there is no Unicode
							character that corresponds to this function, and there is no appropriate entry in the predefined key value list, a new value can be devised, such as <code class="key">
							'Calendar'</code>.</li>
					</ul>
				</div>
			</div>

			<h3><a id="key-values" href="#key-values">6.2.7 Key Values Set</a></h3>
			<div>

				<p>This section defines a list of key values which implementations <span class="must">must</span> support, at a minimum, in addition to support for the full range of Unicode [<a href="#references-Unicode">Unicode</a>]
					codepoints.  Implementations <span class="may">may</span> support additional key values, in a manner conforming to the <a href="#keys-Guide">guidelines for selecting and defining key values</a>.
					Each key value defines one or both of the following: a <a class="def" href="#glossary-character-value">character value</a> and a <a class="def" href="#glossary-key-value">
					key value</a>.  The <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute of an event <span class="must">must</span> always contain one of these control key
					or character values (even if the value is <a href="#key-Unidentified"><code class="key">'Unidentified'</code></a>), and the <a href="#events-KeyboardEvent-char">
					<code>KeyboardEvent.char</code></a> attribute <span class="must">must</span> have a value if the key represents a printable character.  If the key represents one of the set of printable
					control characters which has a Unicode character entry, such as the tab key, the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> attribute
					<span class="must">must</span> have the key value (e.g., <a href="#key-Tab"><code class="key">'Tab'</code></a>), while the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a>
					attribute <span class="must">must</span> have the Unicode character value equivalent (e.g., <a href="#key-U-0009"><code class="char">'\u0009'</code></a>).  This affords content authors
					the opportunity to deal with the key as a control key or as direct input into the text stream.</p>

				<p>Implementations that are unable to identify a key <span class="must">must</span> use the key value <a href="#key-Unidentified"><code class="key">'Unidentified'</code></a>.</p>

				<p class="warning"><strong>Warning!</strong> Conforming implementations <span class="must">must</span> only use this key value when there is no way for the implementation to detect the key value;
					exposing only this value <span class="mustnot">must not</span> indicate a conforming implementation.</p>

				<p>The <a class="def" href="#glossary-key-value">key values</a> defined in this specification are based in part on the sets of keycodes from the <code>java.awt.event.KeyEvent</code>
					interface of the Java Platform, Standard Edition 6 API Specification [<cite><a class="informative" href="#references-KeyEvent">KeyEvent for Java</a></cite>], and
					the <code>System.Windows.Forms.Keys</code> key enumeration of the Microsoft .NET Framework 4.0 Class Library [<cite><a class="informative" href="#references-Keys">Keys
					enumeration for .Net</a></cite>]; the key values for media controllers (e.g. remote controls for television, audio systems, and set-top boxes) are derived in part from the consumer electronics technical
					specifications DTV Application Software Environment [<cite><a href="#references-DASE">DASE</a></cite>], Open Cable Application Platform 1.1.3 [<cite><a href="#references-OCAP">OCAP</a></cite>],
					and ANSI/CEA-2014-B, Web-based Protocol and Framework for Remote User Interface on UPnPTM Networks and the Internet [<cite><a href="#references-WEB4CE">WEB4CE</a></cite>].
					The <a class="def" href="#glossary-character-value">character values</a> defined in this specification are derived from the Unicode standard [<a href="#references-Unicode">Unicode</a>].</p>

				<p class="note"><strong>Note:</strong> The key names <code class="key">'NumPad0'</code>, <code class="key">'NumPad1'</code>, <code class="key">
					'NumPad2'</code>, <code class="key">'NumPad3'</code>, <code class="key">'NumPad4'</code>, <code class="key">'NumPad5'</code>, <code class="key">'NumPad6'</code>,
					<code class="key">'NumPad7'</code>, <code class="key">'NumPad8'</code>, and <code class="key">'NumPad9'</code>, found in some keyboard enumeration sets,
					are not distinguished from other numerical key values in this set; a content author could use the <a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a>
					attribute to discover if a key originated from the numeric keypad.</p>

				<p>Future versions of this specification <span class="may">may</span> include key values not included here, which have become common since the publication of this specification.</p>

				<p>In the following list, character values for printing control characters are described as a character escape, for convenience, using the JavaScript notation for
					escapes.</p>

				<div class="note">
					<p><strong>Note:</strong> There are special internationalization considerations for ECMAScript escaped characters.  CharMod conformance [<cite><a class="normative"
						href="#references-charmod">CharMod</a></cite>] <a href="http://www.w3.org/TR/charmod/#C045">expects</a> the use of code points rather than surrogate pairs in escapes;
						ECMAScript escaped characters use surrogate pairs for characters outside the Basic Multilingual Plane (<code class="char">"\uD84E\uDDC2"</code> for <code class="glyph">'&#x239C2;'</code>,
						a Chinese character meaning <q>untidy</q>), rather than C-style fixed-length characters (<code class="char">"\U000239c2"</code> for <code class="glyph">'&#x239C2;'</code>) or delimited escapes
						such as Numeric Character References (<code>"&amp;#x239C2;"</code>). Characters escaped in this manner:</p>

					<ul>
						<li>are based on UTF-16 encoding, in that it uses surrogate pairs for values outside the Basic Multilingual Plane</li>
						<li>are expressed using surrogate pairs, which makes it difficult for a human to look up the value, and might require unnecessary overhead for machine processing;
							this can also cause problems with software written in the incorrect belief that Unicode is a 16-bit character set</li>
						<li>are problematic for characters on supplementary planes (emoji, or Chinese characters on plane 2), some of which are expected to be input using a keyboard</li>
						<li>are not be suitable for Java or C, which use different escaping mechanisms (could be solved with a normalizing method)</li>
					</ul>
				</div>

				<h4><a id="key-values-list" href="#key-values-list">6.2.7.1 Key Values List</a></h4>
				<div>
					<p>The following list contains the normative list of case-sensitive key values, their character values (where applicable), an informative description of typical usage,
						and an informative categorization.  A conforming implementation of the <a href="#events-KeyboardEvent">KeyboardEvent</a> interface <span class="must">must</span> support at least this set
						of values for use in the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> and <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a>
						attributes, though not all values <span class="may">may</span> be available on all platforms or devices.</p>

					<table class="data-table">
						<tr>
							<th>Key</th>
							<th>Char</th>
							<th>Typical Usage (Informative)</th>
							<th>Category (Informative)</th>
						</tr>

						<tr>
							<td><code id="key-Attn" class="key">'Attn'</code></td>
							<td></td>
							<td>The Attention (Attn) key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Apps" class="key">'Apps'</code></td>
							<td></td>
							<td>Toggle display of available (interactive) application list.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Crsel" class="key">'Crsel'</code></td>
							<td></td>
							<td>The Cursor Select (Crsel) key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Exsel" class="key">'Exsel'</code></td>
							<td></td>
							<td>The Extend Selection (Exsel) key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F1" class="key">'F1'</code></td>
							<td></td>
							<td>The F1 key, a general purpose function key, as index 1.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F2" class="key">'F2'</code></td>
							<td></td>
							<td>The F2 key, a general purpose function key, as index 2.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F3" class="key">'F3'</code></td>
							<td></td>
							<td>The F3 key, a general purpose function key, as index 3.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F4" class="key">'F4'</code></td>
							<td></td>
							<td>The F4 key, a general purpose function key, as index 4.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F5" class="key">'F5'</code></td>
							<td></td>
							<td>The F5 key, a general purpose function key, as index 5.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F6" class="key">'F6'</code></td>
							<td></td>
							<td>The F6 key, a general purpose function key, as index 6.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F7" class="key">'F7'</code></td>
							<td></td>
							<td>The F7 key, a general purpose function key, as index 7.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F8" class="key">'F8'</code></td>
							<td></td>
							<td>The F8 key, a general purpose function key, as index 8.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F9" class="key">'F9'</code></td>
							<td></td>
							<td>The F9 key, a general purpose function key, as index 9.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F10" class="key">'F10'</code></td>
							<td></td>
							<td>The F10 key, a general purpose function key, as index 10.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F11" class="key">'F11'</code></td>
							<td></td>
							<td>The F11 key, a general purpose function key, as index 11.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F12" class="key">'F12'</code></td>
							<td></td>
							<td>The F12 key, a general purpose function key, as index 12.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F13" class="key">'F13'</code></td>
							<td></td>
							<td>The F13 key, a general purpose function key, as index 13.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F14" class="key">'F14'</code></td>
							<td></td>
							<td>The F14 key, a general purpose function key, as index 14.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F15" class="key">'F15'</code></td>
							<td></td>
							<td>The F15 key, a general purpose function key, as index 15.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F16" class="key">'F16'</code></td>
							<td></td>
							<td>The F16 key, a general purpose function key, as index 16.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F17" class="key">'F17'</code></td>
							<td></td>
							<td>The F17 key, a general purpose function key, as index 17.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F18" class="key">'F18'</code></td>
							<td></td>
							<td>The F18 key, a general purpose function key, as index 18.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F19" class="key">'F19'</code></td>
							<td></td>
							<td>The F19 key, a general purpose function key, as index 19.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F20" class="key">'F20'</code></td>
							<td></td>
							<td>The F20 key, a general purpose function key, as index 20.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F21" class="key">'F21'</code></td>
							<td></td>
							<td>The F21 key, a general purpose function key, as index 21.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F22" class="key">'F22'</code></td>
							<td></td>
							<td>The F22 key, a general purpose function key, as index 22.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F23" class="key">'F23'</code></td>
							<td></td>
							<td>The F23 key, a general purpose function key, as index 23.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-F24" class="key">'F24'</code></td>
							<td></td>
							<td>The F24 key, a general purpose function key, as index 24.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-LaunchApplication1" class="key">'LaunchApplication1'</code></td>
							<td></td>
							<td>The Start Application One key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-LaunchApplication2" class="key">'LaunchApplication2'</code></td>
							<td></td>
							<td>The Start Application Two key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-LaunchMail" class="key">'LaunchMail'</code></td>
							<td></td>
							<td>The Start Mail key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-List" class="key">'List'</code></td>
							<td></td>
							<td>Toggle display listing of currently available content or programs.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Props" class="key">'Props'</code></td>
							<td></td>
							<td>The properties (props) key.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Soft1" class="key">'Soft1'</code></td>
							<td></td>
							<td>General purpose virtual function key, as index 1.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Soft2" class="key">'Soft2'</code></td>
							<td></td>
							<td>General purpose virtual function key, as index 2.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Soft3" class="key">'Soft3'</code></td>
							<td></td>
							<td>General purpose virtual function key, as index 3.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Soft4" class="key">'Soft4'</code></td>
							<td></td>
							<td>General purpose virtual function key, as index 4.</td>
							<td class="category">General</td>
						</tr>
						<tr>
							<td><code id="key-Accept" class="key">'Accept'</code></td>
							<td></td>
							<td>The Accept (Commit, OK) key. Accept current option or input method sequence conversion.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Again" class="key">'Again'</code></td>
							<td></td>
							<td>The Again key, to redo or repeat an action.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Enter" class="key">'Enter'</code></td>
							<td></td>
							<td>The Enter key, to activate current selection or accept current input.
								<p class="note"><strong>Note:</strong> This key value is also used for the <code class="key">'Return'</code> (Macintosh numpad) key.</p></td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Find" class="key">'Find'</code></td>
							<td></td>
							<td>The Find key.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Help" class="key">'Help'</code></td>
							<td></td>
							<td>Toggle display of help information.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Info" class="key">'Info'</code></td>
							<td></td>
							<td>Toggle display of information about currently selected context or media.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Menu" class="key">'Menu'</code></td>
							<td></td>
							<td>Toggle display of content or system menu, if available.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Pause" class="key">'Pause'</code></td>
							<td></td>
							<td>Pause the current state or application (as appropriate).</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Play" class="key">'Play'</code></td>
							<td></td>
							<td>Play or resume the current state or application (as appropriate).</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Scroll" class="key">'Scroll'</code></td>
							<td></td>
							<td>The Scroll Lock key, to toggle between scrolling and cursor movement modes.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Execute" class="key">'Execute'</code></td>
							<td></td>
							<td>The Execute key.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Cancel" class="key">'Cancel'</code></td>
							<td><a id="key-U-0018"><code class="char">'\u0018'</code></a></td>
							<td>The Cancel key.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Esc" class="key">'Esc'</code></td>
							<td><a id="key-U-001B"><code class="char">'\u001B'</code></a></td>
							<td>The Escape (Esc) key, to initiate an escape sequence.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Exit" class="key">'Exit'</code></td>
							<td></td>
							<td>Exit current state or current application (as appropriate).</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Zoom" class="key">'Zoom'</code></td>
							<td></td>
							<td>Toggle between full-screen and scaled content, or alter magnification level.</td>
							<td class="category">UI</td>
						</tr>
						<tr>
							<td><code id="key-Separator" class="key">'Separator'</code></td>
							<td></td>
							<td>The Separator key, for context-sensitive text separators.</td>
							<td class="category">Character</td>
						</tr>
						<tr>
							<td><code id="key-Spacebar" class="key">'Spacebar'</code></td>
							<td><a id="key-U-0020"><code class="char">'\u0020'</code></a></td>
							<td>The Space (Spacebar) key (<code class="glyph">'&nbsp;'</code>).</td>
							<td class="category">Character</td>
						</tr>
						<tr>
							<td><code id="key-Add" class="key">'Add'</code></td>
							<td><a id="key-U-002B"><code class="char">'\u002B'</code></a></td>
							<td>The Add key, or plus sign (<code class="glyph">'+'</code>).
								<p class="note"><strong>Note:</strong> the Add key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-Subtract" class="key">'Subtract'</code></td>
							<td><a id="key-U-2212"><code class="char">'\u2212'</code></a></td>
							<td>The Subtract key, or minus sign (<code class="glyph">'−'</code>).
								<p class="note"><strong>Note:</strong> the Subtract key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-Multiply" class="key">'Multiply'</code></td>
							<td><a id="key-U-002A"><code class="char">'\u002A'</code></a></td>
							<td>The Multiply key, or multiplication sign (<code class="glyph">'*'</code>).
								<p class="note"><strong>Note:</strong> the Multiply key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>

								<p class="note"><strong>Note:</strong> This key value can be represented by different characters depending on context, including <code class="char">
								'\u002A'</code> (ASTERISK, <code class="glyph">'*'</code>) or <code class="char">'\u00D7'</code> (MULTIPLICATION SIGN, <code class="glyph">'×'</code>).</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-Divide" class="key">'Divide'</code></td>
							<td><a id="key-U-00F7"><code class="char">'\u00F7'</code></a></td>
							<td>The Divide key, or division sign (<code class="glyph">'÷'</code>).
								<p class="note"><strong>Note:</strong> the Divide key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-Equals" class="key">'Equals'</code></td>
							<td><a id="key-U-003D"><code class="char">'\u003D'</code></a></td>
							<td>The Equals key, or equals sign (<code class="glyph">'='</code>).
								<p class="note"><strong>Note:</strong> the Equals key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-Decimal" class="key">'Decimal'</code></td>
							<td><a id="key-U-2396"><code class="char">'\u2396'</code></a></td>
							<td>The Decimal key, or decimal separator key symbol (<code class="glyph">'.'</code>).
								<p class="note"><strong>Note:</strong> the Decimal key is usually found on the numeric keypad (e.g., the 10-key) on typical 101-key keyboards and usually
									requires the 'NumLock' state to be enabled.</p>
								<p class="note"><strong>Note:</strong> This key value can be represented by different characters due to localization, such as <code class="char">'\u002E'</code>
									(FULL STOP, <code class="glyph">'.'</code>) or <code class="char">'\u00B7'</code> (MIDDLE DOT, <code class="glyph">'·'</code>).</p>
							</td>
							<td class="category">Character / Math</td>
						</tr>
						<tr>
							<td><code id="key-BrightnessDown" class="key">'BrightnessDown'</code></td>
							<td></td>
							<td>The Brightness Down key. Typically controls the display brightness.</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-BrightnessUp" class="key">'BrightnessUp'</code></td>
							<td></td>
							<td>The Brightness Up key. Typically controls the display brightness.</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-Camera" class="key">'Camera'</code></td>
							<td></td>
							<td>The Camera key.</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-Eject" class="key">'Eject'</code></td>
							<td></td>
							<td>Toggle removable media to eject (open) and insert (close) state.</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-Power" class="key">'Power'</code></td>
							<td></td>
							<td>Toggle power state.
								<p class="note"><strong>Note:</strong> Some devices might not expose this key to the operating environment.</p>
							</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-PrintScreen" class="key">'PrintScreen'</code></td>
							<td></td>
							<td>The Print Screen (PrintScrn, SnapShot) key, to initiate print-screen function.</td>
							<td class="category">Device</td>
						</tr>
						<tr>
							<td><code id="key-BrowserFavorites" class="key">'BrowserFavorites'</code></td>
							<td></td>
							<td>The Browser Favorites key.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserHome" class="key">'BrowserHome'</code></td>
							<td></td>
							<td>The Browser Home key, used with keyboard entry, to go to the home page.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserRefresh" class="key">'BrowserRefresh'</code></td>
							<td></td>
							<td>The Browser Refresh key.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserSearch" class="key">'BrowserSearch'</code></td>
							<td></td>
							<td>The Browser Search key.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserStop" class="key">'BrowserStop'</code></td>
							<td></td>
							<td>The Browser Stop key.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserBack" class="key">'BrowserBack'</code></td>
							<td></td>
							<td>Navigate to previous content or page in current history.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-BrowserForward" class="key">'BrowserForward'</code></td>
							<td></td>
							<td>Navigate to next content or page in current history.</td>
							<td class="category">Browser</td>
						</tr>
						<tr>
							<td><code id="key-Left" class="key">'Left'</code></td>
							<td></td>
							<td>The left arrow key, to navigate or traverse leftward.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-PageDown" class="key">'PageDown'</code></td>
							<td></td>
							<td>The Page Down key, to scroll down or display next page of content.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-PageUp" class="key">'PageUp'</code></td>
							<td></td>
							<td>The Page Up key, to scroll up or display previous page of content.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Right" class="key">'Right'</code></td>
							<td></td>
							<td>The right arrow key, to navigate or traverse rightward.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Up" class="key">'Up'</code></td>
							<td></td>
							<td>The up arrow key, to navigate or traverse upward.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-UpLeft" class="key">'UpLeft'</code></td>
							<td></td>
							<td>The diagonal up-left arrow key, to navigate or traverse diagonally up and to the left.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-UpRight" class="key">'UpRight'</code></td>
							<td></td>
							<td>The diagonal up-right arrow key, to navigate or traverse diagonally up and to the right.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Down" class="key">'Down'</code></td>
							<td></td>
							<td>The down arrow key, to navigate or traverse downward.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-DownLeft" class="key">'DownLeft'</code></td>
							<td></td>
							<td>The diagonal down-left arrow key, to navigate or traverse diagonally down and to the left.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-DownRight" class="key">'DownRight'</code></td>
							<td></td>
							<td>The diagonal down-right arrow key, to navigate or traverse diagonally down and to the right.</td>
							<td class="category">Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Home" class="key">'Home'</code></td>
							<td></td>
							<td>The Home key, used with keyboard entry, to go to start of content.</td>
							<td class="category">Edit / Navigation</td>
						</tr>
						<tr>
							<td><code id="key-End" class="key">'End'</code></td>
							<td></td>
							<td>The End key, used with keyboard entry to go to the end of content.</td>
							<td class="category">Edit / Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Select" class="key">'Select'</code></td>
							<td></td>
							<td>The Select key.</td>
							<td class="category">Edit / Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Tab" class="key">'Tab'</code></td>
							<td><a id="key-U-0009"><code class="char">'\u0009'</code></a></td>
							<td>The Horizontal Tabulation (Tab) key.</td>
							<td class="category">Edit / Navigation</td>
						</tr>
						<tr>
							<td><code id="key-Backspace" class="key">'Backspace'</code></td>
							<td><code class="char">'\u0008'</code></td>
							<td>The Backspace key.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Clear" class="key">'Clear'</code></td>
							<td></td>
							<td>The Clear key, for removing current selected input.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Copy" class="key">'Copy'</code></td>
							<td></td>
							<td>The Copy key.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Cut" class="key">'Cut'</code></td>
							<td></td>
							<td>The Cut key.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Del" class="key">'Del'</code></td>
							<td><a id="key-U-007F"><code class="char">'\u007F'</code></a></td>
							<td>The Delete (Del) Key.
								<p class="note"><strong>Note:</strong> This key value is also used for the key labeled <code>'delete'</code> on MacOS keyboards when modified by
									the <code class="key">'Fn'</code> key.</p>
							</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-EraseEof" class="key">'EraseEof'</code></td>
							<td></td>
							<td>The Erase to End of Field key.  This key deletes all characters from the current cursor position to the end of the current field.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Insert" class="key">'Insert'</code></td>
							<td></td>
							<td>The Insert (Ins) key, to toggle between text modes for insertion or overtyping.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Paste" class="key">'Paste'</code></td>
							<td></td>
							<td>The Paste key.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-Undo" class="key">'Undo'</code></td>
							<td></td>
							<td>The Undo key.</td>
							<td class="category">Edit</td>
						</tr>
						<tr>
							<td><code id="key-DeadGrave" class="key">'DeadGrave'</code></td>
							<td><a id="key-U-0300"><code class="char">'\u0300'</code></a></td>
							<td>The Combining Grave Accent (Greek Varia, Dead Grave) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadAcute" class="key">'DeadAcute'</code></td>
							<td><a id="key-U-0301"><code class="char">'\u0301'</code></a></td>
							<td>The Combining Acute Accent (Stress Mark, Greek Oxia, Tonos, Dead Eacute) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadCircumflex" class="key">'DeadCircumflex'</code></td>
							<td><a id="key-U-0302"><code class="char">'\u0302'</code></a></td>
							<td>The Combining Circumflex Accent (Hat, Dead Circumflex) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadTilde" class="key">'DeadTilde'</code></td>
							<td><a id="key-U-0303"><code class="char">'\u0303'</code></a></td>
							<td>The Combining Tilde (Dead Tilde) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadMacron" class="key">'DeadMacron'</code></td>
							<td><a id="key-U-0304"><code class="char">'\u0304'</code></a></td>
							<td>The Combining Macron (Long, Dead Macron) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadBreve" class="key">'DeadBreve'</code></td>
							<td><a id="key-U-0306"><code class="char">'\u0306'</code></a></td>
							<td>The Combining Breve (Short, Dead Breve) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadAboveDot" class="key">'DeadAboveDot'</code></td>
							<td><a id="key-U-0307"><code class="char">'\u0307'</code></a></td>
							<td>The Combining Dot Above (Derivative, Dead Above Dot) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadUmlaut" class="key">'DeadUmlaut'</code></td>
							<td><a id="key-U-0308"><code class="char">'\u0308'</code></a></td>
							<td>The Combining Diaeresis (Double Dot Abode, Umlaut, Greek Dialytika, Double Derivative, Dead Diaeresis) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadAboveRing" class="key">'DeadAboveRing'</code></td>
							<td><a id="key-U-030A"><code class="char">'\u030A'</code></a></td>
							<td>The Combining Ring Above (Dead Above Ring) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadDoubleAcute" class="key">'DeadDoubleAcute'</code></td>
							<td><a id="key-U-030B"><code class="char">'\u030B'</code></a></td>
							<td>The Combining Double Acute Accent (Dead Doubleacute) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadCaron" class="key">'DeadCaron'</code></td>
							<td><a id="key-U-030C"><code class="char">'\u030C'</code></a></td>
							<td>The Combining Caron (Hacek, V Above, Dead Caron) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadCedilla" class="key">'DeadCedilla'</code></td>
							<td><a id="key-U-0327"><code class="char">'\u0327'</code></a></td>
							<td>The Combining Cedilla (Dead Cedilla) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadOgonek" class="key">'DeadOgonek'</code></td>
							<td><a id="key-U-0328"><code class="char">'\u0328'</code></a></td>
							<td>The Combining Ogonek (Nasal Hook, Dead Ogonek) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadIota" class="key">'DeadIota'</code></td>
							<td><a id="key-U-0345"><code class="char">'\u0345'</code></a></td>
							<td>The Combining Greek Ypogegrammeni (Greek Non-Spacing Iota Below, Iota Subscript, Dead Iota) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadVoicedSound" class="key">'DeadVoicedSound'</code></td>
							<td><a id="key-U-3099"><code class="char">'\u3099'</code></a></td>
							<td>The Combining Katakana-Hiragana Voiced Sound Mark (Dead Voiced Sound) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-DeadSemivoicedSound" class="key">'DeadSemivoicedSound'</code></td>
							<td><a id="key-U-309A"><code class="char">'\u309A'</code></a></td>
							<td>The Combining Katakana-Hiragana Semi-Voiced Sound Mark (Dead Semivoiced Sound) key.</td>
							<td class="category">Composition</td>
						</tr>
						<tr>
							<td><code id="key-Alphanumeric" class="key">'Alphanumeric'</code></td>
							<td></td>
							<td>The Alphanumeric key.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Alt" class="key">'Alt'</code></td>
							<td></td>
							<td>The Alternative (Alt, Option, Menu) key.  Enable alternate modifier function for interpreting concurrent or subsequent keyboard input.
								<p class="note"><strong>Note:</strong> This key value is also used for the Apple <code>'Option'</code> key.</p>
							</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-AltGraph" class="key">'AltGraph'</code></td>
							<td></td>
							<td>The Alt-Graph key.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-CapsLock" class="key">'CapsLock'</code></td>
							<td></td>
							<td>The Caps Lock (Capital) key.  Toggle capital character lock function for interpreting subsequent keyboard input event.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Control" class="key">'Control'</code></td>
							<td></td>
							<td>The Control (Ctrl) key, to enable control modifier function for interpreting concurrent or subsequent keyboard input.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Fn" class="key">'Fn'</code></td>
							<td></td>
							<td>The Function switch (Fn) key.  Activating this key simultaneously with another key changes that key's value to an alternate character or function.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-FnLock" class="key">'FnLock'</code></td>
							<td></td>
							<td>The Function-Lock (FnLock, F-Lock) key.  Activating this key switches the mode of the keyboard to changes some keys' values to an alternate character or function.
							</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Meta" class="key">'Meta'</code></td>
							<td></td>
							<td>The Meta key, to enable meta modifier function for interpreting concurrent or subsequent keyboard input.
								<p class="note"><strong>Note:</strong> This key value is also used for the Apple <code>'Command'</code> key.</p>
							</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Process" class="key">'Process'</code></td>
							<td></td>
							<td>The Process key.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-NumLock" class="key">'NumLock'</code></td>
							<td></td>
							<td>The Number Lock key, to toggle numer-pad mode function for interpreting subsequent keyboard input.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Shift" class="key">'Shift'</code></td>
							<td></td>
							<td>The Shift key, to enable shift modifier function for interpreting concurrent or subsequent keyboard input.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-SymbolLock" class="key">'SymbolLock'</code></td>
							<td></td>
							<td>The Symbol Lock key.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-OS" class="key">'OS'</code></td>
							<td></td>
							<td>The operating system key (e.g. the <q>Windows Logo</q> key).</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-Compose" class="key">'Compose'</code></td>
							<td></td>
							<td>The Compose key, also known as <em>Multi_key</em> on the X Window System.  This key acts in a manner similar to a <a class="def" href="#glossary-dead-key">dead
								key</a>, triggering a mode where subsequent key presses are combined to produce a different character.</td>
							<td class="category">Modifier</td>
						</tr>
						<tr>
							<td><code id="key-AllCandidates" class="key">'AllCandidates'</code></td>
							<td></td>
							<td>The All Candidates key, to initate the multi-candidate mode.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-NextCandidate" class="key">'NextCandidate'</code></td>
							<td></td>
							<td>The Next Candidate function key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-PreviousCandidate" class="key">'PreviousCandidate'</code></td>
							<td></td>
							<td>The Previous Candidate function key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-CodeInput" class="key">'CodeInput'</code></td>
							<td></td>
							<td>The Code Input key, to initiate the Code Input mode to allow characters to be entered by their code points.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-Convert" class="key">'Convert'</code></td>
							<td></td>
							<td>The Convert key, to convert the current input method sequence.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-Nonconvert" class="key">'Nonconvert'</code></td>
							<td></td>
							<td>The Nonconvert (Don't Convert) key, to accept current input method sequence without conversion in IMEs.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-FinalMode" class="key">'FinalMode'</code></td>
							<td></td>
							<td>The Final Mode (Final) key used on some Asian keyboards, to enable the final mode for IMEs.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-FullWidth" class="key">'FullWidth'</code></td>
							<td></td>
							<td>The Full-Width Characters key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-HalfWidth" class="key">'HalfWidth'</code></td>
							<td></td>
							<td>The Half-Width Characters key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-Modechange" class="key">'ModeChange'</code></td>
							<td></td>
							<td>The Mode Change key, to toggle between or cycle through input modes of IMEs.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-RomanCharacters" class="key">'RomanCharacters'</code></td>
							<td></td>
							<td>The Roman Characters function key, also known as the <code>'Youngja'</code> or <code>'Young'</code> key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-HangulMode" class="key">'HangulMode'</code></td>
							<td></td>
							<td>The Hangul (Korean characters) Mode key, to toggle between Hangul and English modes.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-HanjaMode" class="key">'HanjaMode'</code></td>
							<td></td>
							<td>The Hanja (Korean characters) Mode key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-JunjaMode" class="key">'JunjaMode'</code></td>
							<td></td>
							<td>The Junja (Korean characters) Mode key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-Hiragana" class="key">'Hiragana'</code></td>
							<td></td>
							<td>The Hiragana (Japanese Kana characters) key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-KanaMode" class="key">'KanaMode'</code></td>
							<td></td>
							<td>The Kana Mode (Kana Lock) key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-KanjiMode" class="key">'KanjiMode'</code></td>
							<td></td>
							<td>The Kanji (Japanese name for ideographic characters of Chinese origin) Mode key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-Katakana" class="key">'Katakana'</code></td>
							<td></td>
							<td>The Katakana (Japanese Kana characters) key.</td>
							<td class="category">IME</td>
						</tr>
						<tr>
							<td><code id="key-AudioFaderFront" class="key">'AudioFaderFront'</code></td>
							<td></td>
							<td>Adjust audio fader towards front.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioFaderRear" class="key">'AudioFaderRear'</code></td>
							<td></td>
							<td>Adjust audio fader towards rear.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioBalanceLeft" class="key">'AudioBalanceLeft'</code></td>
							<td></td>
							<td>Adjust audio balance leftward.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioBalanceRight" class="key">'AudioBalanceRight'</code></td>
							<td></td>
							<td>Adjust audio balance rightward.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioBassBoostDown" class="key">'AudioBassBoostDown'</code></td>
							<td></td>
							<td>Decrease audio bass boost or cycle down through bass boost states.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioBassBoostUp" class="key">'AudioBassBoostUp'</code></td>
							<td></td>
							<td>Increase audio bass boost or cycle up through bass boost states.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-VolumeMute" class="key">'VolumeMute'</code></td>
							<td></td>
							<td>Toggle between muted state and prior volume level.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-VolumeDown" class="key">'VolumeDown'</code></td>
							<td></td>
							<td>Decrease audio volume.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-VolumeUp" class="key">'VolumeUp'</code></td>
							<td></td>
							<td>Increase audio volume.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaPause" class="key">'MediaPause'</code></td>
							<td></td>
							<td>Pause playback, if not paused or stopped; also used with keyboard entry to pause scrolling output.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaPlay" class="key">'MediaPlay'</code></td>
							<td></td>
							<td>Initiate or continue media playback at normal speed, if not currently playing at normal speed.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaTrackEnd" class="key">'MediaTrackEnd'</code></td>
							<td></td>
							<td>Seek to end of media or program.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaNextTrack" class="key">'MediaNextTrack'</code></td>
							<td></td>
							<td>Seek to next media or program track.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaPlayPause" class="key">'MediaPlayPause'</code></td>
							<td></td>
							<td>Toggle media between play and pause states.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaPreviousTrack" class="key">'MediaPreviousTrack'</code></td>
							<td></td>
							<td>Seek to previous media or program track.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaTrackSkip" class="key">'MediaTrackSkip'</code></td>
							<td></td>
							<td>Skip current content or program.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaTrackStart" class="key">'MediaTrackStart'</code></td>
							<td></td>
							<td>Seek to start of media or program.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaStop" class="key">'MediaStop'</code></td>
							<td></td>
							<td>Stop media playing, pausing, forwarding, rewinding, or recording, if not already stopped.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-SelectMedia" class="key">'SelectMedia'</code></td>
							<td></td>
							<td>The Select Media key.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Blue" class="key">'Blue'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 3.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Brown" class="key">'Brown'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 5.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ChannelDown" class="key">'ChannelDown'</code></td>
							<td></td>
							<td>Select next (numerically or logically) lower channel..</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ChannelUp" class="key">'ChannelUp'</code></td>
							<td></td>
							<td>Select next (numerically or logically) higher channel.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ClearFavorite0" class="key">'ClearFavorite0'</code></td>
							<td></td>
							<td>Clear program or content stored as favorite 0.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ClearFavorite1" class="key">'ClearFavorite1'</code></td>
							<td></td>
							<td>Clear program or content stored as favorite 1.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ClearFavorite2" class="key">'ClearFavorite2'</code></td>
							<td></td>
							<td>Clear program or content stored as favorite 2.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ClearFavorite3" class="key">'ClearFavorite3'</code></td>
							<td></td>
							<td>Clear program or content stored as favorite 3.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Dimmer" class="key">'Dimmer'</code></td>
							<td></td>
							<td>Adjust brightness of device, or toggle between or cycle through states.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-DisplaySwap" class="key">'DisplaySwap'</code></td>
							<td></td>
							<td>Swap video sources.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-FastFwd" class="key">'FastFwd'</code></td>
							<td></td>
							<td>Initiate or continue forward playback at faster than normal speed, or increase speed if already fast forwarding.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Green" class="key">'Green'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 1.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Grey" class="key">'Grey'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 4.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Guide" class="key">'Guide'</code></td>
							<td></td>
							<td>Toggle display of program or content guide.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-InstantReplay" class="key">'InstantReplay'</code></td>
							<td></td>
							<td>Toggle instant replay.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaLast" class="key">'MediaLast'</code></td>
							<td></td>
							<td>Select previously selected channel or media.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Link" class="key">'Link'</code></td>
							<td></td>
							<td>Launch linked content, if available and appropriate.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Live" class="key">'Live'</code></td>
							<td></td>
							<td>Toggle display listing of currently available live content or programs.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Lock" class="key">'Lock'</code></td>
							<td></td>
							<td>Lock or unlock current content or program.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-NextDay" class="key">'NextDay'</code></td>
							<td></td>
							<td>If guide is active and displayed, then display next day's content.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-NextFavoriteChannel" class="key">'NextFavoriteChannel'</code></td>
							<td></td>
							<td>Select next favorite channel (in favorites list).</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-OnDemand" class="key">'OnDemand'</code></td>
							<td></td>
							<td>Access on-demand content or programs.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PinPDown" class="key">'PinPDown'</code></td>
							<td></td>
							<td>Move picture-in-picture window downward.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PinPMove" class="key">'PinPMove'</code></td>
							<td></td>
							<td>Move picture-in-picture window.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PinPToggle" class="key">'PinPToggle'</code></td>
							<td></td>
							<td>Toggle display of picture-in-picture window.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PinPUp" class="key">'PinPUp'</code></td>
							<td></td>
							<td>Move picture-in-picture window upward.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PlaySpeedDown" class="key">'PlaySpeedDown'</code></td>
							<td></td>
							<td>Decrease media playback speed.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PlaySpeedReset" class="key">'PlaySpeedReset'</code></td>
							<td></td>
							<td>Reset playback speed to normal speed (according to current media function).</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PlaySpeedUp" class="key">'PlaySpeedUp'</code></td>
							<td></td>
							<td>Increase media playback speed.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-PrevDay" class="key">'PrevDay'</code></td>
							<td></td>
							<td>If guide is active and displayed, then display previous day's content.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RandomToggle" class="key">'RandomToggle'</code></td>
							<td></td>
							<td>Toggle random media or content shuffle mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RecallFavorite0" class="key">'RecallFavorite0'</code></td>
							<td></td>
							<td>Select (recall) program or content stored as favorite 0.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RecallFavorite1" class="key">'RecallFavorite1'</code></td>
							<td></td>
							<td>Select (recall) program or content stored as favorite 1.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RecallFavorite2" class="key">'RecallFavorite2'</code></td>
							<td></td>
							<td>Select (recall) program or content stored as favorite 2.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RecallFavorite3" class="key">'RecallFavorite3'</code></td>
							<td></td>
							<td>Select (recall) program or content stored as favorite 3.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaRecord" class="key">'MediaRecord'</code></td>
							<td></td>
							<td>Initiate or resume recording of currently selected media.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RecordSpeedNext" class="key">'RecordSpeedNext'</code></td>
							<td></td>
							<td>Toggle or cycle between media recording speeds (if applicable).</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Red" class="key">'Red'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 0.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-MediaRewind" class="key">'MediaRewind'</code></td>
							<td></td>
							<td>Initiate or continue reverse playback at faster than normal speed, or increase speed if already rewinding.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-RfBypass" class="key">'RfBypass'</code></td>
							<td></td>
							<td>Toggle RF (radio frequency) input bypass mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ScanChannelsToggle" class="key">'ScanChannelsToggle'</code></td>
							<td></td>
							<td>Toggle scan channels mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-ScreenModeNext" class="key">'ScreenModeNext'</code></td>
							<td></td>
							<td>Advance display screen mode to next available mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Settings" class="key">'Settings'</code></td>
							<td></td>
							<td>Toggle display of device settings screen.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-SplitScreenToggle" class="key">'SplitScreenToggle'</code></td>
							<td></td>
							<td>Toggle split screen mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-StoreFavorite0" class="key">'StoreFavorite0'</code></td>
							<td></td>
							<td>Store current program or content as favorite 0.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-StoreFavorite1" class="key">'StoreFavorite1'</code></td>
							<td></td>
							<td>Store current program or content as favorite 1.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-StoreFavorite2" class="key">'StoreFavorite2'</code></td>
							<td></td>
							<td>Store current program or content as favorite 2.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-StoreFavorite3" class="key">'StoreFavorite3'</code></td>
							<td></td>
							<td>Store current program or content as favorite 3.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Subtitle" class="key">'Subtitle'</code></td>
							<td></td>
							<td>Toggle display of subtitles, if available.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-AudioSurroundModeNext" class="key">'AudioSurroundModeNext'</code></td>
							<td></td>
							<td>Advance surround audio mode to next available mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Teletext" class="key">'Teletext'</code></td>
							<td></td>
							<td>Toggle display of teletext, if available.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-VideoModeNext" class="key">'VideoModeNext'</code></td>
							<td></td>
							<td>Advance video mode to next available mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-DisplayWide" class="key">'DisplayWide'</code></td>
							<td></td>
							<td>Toggle device display mode between wide aspect and normal aspect mode.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Wink" class="key">'Wink'</code></td>
							<td></td>
							<td>Cause device to identify itself in some manner, e.g., audibly or visibly.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Yellow" class="key">'Yellow'</code></td>
							<td></td>
							<td>General purpose color-coded media function key, as index 2.</td>
							<td class="category">Media</td>
						</tr>
						<tr>
							<td><code id="key-Unidentified" class="key">'Unidentified'</code></td>
							<td></td>
							<td>This key value is used when an implementations is unable to identify another key value, due to either hardware, platform, or software constraints.</td>
							<td class="category">Special</td>
						</tr>
					</table>
				</div>
			</div>
		</div>
	</div>

	<!-- Appendix: Initializing events ========================================================-->

	<h1><a id="new-event-interface-initializers" href="#new-event-interface-initializers">Appendix A: Initializing New Event Interfaces</a></h1>
	<div>

		<p><em>This section is informative</em></p>

		<p>This specification defines several new event interfaces without a mechanism for content authors to initialize their respective events.</p>

		<p>These new event interfaces are:</p>

		<ul>
			<li><a href="#events-CustomEvent"><code>CustomEvent</code></a></li>
			<li><a href="#events-FocusEvent"><code>FocusEvent</code></a></li>
			<li><a href="#events-WheelEvent"><code>WheelEvent</code></a></li>
			<li><a href="#events-KeyboardEvent"><code>KeyboardEvent</code></a></li>
			<li><a href="#events-CompositionEvent"><code>CompositionEvent</code></a></li>
		</ul>

		<p>In DOM Level 2 Events, the initialization of these event interfaces was possible through an init method on the interface (for example <code>initMouseEvent</code>).
			These init methods needed a long list of parameters that, in most cases, did not fully initialize all attributes of the event object. In order to fully initialize
			an event interface which was derived from the basic <code>Event</code> interface, it was necessary to call the initializer of each of the derived interfaces explicitly.</p>

		<p class="example"><strong>Example: </strong>Initializing all the attributes of a MutationEvent requires calls to two initializer methods: <code>initEvent</code> and
			<code>initMutationEvent</code>.</p>

		<p>Due in part to the length of time in the development of this standard, some implementations <span class="may">may</span> have taken a dependency on a set of initializer methods that were
			formerly defined in this specification. For completeness, these legacy event intializers are described in this Appendix.</p>

		<p>The initialization of new derived event objects becomes easier in DOM4 [<a href="#references-DOM4">DOM4</a>] with the introduction of event constructors. Event constructors
			are a new mechanism for initializing the event object's attributes that allows authors to pick-and-choose which of all the possible event attributes <span class="should">should</span> be initialized to
			a value. For the omitted values, a suitable default is applied.</p>

		<p>This specification does not require a conforming implementation to support event constructors. Likewise it does not require a conforming implementation to support
			the legacy event initializers. However, it would be prudent for a conforming implementation to support one or the other, so that authors have some mechanism to initilize
			the new event interfaces defined in this specification.</p>

		<p class="note"><strong>Note: </strong>Event constructors are a relatively new concept and are subject to change. For the latest syntax, please refer to the DOM4 specification
			[<a href="#references-DOM4">DOM4</a>].</p>

		<h2 id="event-initializers">A.1 Supplemental Initializer Interfaces</h2>
		<div>
			<p><em>This section is informative</em></p>
			<p>
				This section documents legacy initializer methods <b>and</b> suggested event constructors for the following event interfaces introduced in DOM Level 3 Events:
			</p>
			<ul>
				<li><a href="#idl-interface-CustomEvent-initializers"><code>CustomEvent</code></a></li>
				<li><a href="#idl-interface-FocusEvent-initializers"><code>FocusEvent</code></a></li>
				<li><a href="#idl-interface-WheelEvent-initializers"><code>WheelEvent</code></a></li>
				<li><a href="#idl-interface-KeyboardEvent-initializers"><code>KeyboardEvent</code></a></li>
				<li><a href="#idl-interface-CompositionEvent-initializers"><code>CompositionEvent</code></a></li>
			</ul>
			<p>
				For completeness, this section also documents suggested event constructors for the following event interfaces which were introduced in DOM Level 2 Events [<a
					href="#references-DOM2Events">DOM2 Events</a>] but not deprecated in this specification:
			</p>
			<ul>
				<li><a href="#idl-interface-Event-initializers"><code>Event</code></a></li>
				<li><a href="#idl-interface-UIEvent-initializers"><code>UIEvent</code></a></li>
				<li><a href="#idl-interface-MouseEvent-initializers"><code>MouseEvent</code></a></li>
			</ul>
			<dl>
				<dt><strong>WebIDL Definitions</strong></dt>
				<dd>
					<pre class="idl" id="idl-interface-Event-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional EventInit eventInitDict)]
partial interface <a href="#events-Event">Event</a>
{
};

<span class="comment">// Suggested initEvent initializer:</span>
dictionary EventInit {
  boolean bubbles    = false;
  boolean cancelable = false;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-CustomEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional CustomEventInit customEventInitDict)]
partial interface <a href="#events-CustomEvent">CustomEvent</a>
{
  <span class="comment">// Originally introduced (and deprecated) in DOM Level 3:</span>
  void <a href="#events-event-type-initCustomEvent">initCustomEvent</a>(DOMString <a href="#events-CustomEvent-initparam-typeArg">typeArg</a>,
                       boolean <a href="#events-CustomEvent-initparam-canBubbleArg">canBubbleArg</a>,
                       boolean <a href="#events-CustomEvent-initparam-cancelableArg">cancelableArg</a>,
                       any <a href="#events-CustomEvent-initparam-detailArg">detailArg</a>);
};

<span class="comment">// Suggested initCustomEvent replacement initializer:</span>
dictionary CustomEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean bubbles    = false;
  boolean cancelable = false;

  <span class="comment">// Attributes for CustomEvent:</span>
  any     detail     = null;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-UIEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional UIEventInit dictUIEventInit)]
partial interface <a href="#events-UIEvent">UIEvent</a>
{
};

<span class="comment">// Suggested initUIEvent replacement initializer:</span>
dictionary UIEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean       bubbles    = false;
  boolean       cancelable = false;

  <span class="comment">// Attributes for UIEvent:</span>
  AbstractView? view       = null;
  long          detail     = 0;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-FocusEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional FocusEventInit focusEventInitDict)]
partial interface <a href="#events-FocusEvent">FocusEvent</a>
{
  <span class="comment">// Originally introduced (and deprecated) in DOM Level 3:</span>
  void <a href="#events-event-type-initFocusEvent">initFocusEvent</a>(DOMString typeArg,
                      boolean canBubbleArg,
                      boolean cancelableArg,
                      AbstractView? viewArg,
                      long detailArg,
                      <a href="#events-EventTarget">EventTarget</a>? relatedTargetArg);
};

<span class="comment">// Suggested initFocusEvent replacement initializer:</span>
dictionary FocusEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean       bubbles       = false;
  boolean       cancelable    = false;

  <span class="comment">// Attributes from UIEvent:</span>
  AbstractView? view          = null;
  long          detail        = 0;

  <span class="comment">// Attributes for FocusEvent:</span>
  <a href="#events-EventTarget">EventTarget</a>?  relatedTarget = null;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-MouseEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional MouseEventInit mouseEventInitDict)]
partial interface <a href="#events-WheelEvent">MouseEvent</a>
{
};

<span class="comment">// Suggested initMouseEvent replacement initializer:</span>
dictionary MouseEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean        bubbles       = false;
  boolean        cancelable    = false;

  <span class="comment">// Attributes from UIEvent:</span>
  AbstractView?  view          = null;
  long           detail        = 0;

  <span class="comment">// Attributes for MouseEvent:</span>
  long           screenX       = 0;
  long           screenY       = 0;
  long           clientX       = 0;
  long           clientY       = 0;
  boolean        ctrlKey       = false;
  boolean        shiftKey      = false;
  boolean        altKey        = false;
  boolean        metaKey       = false;
  unsigned short button        = 0;
  <span class="comment">// Note: "buttons" was not previously initializable through initMouseEvent!</span>
  unsigned short buttons       = 0;
  <a href="#events-EventTarget">EventTarget</a>?   relatedTarget = null;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-WheelEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional WheelEventInit wheelEventInitDict)]
partial interface <a href="#events-WheelEvent">WheelEvent</a>
{
  <span class="comment">// Originally introduced (and deprecated) in DOM Level 3:</span>
  void <a href="#events-event-type-initWheelEvent">initWheelEvent</a>(DOMString typeArg,
                      boolean canBubbleArg,
                      boolean cancelableArg,
                      AbstractView? viewArg,
                      long detailArg,
                      long screenXArg,
                      long screenYArg,
                      long clientXArg,
                      long clientYArg,
                      unsigned short buttonArg,
                      <a href="#events-EventTarget">EventTarget</a>? relatedTargetArg,
                      DOMString modifiersListArg,
                      double deltaXArg,
                      double deltaYArg,
                      double deltaZArg,
                      unsigned long deltaMode);
};

<span class="comment">// Suggested initWheelEvent replacement initializer:</span>
dictionary WheelEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean        bubbles       = false;
  boolean        cancelable    = false;

  <span class="comment">// Attributes from UIEvent:</span>
  AbstractView?  view          = null;
  long           detail        = 0;

  <span class="comment">// Attributes from MouseEvent:</span>
  long           screenX       = 0;
  long           screenY       = 0;
  long           clientX       = 0;
  long           clientY       = 0;
  boolean        ctrlKey       = false;
  boolean        shiftKey      = false;
  boolean        altKey        = false;
  boolean        metaKey       = false;
  unsigned short button        = 0;
  <span class="comment">// Note: "buttons" was not previously initializable through initMouseEvent!</span>
  unsigned short buttons       = 0;
  <a href="#events-EventTarget">EventTarget</a>?   relatedTarget = null;

  <span class="comment">// Attributes for WheelEvent:</span>
  double          deltaX        = 0.0;
  double          deltaY        = 0.0;
  double          deltaZ        = 0.0;
  unsigned long  deltaMode     = 0;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-KeyboardEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional KeyboardEventInit keyboardEventInitDict)]
partial interface <a href="#events-KeyboardEvent">KeyboardEvent</a>
{
  <span class="comment">// Originally introduced (and deprecated) in DOM Level 3:</span>
  void <a href="#events-KeyboardEvent-initKeyboardEvent">initKeyboardEvent</a>(DOMString typeArg,
                         boolean canBubbleArg,
                         boolean cancelableArg,
                         AbstractView? viewArg,
                         DOMString charArg,
                         DOMString keyArg,
                         unsigned long locationArg,
                         DOMString modifiersListArg,
                         boolean repeat,
                         DOMString localeArg);
};

<span class="comment">// Suggested initKeyboardEvent replacement initializer:</span>
dictionary KeyboardEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean       bubbles    = false;
  boolean       cancelable = false;

  <span class="comment">// Attributes from UIEvent:</span>
  AbstractView? view       = null;
  long          detail     = 0;

  <span class="comment">// Attributes for KeyboardEvent:</span>
  DOMString     char       = "";
  DOMString     key        = "";
  unsigned long location   = 0;
  boolean       ctrlKey    = false;
  boolean       shiftKey   = false;
  boolean       altKey     = false;
  boolean       metaKey    = false;
  boolean       repeat     = false;
  DOMString     locale     = "";

  <span class="comment">// (Legacy) key attributes for KeyboardEvent:</span>
  unsigned long charCode   = 0;
  unsigned long keyCode    = 0;
  unsigned long which      = 0;
};</code></pre>
				</dd>
				<dd>
					<pre class="idl" id="idl-interface-CompositionEvent-initializers"><code>
<span class="comment">// Event Constructor Syntax:</span>
[Constructor(DOMString typeArg, optional CompositionEventInit compositionEventInitDict)]
partial interface <a href="#events-CompositionEvent">CompositionEvent</a>
{
  <span class="comment">// Originally introduced (and deprecated) in DOM Level 3:</span>
  void <a href="#events-event-type-initCompositionEvent">initCompositionEvent</a>(DOMString typeArg,
                         boolean canBubbleArg,
                         boolean cancelableArg,
                         AbstractView? viewArg,
                         DOMString? dataArg,
                         DOMString localeArg);
};

<span class="comment">// Suggested initCompositionEvent replacement initializer:</span>
dictionary CompositionEventInit {
  <span class="comment">// Attributes from Event:</span>
  boolean       bubbles    = false;
  boolean       cancelable = false;

  <span class="comment">// Attributes from UIEvent:</span>
  AbstractView? view       = null;
  long          detail     = 0;

  <span class="comment">// Attributes for CompositionEvent:</span>
  DOMString?    data       = null;
  DOMString     locale     = "";
};</code></pre>
				</dd>

				<dt><strong>Methods</strong></dt>
				<dd>
					<dl>
						<dt><code class="method-name"><a id="events-event-type-initCustomEvent">initCustomEvent</a></code></dt>
						<dd>
							<div class="method">
								<p>Initializes attributes of a <code>CustomEvent</code> object. This method has the same behavior as <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a>.</p>

								<p class="warning"><strong>Warning!</strong> The <code>initCustomEvent</code> method is deprecated. Event constructor syntax, introduced in DOM4, is the expected future
									syntax for initializing a <code>CustomEvent</code>.</p>

								<div class="parameters">
									<p><strong>Parameters</strong></p>

									<div class="paramtable">
										<dl>
											<dt><a id="events-CustomEvent-initparam-typeArg"><code class="parameter-name">typeArg</code></a> of type <code>DOMString</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><a id="events-CustomEvent-initparam-canBubbleArg"><code class="parameter-name">canBubbleArg</code></a> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><a id="events-CustomEvent-initparam-cancelableArg"><code class="parameter-name">cancelableArg</code></a> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initEvent"><code>Event.initEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><a id="events-CustomEvent-initparam-detailArg"><code class="parameter-name">detailArg</code></a> of type <code>any</code></dt>
											<dd><p>Specifies <a href="#events-CustomEvent-detail"><code>CustomEvent.detail</code></a>.</p></dd>
										</dl>
									</div>
								</div>

								<div><strong>No Return Value</strong></div>

								<div><strong>No Exceptions</strong></div>
							</div>
						</dd>

						<dt><code class="method-name"><a id="events-event-type-initFocusEvent">initFocusEvent</a></code></dt>
						<dd>
							<div class="method">
								<p>Initializes attributes of a <code>FocusEvent</code> object. This method has the same behavior as <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a>.</p>

								<p class="warning"><strong>Warning!</strong> The <code>initFocusEvent</code> method is deprecated. Event constructor syntax, introduced in DOM4, is the expected future
									syntax for initializing a <code>FocusEvent</code>.</p>

								<div class="parameters">
									<p><strong>Parameters</strong></p>

									<div class="paramtable">
										<dl>
											<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">detailArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">relatedTargetArg</code> of type <a href="#events-EventTarget"><code>EventTarget</code></a></dt>
											<dd><p>Specifies <a href="#events-FocusEvent-relatedTarget"><code>FocusEvent.relatedTarget</code></a>. This value <span class="may">may</span> be <code>null</code>.</p></dd>
										</dl>
									</div>
								</div>

								<div><strong>No Return Value</strong></div>

								<div><strong>No Exceptions</strong></div>
							</div>
						</dd>

						<dt><code class="method-name"><a id="events-event-type-initWheelEvent">initWheelEvent</a></code></dt>
						<dd>
							<div class="method">
								<p>Initializes attributes of a <code>WheelEvent</code> object. This method has the same behavior as <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a>.</p>

								<p class="warning"><strong>Warning!</strong> The <code>initWheelEvent</code> method is deprecated. Event constructor syntax, introduced in DOM4, is the expected future
									syntax for initializing a <code>WheelEvent</code>.</p>

								<div class="parameters">
									<p><strong>Parameters</strong></p>

									<div class="paramtable">
										<dl>
											<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">detailArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">screenXArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">screenYArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">clientXArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">clientYArg</code> of type <code>long</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">buttonArg</code> of type <code>unsigned short</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">relatedTargetArg</code> of type <a href="#events-EventTarget"><code>EventTarget</code></a></dt>
											<dd><p>Refer to the <a href="#events-event-type-initMouseEvent"><code>MouseEvent.initMouseEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">modifiersListArg</code> of type <code>DOMString</code></dt>
											<dd>
												<p>A <a class="normative" href="http://www.w3.org/TR/2004/REC-xml-20040204/#NT-S"><em>white space</em></a> separated list of modifier key values to be activated
													on this object. As an example, <code>"Control Shift"</code> marks the control and shift modifiers as activated (the <a href="#events-MouseEvent-ctrlKey">
													<code>MouseEvent.ctrlKey</code></a> and <a href="#events-MouseEvent-shiftKey"><code>MouseEvent.shiftKey</code></a> inherited attributes will be <code>true</code>
													on the initialized <code>WheelEvent</code> object).</p>
											</dd>

											<dt><code class="parameter-name">deltaXArg</code> of type <code>double</code></dt>
											<dd><p>Specifies <a href="#events-WheelEvent-deltaX"><code>WheelEvent.deltaX</code></a>.</p></dd>

											<dt><code class="parameter-name">deltaYArg</code> of type <code>double</code></dt>
											<dd><p>Specifies <a href="#events-WheelEvent-deltaY"><code>WheelEvent.deltaY</code></a>.</p></dd>

											<dt><code class="parameter-name">deltaZArg</code> of type <code>double</code></dt>
											<dd><p>Specifies <a href="#events-WheelEvent-deltaZ"><code>WheelEvent.deltaZ</code></a>.</p></dd>

											<dt><code class="parameter-name">deltaModeArg</code> of type <code>unsigned long</code></dt>
											<dd><p>Specifies <a href="#events-WheelEvent-deltaMode"><code>WheelEvent.deltaMode</code></a>.</p></dd>
										</dl>
									</div>
								</div>

								<div><strong>No Return Value</strong></div>

								<div><strong>No Exceptions</strong></div>
							</div>
						</dd>

						<dt><code class="method-name"><a id="events-KeyboardEvent-initKeyboardEvent">initKeyboardEvent</a></code></dt>
						<dd>
							<div class="method">
								<p>Initializes attributes of a <code>KeyboardEvent</code> object. This method has the same behavior as <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a>.
									The value of <a href="#events-UIEvent-detail"><code>UIEvent.detail</code></a> remains undefined.</p>

								<p class="warning"><strong>Warning!</strong> The <code>initKeyboardEvent</code> method is deprecated. Event constructor syntax, introduced in DOM4, is the expected
									future syntax for initializing a <code>KeyboardEvent</code>.</p>

								<div class="parameters">
									<p><strong>Parameters</strong></p>

									<div class="paramtable">
										<dl>
											<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">charArg</code> of type <code>DOMString</code></dt>
											<dd><p>Specifies <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a>.</p></dd>

											<dt><code class="parameter-name">keyArg</code> of type <code>DOMString</code></dt>
											<dd><p>Specifies <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a>.</p></dd>

											<dt><code class="parameter-name">locationArg</code> of type <code>unsigned long</code></dt>
											<dd><p>Specifies <a href="#events-KeyboardEvent-location"><code>KeyboardEvent.location</code></a>.</p></dd>

											<dt><code class="parameter-name">modifiersListArg</code> of type <code>DOMString</code></dt>
											<dd><p>A <a class="normative" href="http://www.w3.org/TR/2004/REC-xml-20040204/#NT-S"><em>white space</em></a> separated list of modifier key values to be activated on
												this object. As an example, <code>"Control Alt"</code> marks the control and alt modifiers as activated.</p>
											</dd>

											<dt><code class="parameter-name">repeatArg</code> of type <code>boolean</code></dt>
											<dd><p>Specifies whether the key event is repeating; see <a href="#events-KeyboardEvent-repeat"><code>KeyboardEvent.repeat</code></a>.</p></dd>

											<dt><code class="parameter-name">localeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Specifies <a href="#events-KeyboardEvent-locale"><code>KeyboardEvent.locale</code></a>.</p></dd>
										</dl>
									</div>
								</div>

								<div><strong>No Return Value</strong></div>

								<div><strong>No Exceptions</strong></div>
							</div>
						</dd>

						<dt><code class="method-name"><a id="events-event-type-initCompositionEvent">initCompositionEvent</a></code></dt>
						<dd>
							<div class="method">
								<p>Initializes attributes of a <code>CompositionEvent</code> object. This method has the same behavior as <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a>.
									The value of <a href="#events-UIEvent-detail"><code>UIEvent.detail</code></a> remains undefined.</p>

								<p class="warning"><strong>Warning!</strong> The <code>initCompositionEvent</code> method is deprecated. Event constructor syntax, introduced in DOM4, is the expected
									future syntax for initializing a <code>CompositionEvent</code>.</p>

								<div class="parameters">
									<p><strong>Parameters</strong></p>

									<div class="paramtable">
										<dl>
											<dt><code class="parameter-name">typeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">canBubbleArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">cancelableArg</code> of type <code>boolean</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">viewArg</code> of type <code>AbstractView</code></dt>
											<dd><p>Refer to the <a href="#events-event-type-initUIEvent"><code>UIEvent.initUIEvent()</code></a> method for a description of this parameter.</p></dd>

											<dt><code class="parameter-name">dataArg</code> of type <code>DOMString</code></dt>
											<dd><p>Specifies <a href="#events-CompositionEvent-data"><code>CompositionEvent.data</code></a>.</p></dd>

											<dt><code class="parameter-name">localeArg</code> of type <code>DOMString</code></dt>
											<dd><p>Specifies <a href="#events-CompositionEvent-locale"><code>CompositionEvent.locale</code></a>.</p></dd>
										</dl>
									</div>
								</div>

								<div><strong>No Return Value</strong></div>

								<div><strong>No Exceptions</strong></div>
							</div>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>
	</div>

	<!-- Appendix: Legacy key attributes ========================================================-->

	<h1><a id="legacy-key-attributes" href="#legacy-key-attributes">Appendix B: Legacy key attributes: <code class="attribute-name">keyCode</code>, <code class="attribute-name">charCode</code>, and <code class="attribute-name">which</code></a></h1>
	<div>

		<p><em>This section is informative</em></p>

		<p>Browser support for keyboards has traditionally relied on three ad-hoc attributes, <code class="attribute-name">keyCode</code>, <code class="attribute-name">charCode</code>,
			and <code class="attribute-name">which</code>.</p>

		<p>All three of these attributes return a numerical code that represents some aspect of the key pressed: <code class="attribute-name">keyCode</code> is an index of
			the key itself; <code class="attribute-name">charCode</code> is the ASCII value of the character keys; <code class="attribute-name">which</code> is the character
			value where available and otherwise the key index.  The values for these attributes, and the availability of the attribute, is inconsistent across platforms, keyboard
			languages and layouts, <a class="def" href="#glossary-user-agent">user agents</a>, versions, and even event types.  A significant amount of legacy content, including
			script libraries, relies upon detecting the <a class="def" href="#glossary-user-agent">user agent</a> and acting accordingly, and any changes to <code class="attribute-name">
			keyCode</code>, <code class="attribute-name">charCode</code>, or <code class="attribute-name">which</code> risk breaking as much content as they fix or enable.
			Additionally, these attributes are not suitable for international usage, or accessibility concerns.</p>

		<p>Therefore, this specification does not normatively define the <code class="attribute-name">charCode</code>, <code class="attribute-name">keyCode</code>, or <code
			class="attribute-name">which</code> attributes on the <a href="#events-KeyboardEvent">KeyboardEvent</a> interface, though they <span class="may">may</span> be present in <a class="def" href="#glossary-user-agent">
			user agents</a> for compatibility with legacy content.  Authors <span class="should">should</span> use the <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a> and <a href="#events-KeyboardEvent-key">
			<code>KeyboardEvent.key</code></a> attributes instead of the <code class="attribute-name">charCode</code> and <code class="attribute-name">keyCode</code>
			attributes, respectively.</p>

		<p>However, for the purpose of documenting the current state of these attributes and their relation to equivalent key values, this section describes an informative
			Web IDL partial interface for <a href="#events-KeyboardEvent">KeyboardEvent</a> containing these attributes, and informative definitions for determining their attribute
			values.</p>

		<p>For implementations which do support these attributes, it is suggested to use this partial <a href="#events-KeyboardEvent-supplemental">KeyboardEvent</a> interface.</p>

		<h2><a id="KeyboardEvent-supplemental-interface" href="#KeyboardEvent-supplemental-interface">B.1 Legacy KeyboardEvent supplemental interface</a></h2>
		<div>
			<dl>
				<dt><strong>Interface <em><a id="events-KeyboardEvent-supplemental">KeyboardEvent (supplemental)</a></em></strong> (introduced
					in <strong class="since">DOM Level 3</strong>)</dt>
				<dd>
					<p>The partial <code>KeyboardEvent</code> interface is an informative extension of the <a href="#events-KeyboardEvent">KeyboardEvent</a> interface, which adds the
						<a href="#events-KeyboardEvent-supplemental-charCode">charCode</a>, <a href="#events-KeyboardEvent-supplemental-keyCode">keyCode</a>, and <a href="#events-KeyboardEvent-supplemental-which">
						which</a> attributes.</p>

					<p>The partial <code>KeyboardEvent</code> interface can be obtained by using the <a href="#events-DocumentEvent-createEvent"><code>DocumentEvent.createEvent("KeyboardEvent")</code></a>
						method call in implementations that support this extension.</p>

					<dl>
						<dt><strong>WebIDL Definition</strong></dt>
						<dd>
							<pre class="idl"><code>
<span class="comment">// introduced in DOM Level 3:</span>
partial interface <a href="#events-KeyboardEvent-supplemental">KeyboardEvent</a>
{
  <span class="comment">// The following support legacy user agents:</span>
  readonly attribute unsigned long <a href="#events-KeyboardEvent-supplemental-charCode">charCode</a>;
  readonly attribute unsigned long <a href="#events-KeyboardEvent-supplemental-keyCode">keyCode</a>;
  readonly attribute unsigned long <a href="#events-KeyboardEvent-supplemental-which">which</a>;
};
</code></pre>
						</dd>
						<dt><strong>Attributes</strong></dt>
						<dd>
							<dl>
								<dt><code class="attribute-name"><a id="events-KeyboardEvent-supplemental-charCode">charCode</a></code> of type <code>
									unsigned long</code>, readonly</dt>
								<dd>
									<p><code class="attribute-name">charCode</code> holds a character value, for <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> events which
										generate character input.  The value is the Unicode reference number (code point) of that character (e.g. <code>event.charCode = event.char.charCodeAt(0)</code>).
										For <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> or  <a class="eventtype" href="#event-type-keyup"><code>keyup</code></a> events, the
										value of <code class="attribute-name">charCode</code> is <code>0</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-KeyboardEvent-supplemental-keyCode">keyCode</a></code> of type <code>unsigned long</code>, readonly</dt>
								<dd>
									<p><code class="attribute-name">keyCode</code> holds a system- and implementation-dependent numerical code signifying the unmodified identifier associated with the
										key pressed. Unlike the <a href="#events-KeyboardEvent-key"><code>KeyboardEvent.key</code></a> or <a href="#events-KeyboardEvent-char"><code>KeyboardEvent.char</code></a>
										attributes, the set of possible values are not normatively defined in this specification; typically, these value of the <code class="attribute-name">keyCode</code>
										<span class="should">should</span> represent the decimal codepoint in ASCII [<a href="#ref-rfc20">RFC20</a>][<a href="#ref-US-ASCII">US-ASCII</a>] or Windows 1252 [<a href="#ref-WIN1252">WIN1252</a>],
										but <span class="may">may</span> be drawn from a different appropriate character set. Implementations that are unable to identify a key use the key value <code class="key">'0'</code>.</p>

									<p>See <a href="#legacy-key-models">Legacy key models</a> for more details on how to determine the values for <code class="attribute-name">keyCode</code>.</p>
								</dd>

								<dt><code class="attribute-name"><a id="events-KeyboardEvent-supplemental-which">which</a></code> of type <code>unsigned
									long</code>, readonly</dt>
								<dd>
									<p><code>which</code> holds a system- and implementation-dependent numerical code signifying the unmodified identifier associated with the key pressed.  In most cases,
										the value is identical to <code class="attribute-name"><a href="#events-KeyboardEvent-supplemental-keyCode">keyCode</a></code>.</p>
								</dd>
							</dl>
						</dd>
					</dl>
				</dd>
			</dl>
		</div>

		<h2><a id="legacy-key-models" href="#legacy-key-models">B.2 Legacy key models</a></h2>
		<div>
			<p><em>This section is informative</em></p>

			<p>Implementations differ on which values are exposed on these attributes for different event types.  An implementation <span class="may">may</span> choose to expose both virtual key codes
				and character codes in the <code class="attribute-name">keyCode</code> property (<em>conflated model</em>), or report separate <code class="attribute-name">keyCode</code>
				and <code class="attribute-name">charCode</code> properties (<em>split model</em>).</p>

			<h3><a id="determine-keydown-keyup-keyCode" href="#determine-keydown-keyup-keyCode">B.2.1 How to determine <code class="attribute-name">keyCode</code> for <code>keydown</code>
				and <code>keyup</code> events</a></h3>
			<div>

				<p>The <code class="attribute-name">keyCode</code> for <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a> or <a class="eventtype" href="#event-type-keyup">
					<code>keyup</code></a> events is calculated as follows:</p>

				<ol>
					<li>Read the virtual key code from the operating system's event information, if such information is available.</li>
					<li>If an Input Method Editor is processing key input and the event is <a class="eventtype" href="#event-type-keydown"><code>keydown</code></a>, return 229.</li>
					<li>If input key when pressed without modifiers would insert a numerical character (0-9), return the ASCII code of that numerical character.</li>
					<li>If input key when pressed without modifiers would insert a a lower case character in the a-z alphabetical range, return the ASCII code of the upper case equivalent.</li>
					<li>If the implementation supports a key code conversion table for the operating system and platform, look up the value. If the conversion table specifies an alternate
						virtual key value for the given input, return the specified value.</li>
					<li>If the key's function, as determined in an implementation-specific way, corresponds to one of the keys in the <a href="#fixed-virtual-key-codes">table of fixed
						virtual key codes</a>, return the corresponding key code.</li>
					<li>Return the virtual key code from the operating system.</li>
					<li>If no key code was found, return 0.</li>
				</ol>
			</div>

			<h3><a id="determine-keypress-keyCode" href="#determine-keypress-keyCode">B.2.2 How to determine <code class="attribute-name">keyCode</code> for <code>keypress</code>events</a></h3>
			<div>

				<p><em>This section is informative</em></p>

				<p>The <code class="attribute-name">keyCode</code> for <a class="eventtype" href="#event-type-keypress"><code>keypress</code></a> events is calculated as follows:</p>

				<ol>
					<li>If the implementation supports a <em>conflated model</em>, set <code class="attribute-name">keyCode</code> to the Unicode code point of the character being entered.
					</li>
					<li>If the implementation supports a <em>split model</em>, set <code class="attribute-name">keyCode</code> to 0.</li>
				</ol>
			</div>

			<h3><a id="fixed-virtual-key-codes" href="#fixed-virtual-key-codes">B.2.3 Fixed virtual key codes</a></h3>
			<div>
				<p><em>This section is informative</em></p>

				<p>The virtual key codes for the following keys do not usually change with keyboard layouts on desktop systems:</p>

				<table class="data-table">
					<tr>
						<th><strong>Key</strong></th>
						<th><strong>Virtual Key Code</strong></th>
					</tr>
					<tr>
						<th><code class="key">'Backspace'</code></th>
						<td>8</td>
					</tr>
					<tr>
						<th><code class="key">'Tab'</code></th>
						<td>9</td>
					</tr>
					<tr>
						<th><code class="key">'Enter'</code></th>
						<td>13</td>
					</tr>
					<tr>
						<th><code class="key">'Shift'</code></th>
						<td>16</td>
					</tr>
					<tr>
						<th><code class="key">'Control'</code></th>
						<td>17</td>
					</tr>
					<tr>
						<th><code class="key">'Alt'</code></th>
						<td>18</td>
					</tr>
					<tr>
						<th><code class="key">'CapsLock'</code></th>
						<td>20</td>
					</tr>
					<tr>
						<th><code class="key">'Esc'</code> (Escape)</th>
						<td>27</td>
					</tr>
					<tr>
						<th><code class="key">'Spacebar'</code> (Space)</th>
						<td>32</td>
					</tr>
					<tr>
						<th><code class="key">'PageUp'</code></th>
						<td>33</td>
					</tr>
					<tr>
						<th><code class="key">'PageDown'</code></th>
						<td>34</td>
					</tr>
					<tr>
						<th><code class="key">'End'</code></th>
						<td>35</td>
					</tr>
					<tr>
						<th><code class="key">'Home'</code></th>
						<td>36</td>
					</tr>
					<tr>
						<th><code class="key">'Left'</code></th>
						<td>37</td>
					</tr>
					<tr>
						<th><code class="key">'Up'</code></th>
						<td>38</td>
					</tr>
					<tr>
						<th><code class="key">'Right'</code></th>
						<td>39</td>
					</tr>
					<tr>
						<th><code class="key">'Down'</code></th>
						<td>40</td>
					</tr>
					<tr>
						<th><code class="key">'Del'</code> (Delete)</th>
						<td>46</td>
					</tr>
				</table>
			</div>

			<h3><a id="optionally-fixed-virtual-key-codes" href="#optionally-fixed-virtual-key-codes">B.2.4 Optionally fixed virtual key codes</a></h3>
			<div>
				<p><em>This section is informative</em></p>

				<p>The following punctuation characters <span class="may">may</span> change virtual codes between keyboard layouts, but reporting these values will likely be more compatible with legacy content
					expecting US-English keyboard layout:</p>

				<table class="data-table">
					<tr>
						<th><strong>Key</strong></th>
						<th><strong>Virtual Key Code</strong></th>
					</tr>
					<tr>
						<th>Semicolon (<code class="glyph">';'</code>)</th>
						<td>186</td>
					</tr>
					<tr>
						<th>Colon (<code class="glyph">':'</code>)</th>
						<td>186</td>
					</tr>
					<tr>
						<th>Plus (<code class="glyph">'+'</code>)</th>
						<td>187</td>
					</tr>
					<tr>
						<th>Equals sign (<code class="glyph">'='</code>)</th>
						<td>187</td>
					</tr>
					<tr>
						<th>Comma (<code class="glyph">','</code>)</th>
						<td>188</td>
					</tr>
					<tr>
						<th>Less than sign (<code class="glyph">'&lt;'</code>)</th>
						<td>188</td>
					</tr>
					<tr>
						<th>Minus (<code class="glyph">'-'</code>)</th>
						<td>189</td>
					</tr>
					<tr>
						<th>Underscore (<code class="glyph">'_'</code>)</th>
						<td>189</td>
					</tr>
					<tr>
						<th>Period (<code class="glyph">'.'</code>)</th>
						<td>190</td>
					</tr>
					<tr>
						<th>Greater than sign (<code class="glyph">'&gt;'</code>)</th>
						<td>190</td>
					</tr>
					<tr>
						<th>Question mark (<code class="glyph">'?'</code>)</th>
						<td>191</td>
					</tr>
					<tr>
						<th>Forward slash (<code class="glyph">'/'</code>)</th>
						<td>191</td>
					</tr>
					<tr>
						<th>Backtick (<code class="glyph">'`'</code>)</th>
						<td>192</td>
					</tr>
					<tr>
						<th>Tilde (<code class="glyph">'~'</code>)</th>
						<td>192</td>
					</tr>
					<tr>
						<th>Opening square bracket (<code class="glyph">'['</code>)</th>
						<td>219</td>
					</tr>
					<tr>
						<th>Opening curly bracket (<code class="glyph">'{'</code>)</th>
						<td>219</td>
					</tr>
					<tr>
						<th>Backslash (<code class="glyph">'\'</code>)</th>
						<td>220</td>
					</tr>
					<tr>
						<th>Pipe (<code class="glyph">'|'</code>)</th>
						<td>220</td>
					</tr>
					<tr>
						<th>Closing square bracket (<code class="glyph">']'</code>)</th>
						<td>221</td>
					</tr>
					<tr>
						<th>Closing curly bracket (<code class="glyph">'}'</code>)</th>
						<td>221</td>
					</tr>
					<tr>
						<th>Single quote (<code class="glyph">'''</code>)</th>
						<td>222</td>
					</tr>
					<tr>
						<th>Double quote (<code class="glyph">'"'</code>)</th>
						<td>222</td>
					</tr>
				</table>
			</div>
		</div>
	</div>

	<!-- Appendix: Extending events ========================================================-->

	<h1><a id="extending_events" href="#extending_events">Appendix C: Extending Events</a></h1>
	<div>
		<p><em>This section is informative</em></p>

		<h2><a id="extending_events-intro" href="#extending_events-intro">C.1 Introduction</a></h2>
		<div>
			<p>This specification defines several interfaces and many events; however, this is not an exhaustive set of events for all purposes.  To allow content
				authors and implementers to add desired functionality, this specification provides two mechanisms for extend this set of interfaces and events without creating
				conflicts: <a href="#extending_events-Custom_Events">custom events</a> and <a href="#extending_events-Impl_Extensions">implementation-specific extensions</a>.</p>
		</div>

		<h2><a id="extending_events-Custom_Events" href="#extending_events-Custom_Events">C.2 Custom Events</a></h2>
		<div>
			<p>A script author <span class="may">may</span> wish to define an application in terms of functional components, with event types that are meaningful to the application architecture.  The
				content author can use the <a href="#events-CustomEvent"><code>CustomEvent</code></a> interface to create their own events appropriate to the level of abstraction
				they are using.</p>

			<div class="example">
				<p><strong>Example:</strong> A content author might have created an application which features a dynamically generated bar chart.  This bar chart is meant to be updated
					every 5 minutes, or when a feed shows new information, or when the user refreshes it manually by clicking a button.  There are several handlers that have to be
					called when the chart needs to be updated: the application has to fetch the most recent data, show an icon to the user that the event is being updated, and rebuild
					the chart.  To manage this, the content author can choose to create a custom <q>updateChart</q> event, which is fired whenever one of the trigger conditions is
					met:</p>
				<pre><code>
var chartData = ...;
var evt = document.createEvent("CustomEvent");
evt.initCustomEvent( "updateChart", true, false, { data: chartData });
document.documentElement.dispatchEvent(evt);
</code></pre>
			</div>
		</div>

		<h2><a id="extending_events-Impl_Extensions" href="#extending_events-Impl_Extensions">C.3 Implementation-Specific Extensions</a></h2>
		<div>
			<p>While a new event is being designed and prototyped, or when an event is intended for implementation-specific functionality, it is desirable to distinguish it from
				standardized events.  Implementors <span class="should">should</span> prefix event types specific to their implementations with a short string to distinguish it from the same event in other
				implementations and from standardized events.  This is similar to the <a href="http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords" title="CSS 2.1: Syntax and basic data types">
				vendor-specific keyword prefixes</a> in CSS, though without the dashes (<code>"-"</code>) used in CSS, since that can cause problems when used as an attribute
				name in Javascript.</p>

			<div class="example">
				<p><strong>Example:</strong> A particular browser vendor, <q>FooCorp</q>, might wish to introduce a new event, <a class="eventtype"><code>jump</code></a>.  This vendor implements
					<a class="eventtype"><code>fooJump</code></a> in their browser, using their vendor-specific prefix, <code>'foo'</code>.  Early adopters start experimenting with the event,
					using <code>someElement.addEventListener("fooJump", doJump, false )</code>, and provide feedback to FooCorp, who change the behavior of <a class="eventtype"><code>fooJump</code></a>
					accordingly.</p>

				<p>After some time, another vendor, <q>BarOrg</q>, decides they also want the functionality, but implement it slightly differently, so they use their own vendor-specific
					prefix, <code>"bar"</code> in their event type name, <a class="eventtype"><code>barJump</code></a>.  Content authors experimenting with this version of the
					<a class="eventtype"><code>jump</code></a> event type register events with BarOrg's event type name.  Content authors who wish to write code that accounts for both browsers
					can either register each event type separately with specific handlers, or use the same handler and switch on the name of the event type; thus, early experiments in different
					codebases do not conflict, and the early adopter is able to write easily-maintained code for multiple implementations.</p>

				<p>Eventually, as the feature matures, the behavior of both browsers stabilize and might converge due to content author and user feedback or through formal standardization;
					as this stabilization occurs, and risk of conflicts decrease, content authors can remove the forked code, and use the <a class="eventtype"><code>jump</code></a> event type name (even
					before it is formally standardized) using the same event handler and the more generic registration method <code>someElement.addEventListener( "jump", doJump, false)</code>.</p>
			</div>

			<h3><a id="extending_events-prefixes" href="#extending_events-prefixes">C.3.1 Known Implementation-Specific Prefixes</a></h3>
			<div>
				<p>At the time of writing, the following event-type name prefixes are known to exist:</p>
				<table border="1" cellpadding="2" cellspacing="0" summary="Known event-type name prefixes">
					<thead>
						<tr>
							<th>Prefix</th>
							<th>Web Engine (Organization)</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td><code>moz</code>, <code>Moz</code></td>
							<td>Gecko (Mozilla)</td>
						</tr>
						<tr>
							<td><code>ms</code>, <code>MS</code></td>
							<td>Trident (Microsoft)</td>
						</tr>
						<tr>
							<td><code>o</code>, <code>O</code></td>
							<td>Presto (Opera Software)</td>
						</tr>
						<tr>
							<td><code>webkit</code></td>
							<td>WebKit (Apple, Google, others)</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>

	<!-- Appendix: Security considerations ========================================================-->

	<h1><a id="security-considerations-Security" href="#security-considerations-Security">Appendix D: Security Considerations</a></h1>
	<div>

		<p>This appendix discusses security considerations for DOM Level 3 Events implementations. The discussion is limited to security issues that arise directly
			from implementation of the event model, APIs and events defined in this specification. Implementations typically support other features like scripting languages,
			other APIs and additional events not defined in this document; these features constitute an unknown factor and are out of scope of this document. Implementers <span class="should">should</span>
			consult the specifications of such features for their respective security considerations.</p>

		<p>Many of the event types defined in this specification are dispatched in response to user actions. This allows malicious event listeners to gain access to information
			users would typically consider confidential, e.g., typos they might have made when filling out a form, if they reconsider their answer to a multiple choice question
			shortly before submitting a form, their typing rate or primary input mechanism. In the worst case, malicious event listeners are able to capture all user interactions
			and submit them to a third party through means, while not defined in DOM Level 3 Events, generally available in DOM implementations, such as the XMLHttpRequest
			interface.</p>

		<p>In DOM implementations that support facilities to load external data, events like the <a class="eventtype"><code>error</code></a> event can provide access to sensitive information about
			the environment of the computer system or network; an example would be a malicious HTML document that attempts to embed a resource on the local network or the localhost
			on different ports; an embedded <a class="def" href="#glossary-DOM-application">DOM application</a> could then listen for <a class="eventtype"><code>error</code></a>
			and <a class="eventtype"><code>load</code></a> events to determine which other computers in a network are accessible from the local system or which ports are open on the
			system to prepare further attacks.</p>

		<p>An implementation of DOM Level 3 Events alone is generally insufficient to perform attacks of this kind and the security considerations of the facilities that possibly
			support such attacks apply. For conformance with this specification, DOM implementations <span class="may">may</span> take reasonable steps to ensure that <a class="def" href="#glossary-DOM-application">
			DOM applications</a> do not get access to confidential or sensitive information, for example, they might choose to dispatch no <a class="eventtype"><code>load</code></a>
			events to nodes that attempt to embed resources on the local network.</p>
	</div>

	<!-- Appendix: Changes ========================================================-->

	<h1><a id="changes-Changes" href="#changes-Changes">Appendix E: Changes</a></h1>
	<div>

		<h2><a id="changes-DOMEvents2to3Changes" href="#changes-DOMEvents2to3Changes">E.1 Changes between DOM Level 2 Events and DOM Level 3 Events</a></h2>
		<div>

			<p>Numerous clarifications to the interfaces and event types have been made. The <code>HTMLEvents</code> module is no longer defined in this document. The event types
				<a class="eventtype"><code>focus</code></a> and <a class="eventtype"><code>blur</code></a> have been added to the <a href="#events-UIEvent"><code>UIEvent</code></a>
				module, the event type <a class="eventtype"><code>dblclick</code></a> has been added to the <a href="#events-MouseEvent"><code>MouseEvent</code></a> module. This new
				specification provides a better separation between the DOM event flow, the event types, and the DOM interfaces.</p>

			<h3><a id="changes-DOMEvents2to3Changes-flow" href="#changes-DOMEvents2to3Changes-flow">E.1.1 Changes to DOM Level 2 event flow</a></h3>
			<div>

				<p>This new specification introduced the following new concepts in the event flow:</p>

				<ul>
					<li>ordering of event listeners: event listeners are now ordered while ordering was unspecified in DOM Level 2 Events.</li>
					<li>the event flow now includes the <a class="def" href="#glossary-defaultView">defaultView</a> (or <code>window</code>), to reflect existing implementations.</li>
				</ul>
			</div>

			<h3><a id="changes-DOMEvents2to3Changes-event-types" href="#changes-DOMEvents2to3Changes-event-types">E.1.2 Changes to DOM Level 2 event types</a></h3>
			<div>

				<p>Many clarifications have been made on the event types. The conformance is now explicitly defined against the event types, and not only in terms of interfaces used
					by the event types.</p>

				<p><code>"MutationEvents"</code> have been deprecated. Support for namespaced events, present in early drafts of this specification, has also been removed.</p>

				<p>For user agents which support the <a class="eventtype" href="#event-type-DOMNodeInserted"><code>DOMNodeInserted</code></a> and <a class="eventtype" href="#event-type-DOMNodeRemoved">
					<code>DOMNodeRemoved</code></a> event types, this specification no longer requires that the event type be fired for <code>Attr</code> nodes.</p>

				<p>The <a class="eventtype"><code>resize</code></a> event type no longer bubbles, reflecting existing implementations.</p>
			</div>

			<h3><a id="changes-DOMLevel2to3Changes" href="#changes-DOMLevel2to3Changes">E.1.3 Changes to DOM Level 2 Events interfaces</a></h3>
			<div>

				<dl>
					<dt>Interface <a href="#events-Event"><code>Event</code></a></dt>
					<dd>The <a href="#events-Event"><code>Event</code></a> interface has one new attribute, <a href="#events-event-type-defaultPrevented"><code>Event.defaultPrevented</code></a>,
						and one new method, <a href="#events-event-type-stopImmediatePropagation"><code>Event.stopImmediatePropagation()</code></a>.<br />
						<a href="#events-event-type-timeStamp"><code>Event.timeStamp</code></a> is now a <code>Number</code> in the ECMAScript binding; a proposed correction to make the
						same change in [<cite><a class="normative" href="#references-DOMCore">DOM3 Core</a></cite>] is forthcoming.<br />
						DOM Level 3 Events considers the <a href="#events-event-type-type"><code>Event.type</code></a> attribute to be case-sensitive, while DOM Level 2 Events considers
						<a href="#events-event-type-type"><code>Event.type</code></a> to be case-insensitive.</dd>

					<dt>Interface <a href="#events-EventTarget"><code>EventTarget</code></a></dt>
					<dd>The method <a href="#events-EventTarget-dispatchEvent"><code>EventTarget.dispatchEvent()</code></a> was modified.</dd>

					<dt>Interface <a href="#events-MouseEvent"><code>MouseEvent</code></a></dt>
					<dd>The <a href="#events-MouseEvent"><code>MouseEvent</code></a> interface has one new method <a href="#events-MouseEvent-getModifierState"><code>MouseEvent.getModifierState()</code></a>.</dd>

					<dt>Exception <code>EventException</code></dt>
					<dd>The exception <code>EventException</code> <a href="#note-eventexcpetion-removed">is removed in this specification</a>. The prior <code>DISPATCH_REQUEST_ERR</code>
						code is re-mapped to a <code>DOMException</code> of type <code>InvalidStateError</code>.</dd>
				</dl>
			</div>

			<h3><a id="changes-DOMLevel3Addons" href="#changes-DOMLevel3Addons">E.1.4 New Interfaces</a></h3>
			<div>

				<p>The interfaces <a href="#events-CustomEvent"><code>CustomEvent</code></a>, <a href="#events-FocusEvent"><code>FocusEvent</code></a>, <a href="#events-KeyboardEvent">
					<code>KeyboardEvent</code></a>, <a href="#events-CompositionEvent"><code>CompositionEvent</code></a>, and <a href="#events-WheelEvent"><code>WheelEvent</code></a>
					were added to the Events module.</p>
			</div>
		</div>

		<h2><a id="changes-drafts" href="#changes-drafts">E.2 Changes between different drafts of DOM Level 3 Events</a></h2>
		<div>

			<p>The DOM Level 3 Events document was previously developed between 2000 and 2003, and and published as a W3C Note, pending further feedback and interest from implementers.
				In 2006, it was picked up for revision and progress on the Recommendation Track, and is now being revised to reflect the current state of implementation and the
				needs of script authors.</p>

			<p>Despite its status only as a W3C Note, rather than an official Recommendation, DOM 3 Events saw some implementation, and reference by other specifications, so care
				is being taken to cause minimal disruption, while still adapting the specification to the current environment.</p>

			<p>This specification has been reordered significantly from the earlier W3C Note form, and from the structure of DOM2 Events, in order to clarify the material.  New
				diagrams have been put in place to represent hierarchies and events flows more clearly.  Here are some of the more important changes between drafts:</p>

			<ul>
				<li>The <q>key identifier</q> feature has been renamed <q>key value</q> to disambiguate them from unique identifiers for keys.</li>
				<li>The <code>change</code>, <code>submit</code>, and <code>reset</code> events were removed, since they were specific to HTML forms, and are specified in [<cite><a
					class="informative" href="#references-HTML5">HTML5</a></cite>].</li>
				<li>Namespaced events have been removed.</li>
				<li>Updated to use <a href="#references-WebIDL">Web IDL</a>.</li>
				<li>EventException has been removed.</li>
			</ul>
		</div>
	</div>

	<!-- Appendix: Acknowledgements ========================================================-->

	<h1><a id="acknowledgements-contributors" href="#acknowledgements-contributors">Appendix F: Acknowledgements</a></h1>
	<div>

		<p class="1st">Many people contributed to the DOM specifications (Level 1, 2 or 3), including participants of the DOM Working Group, the DOM Interest Group,the WebAPI
			Working Group, and the WebApps Working Group. We especially thank the following:</p>

		<p>Andrew Watson (Object Management Group), Andy Heninger (IBM), Angel Diaz (IBM), Arnaud Le Hors (W3C and IBM), Ashok Malhotra (IBM and Microsoft), Ben Chang (Oracle),
			Bill Smith (Sun), Bill Shea (Merrill Lynch), Bob Sutor (IBM), Chris Lovett (Microsoft), Chris Wilson (Microsoft), David Brownell (Sun), David Ezell (Hewlett-Packard
			Company), David Singer (IBM), Dimitris Dimitriadis (Improve AB and invited expert), Don Park (invited), Elena Litani (IBM), Eric Vasilik (Microsoft), Gavin Nicol
			(INSO), Ian Jacobs (W3C), James Clark (invited), James Davidson (Sun), Jared Sorensen (Novell), Jeroen van Rotterdam (X-Hive Corporation), Joe Kesselman (IBM),
			Joe Lapp (webMethods), Joe Marini (Macromedia), Johnny Stenback (Netscape/AOL), Jon Ferraiolo (Adobe), Jonathan Marsh (Microsoft), Jonathan Robie (Texcel Research
			and Software AG), Kim Adamson-Sharpe (SoftQuad Software Inc.), Lauren Wood (SoftQuad Software Inc., <em>former Chair</em>), Laurence Cable (Sun), Mark Davis (IBM),
			Mark Scardina (Oracle), Martin D&#xFC;rst (W3C), Mary Brady (NIST), Mick Goulish (Software AG), Mike Champion (Arbortext and Software AG), Miles Sabin (Cromwell
			Media), Patti Lutsky (Arbortext), Paul Grosso (Arbortext), Peter Sharpe (SoftQuad Software Inc.), Phil Karlton (Netscape), Philippe Le H&#xE9;garet (W3C, <em>W3C Team
			Contact and former Chair</em>), Ramesh Lekshmynarayanan (Merrill Lynch), Ray Whitmer (iMall, Excite@Home, and Netscape/AOL, <em>Chair</em>), Rezaur Rahman (Intel),
			Rich Rollman (Microsoft), Rick Gessner (Netscape), Rick Jelliffe (invited), Rob Relyea (Microsoft), Scott Isaacs (Microsoft), Sharon Adler (INSO), Steve Byrne (JavaSoft),
			Tim Bray (invited), Tim Yu (Oracle), Tom Pixley (Netscape/AOL), Vidur Apparao (Netscape), Vinod Anupam (Lucent), Anne van Kesteren (Opera Software), Arun Ranganathan
			(AOL), Bj&#xF6;rn H&#xF6;hrmann, Charles McCathieNevile (Opera Software, <em>Co-Chair</em>), Christophe Jolif (ILOG), Dean Jackson (W3C, <em>W3C Team Contact</em>),
			Doug Schepers (Vectoreal), Gorm Haug Eriksen (Opera Software), Ian Davis (Talis Information Limited), Ian Hickson (Google), John Robinson (AOL), Jonas Sicking (Mozilla
			Foundation), Luca Mascaro (HTML Writers Guild), Maciej Stachowiak (Apple Computer), Marc Hadley (Sun Microsystems), Michael Shenfield (Research In Motion), Robin
			Berjon, (Expway, <em>Co-Chair</em>) , Scott Hayman (Research In Motion), St&#xE9;phane Sire (IntuiLab), and T.V. Raman (Google).</p>

		<p><strong>Contributors:</strong> In the WebApps Working Group, the following people made substantial material contributions in the process of refining and revising
			this specification:  Olli Pettay (Mozilla), Hallvord R. M. Steen (Opera), Travis Leithead (Microsoft), Hironori Bono (Google), Daniel Danilatos (Google), Glenn
			Adams (Samsung), Mark Vickers (Comcast), Bob Lund (Cable Laboratories) and Cameron McCormack (Invited Expert / Mozilla), .</p>

		<p><strong>Glossary contributors:</strong> Arnaud Le Hors (W3C) and Robert S. Sutor (IBM Research).</p>

		<p><strong>Test suite contributors:</strong> Fred Drake, Mary Brady (NIST), Carmelo Montanez (NIST), Rick Rivello (NIST), Robert Clary (Netscape), Neil Delima (IBM),
			with a special mention to Curt Arnold.</p>

		<p>Thanks to all those who have helped to improve this specification by sending suggestions and corrections (please, keep bugging us with your issues!), or writing
			informative books or Web sites:  Brad Pettit, Dylan Schiemann, David Flanagan, Steven Pemberton, Curt Arnold, Al Gilman, Misha Wolf, Sigurd Lerstad, Michael B.
			Allen, Alexander J. Vincent, Martin D&#xFC;rst, Ken Rehor, NAKANO Masayuki, Garrett Smith, Sergey Ilinsky, Martijn Wargers, Sean Hogan, Magnus Kristiansen, Alex
			Russell, Jorge Chamorro, Peter-Paul Koch, William Edney, Erik Arvidsson, Cameron McCormack, Kazuyuki Ashimura, Øistein E. Andersen, James Su, Tony Chang, Ojan Vafai,
			Richard Ishida, Paul Irish, Mike Taylor, Oliver Hunt, Alexey Proskuryakov, Giuseppe Pascale, and Jan Goyvaerts (regular-expressions.info).</p>

		<h2><a id="acknowledgements-Productions" href="#acknowledgements-Productions">F.1 Production Systems</a></h2>
		<div>

			<p>The current drafts of this specification are lovingly hand-crafted in HTML and SVG.</p>

			<p>Earlier versions of this specification were written in XML; the HTML, OMG IDL, Java and ECMAScript bindings were all produced automatically.  Thanks to Joe English,
				author of <a class="normative" href="http://www.flightlab.com/cost/">cost</a>, which was used as the basis for producing DOM Level 1. Thanks also to Gavin Nicol,
				who wrote the scripts which run on top of cost. Arnaud Le Hors and Philippe Le H&#xE9;garet maintained the scripts.</p>

			<p>After DOM Level 1, we used <a class="normative" href="http://xerces.apache.org/xerces-j/">Xerces</a> as the basis DOM implementation and wish to thank the authors.
				Philippe Le H&#xE9;garet and Arnaud Le Hors wrote the <a class="normative" href="http://dev.w3.org/cvsweb/java/classes/org/w3c/tools/specgenerator/">Java programs</a>
				which are the <a class="def" href="#glossary-DOM-application">DOM application</a>.</p>

			<p>Thanks also to Jan K&#xE4;rrman, author of <a class="normative" href="http://user.it.uu.se/~jan/html2ps.html">html2ps</a>, which we use in creating the PostScript
				version of the specification.</p>
		</div>
	</div>

	<!-- Appendix: References ========================================================-->

	<h1><a id="references-role-references" href="#references-role-references">Appendix G: References</a></h1>
	<div>

		<p>For the latest version of any W3C specification please consult the list of <a class="normative" href="http://www.w3.org/TR/">W3C Technical Reports</a>
			available at http://www.w3.org/TR/. </p>

		<h2><a id="references-References-Normative" href="#references-References-Normative">G.1 Normative References</a></h2>
		<div>

			<dl>
				<dt><strong>[<a id="ref-BCP-47">BCP-47</a>]</strong> Best Current Practice 47: Tags for Identifying Languages</dt>
				<dd>A. Phillips, M. Davis, Editors, September 2009. The specification for describing the structure, content, construction, and semantics of language tags to indicate
					the human language used. Available at <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a></dd>

				<dt><strong>[<a id="references-charmod">CharMod</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2005/REC-charmod-20050215/">Character Model for the World Wide Web 1.0: Fundamentals</a></cite>, M. D&#xFC;rst, F. Yergeau,
					R. Ishida, M. Wolf, T. Texin, Editors. World Wide Web Consortium, 15 February 2005. This version of the Character Model for the World Wide Web 1.0: Fundamentals
					specification is http://www.w3.org/TR/2005/REC-charmod-20050215/. The <a class="normative" href="http://www.w3.org/TR/charmod/">latest version of Character Model for
					the World Wide Web 1.0: Fundamentals</a> is available at http://www.w3.org/TR/charmod/. </dd>

				<dt><strong>[<a id="references-DOMCore">DOM3 Core</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/">Document Object Model Level 3 Core Specification</a></cite>, A. Le Hors, et al., Editors.
					World Wide Web Consortium, April 2004. This version of the Document Object Model Level 3 Core Specification is http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/.
					The <a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/">latest version of DOM Level 3 Core</a> is available at http://www.w3.org/TR/DOM-Level-3-Core/. </dd>

				<dt><strong>[<a id="references-DOM2Events">DOM2 Events</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">Document Object Model Level 2 Events Specification</a></cite>, T. Pixley, Editor. World
					Wide Web Consortium, November 2000. This version of the Document Object Model Level 2 Events Specification is http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113.
					The <a class="normative" href="http://www.w3.org/TR/DOM-Level-2-Events/">latest version of Document Object Model Level 2 Events</a> is available
					at http://www.w3.org/TR/DOM-Level-2-Events/. </dd>

				<dt><strong>[<a id="references-ECMAScript">ECMAScript</a>]</strong></dt>
				<dd><cite><a href="http://ecma-international.org/ecma-262/5.1/">ECMAScript Language Specification</a></cite>, 5.1 Edition. European Computer Manufacturers Association,
					Standard ECMA-262, June 2011. This version of the ECMAScript Language is available from http://ecma-international.org/ecma-262/5.1/. </dd>

				<dt><strong>[<a id="references-HTML5">HTML5</a>]</strong></dt>
				<dd><cite class="w3cwd"><a href="http://www.w3.org/TR/2012/WD-html5-20120329/">HTML 5</a></cite>, I. Hickson, editor. World Wide Web Consortium, <span class="wip">work
					in progress</span>, 29 March 2012. This edition of HTML 5 is http://www.w3.org/TR/2012/WD-html5-20120329/. The <a href="http://www.w3.org/TR/html5/">latest edition of
					HTML 5</a> is available at http://www.w3.org/TR/html5/. </dd>

				<dt><strong>[<a id="references-Java">Java</a>]</strong></dt>
				<dd><cite><a href="http://java.sun.com/docs/books/jls">The Java Language Specification</a></cite>, J. Gosling, B. Joy, and G. Steele, Authors. Addison-Wesley, September
					1996. Available at http://java.sun.com/docs/books/jls </dd>

				<dt id="ref-rfc2119"><strong>[<a id="RFC2119">RFC2119</a>]</strong> Key words for use in RFCs to indicate Requirement Levels</dt>
				<dd>S Bradner, 1997. The specification for how to use English to specify normativity, as if it were a technical language. Available at <a href="http://www.ietf.org/rfc/rfc2119.txt">
					http://www.ietf.org/rfc/rfc2119.txt </a></dd>

				<dt><strong>[<a id="references-UnicodeNormalization">UAX #15</a>]</strong></dt>
				<dd><cite><a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Forms</a></cite>, The Unicode Standard Annex #15. The Unicode Consortium, 2006. The
					latest version of this annex is available at http://www.unicode.org/reports/tr15/.</dd>

				<dt><strong>[<a id="references-Unicode">Unicode</a>]</strong></dt>
				<dd><cite>The Unicode Standard, Version 5.0</cite>, ISBN 0-321-48091-0, as updated periodically by the publication of new versions. See also <a class="normative"
					href="http://www.unicode.org/standard/versions/">Versions of the Unicode Standard</a>, available at http://www.unicode.org/standard/versions/ for
					latest version and additional information on versions of the standard and of the Unicode Character Database.</dd>

				<dt><strong>[<a id="references-WebIDL">WEB IDL</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/WebIDL/">Web IDL</a></cite>, C. McCormack. 19 April 2012. This version of the Web IDL Candidate Recommendation is:
					http://www.w3.org/TR/2012/CR-WebIDL-20120419/. The <a href="http://dev.w3.org/2006/webapi/WebIDL/">latest version of Web IDL</a> is available at
					http://dev.w3.org/2006/webapi/WebIDL/. </dd>

				<dt><strong>[<a id="references-Namespaces10">XML Namespaces 1.0</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2006/REC-xml-names-20060816/">Namespaces in XML 1.0</a></cite>, T. Bray, D. Hollander, A. Layman, and R. Tobin, Editors. World
					Wide Web Consortium, 16 August 2006. This version of the Namespaces in XML 1.0 Specification is http://www.w3.org/TR/2006/REC-xml-names-20060816. The <a class="normative"
					href="http://www.w3.org/TR/xml-names/">latest version of Namespaces in XML 1.0</a> is available at http://www.w3.org/TR/xml-names/.</dd>
			</dl>
		</div>

		<h2><a id="references-References-Informative" href="#references-References-Informative">G.2 Informative References</a></h2>
		<div>
			<dl>
				<dt><strong>[<a id="ref-ARIA">ARIA</a>]</strong></dt>
				<dd><cite class="w3cwd"><a href="http://www.w3.org/TR/2009/WD-wai-aria-20091215/">Accessible Rich Internet Applications (WAI-ARIA) Version 1.0</a></cite>, J. Craig, M. Cooper,
					R. Schwerdtfeger, L. Seeman, L. Pappas, eds. World Wide Web Consortium, 18 January 2011. This version of the WAI-ARIA Candidate Recommendation is
					http://www.w3.org/TR/2011/CR-wai-aria-20110118/. The <a href="http://www.w3.org/TR/wai-aria/">latest edition of WAI-ARIA</a> is available at http://www.w3.org/TR/wai-aria/. </dd>

				<dt><strong>[<a id="ref-xforms">XFORMS</a>]</strong></dt>
				<dd><cite class="w3crec"><a href="http://www.w3.org/TR/2009/REC-xforms-20091020/">XForms 1.1</a></cite>, J. Boyer, ed. World Wide Web Consortium, <span class="wip">work
					in progress</span>, 20 October 2009. This edition of XForms 1.1 is http://www.w3.org/TR/2009/REC-xforms-20091020/. The <a href="http://www.w3.org/TR/xforms/">latest
					edition of XForms</a> is available at http://www.w3.org/TR/xforms/. </dd>

				<dt><strong>[<a id="references-CSS2">CSS2.1</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2011/REC-CSS2-20110607/">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</a></cite>, B. Bos, T. &#xC7;elik,
					I. Hickson, H.W. Lie, Editors. World Wide Web Consortium, 07 June 2011, This version of the CSS 2.1 Recommendation is http://www.w3.org/TR/2011/REC-CSS2-20110607/.
					The <a class="normative" href="http://www.w3.org/TR/CSS2/">latest version of CSS 2.1</a> is available at http://www.w3.org/TR/CSS2/. </dd>

				<dt><strong>[<a id="references-DOMLS">DOM3 Load and Save</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/">Document Object Model Level 3 Load and Save Specification</a></cite>, J. Stenback, A. Heninger,
					Editors. World Wide Web Consortium, April 2004. This version of the DOM Level 3 Load and Save Specification is http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/.
					The <a class="normative" href="http://www.w3.org/TR/DOM-Level-3-LS/">latest version of DOM Level 3 Load and Save</a> is available at http://www.w3.org/TR/DOM-Level-3-LS/. </dd>

				<dt><strong>[<a id="references-DOMRange">DOM2 Range</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/">Document Object Model (DOM) Level 2 Traversal and Range Specification</a></cite>, J. Kesselman,
					J. Robie, M. Champion, P. Sharpe, V. Apparao, L. Wood, Editors. World Wide Web Consortium, November 2000.</dd>

				<dt><strong>[<a id="references-DOM4">DOM4</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/dom/">DOM4</a></cite>, A. van Kesteren, A. Gregor, Ms2ger, Editors. World Wide Web Consortium, <span class="wip">Working Draft</span>,
					5 April 2012. </dd>

				<dt><strong>[<a id="references-DWW95">DWW95</a>]</strong></dt>
				<dd><cite>Developing International Software for Windows 95 and Windows NT: A Handbook for International Software Design</cite>, N. Kano, Author. Microsoft Press, 1995.
					ISBN 1-55615-840-8.</dd>

				<dt><strong>[<a id="references-HTML40">HTML 4.01</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/1999/REC-html401-19991224/">HTML 4.01 Specification</a></cite>, D. Raggett, A. Le Hors, and I. Jacobs, Editors. World Wide
					Web Consortium, December 1999. This version of the HTML 4.01 Recommendation is http://www.w3.org/TR/1999/REC-html401-19991224. The <a class="normative" href="http://www.w3.org/TR/html4/">
					latest version of HTML 4</a> is available at http://www.w3.org/TR/html4/. </dd>

				<dt><strong>[<a id="references-HTMLEd">HTML Editing</a>]</strong></dt>
				<dd><cite><a href="https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html">HTML Editing APIs</a></cite>, A. Gregor, Editor. World Wide Web Consortium, <span class="wip">
					work in progress</span>, 12 March 2012. </dd>

				<dt><strong>[<a id="references-ISO-9995-2-3">ISO9995-2/3</a>]</strong></dt>
				<dd><cite><a href="http://www.iso.org/iso/search.htm?qt=9995&amp;published=on">ISO/IEC 9995, Information technology -- Keyboard layouts for text and office systems -- Part 2:
					Alphanumeric Section and Part 3: Complementary layouts of the alphanumeric zone of the alphanumeric section.</a></cite></dd>

				<dt><strong>[<a id="references-ISO-9995-8">ISO9995-8</a>]</strong></dt>
				<dd><cite><a href="http://www.iso.org/iso/search.htm?qt=9995&amp;published=on">ISO/IEC 9995-8:2006, Information technology -- Keyboard layouts for text and office systems --
					Part 8: Allocation of letters to the keys of a numeric keypad.</a></cite></dd>

				<dt><strong>[<a id="references-KeyEvent">KeyEvent for Java</a>]</strong></dt>
				<dd><cite><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html">Java&#x2122; Platform, Standard Edition 6 API Specification, Class java.awt.events.KeyEvent</a></cite>.
					Oracle. Available at http://docs.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html. </dd>

				<dt><strong>[<a id="references-Keys">Keys enumeration for .Net</a>]</strong></dt>
				<dd><cite><a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.keys.aspx">.NET Framework 4.5 Class Library, Keys Enumeration</a></cite>.
					Microsoft. Available at http://msdn.microsoft.com/en-us/library/system.windows.forms.keys.aspx.</dd>

				<dt><strong>[<a id="references-KeyProps">KeyProps</a>]</strong></dt>
				<dd><cite class="w3cwd"><a href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/Note-KeyProps.html">Legacy Keyboard Event Properties</a></cite>, D. Schepers, editor.
					World Wide Web Consortium, <span class="wip">work in progress</span>, 04 August 2010. This edition of Legacy Keyboard Event Properties is
					http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/Note-KeyProps.html. The <a href="http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/Note-KeyProps.html">latest edition
					of Legacy Keyboard Event Properties</a> is available at http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/Note-KeyProps.html. </dd>

				<dt><strong>[<a id="references-pcre">PCRE</a>]</strong></dt>
				<dd><cite><a href="http://www.pcre.org/">Perl Compatible Regular Expressions library</a></cite>.  Available at http://www.pcre.org/. </dd>

				<dt><strong>[<a id="ref-rfc20">RFC20</a>]</strong>ASCII format for Network Interchange</dt>
				<dd>V. Cerf, 1969. Available at <a href="http://tools.ietf.org/rfc/rfc20.txt">http://tools.ietf.org/rfc/rfc20.txt</a></dd>

				<dt><strong>[<a id="ref-US-ASCII">US-ASCII</a>]</strong>Coded Character Set - 7-Bit American Standard Code for Information Interchange</dt>
				<dd>Standard ANSI X3.4-1986, ANSI, 1986.</dd>

				<dt><strong>[<a id="references-UAAG2">UAAG 2.0</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/">User Agent Accessibility Guidelines (UAAG) 2.0</a></cite>, J. Allan, K. Ford, J. Richards, J. Spellman, editors.
					World Wide Web Consortium, <span class="wip">work in progress</span>, 8 March 2010. This version of the UAAG 2.0 specfication is http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/.
					The <a class="normative" href="http://www.w3.org/TR/UAAG20/">latest version of UAAG 2.0</a> is available at http://www.w3.org/TR/UAAG20/. </dd>

				<dt><strong>[<a id="ref-WIN1252">WIN1252</a>]</strong></dt>
				<dd><a href="http://www.microsoft.com/globaldev/reference/sbcs/1252.htm">Windows 1252</a> a Coded Character Set - 8-Bit. Microsoft Corporation.</dd>

				<dt><strong>[<a id="references-XML">XML 1.0</a>]</strong></dt>
				<dd><cite><a href="http://www.w3.org/TR/2006/REC-xml-20060816/">Extensible Markup Language (XML) 1.0</a></cite>, T. Bray, J. Paoli, C. M. Sperberg-McQueen, et. al,
					Editors. World Wide Web Consortium, August 2006. This version of the XML 1.0 Recommendation is http://www.w3.org/TR/2006/REC-xml-20060816/. The <a class="normative"
					href="http://www.w3.org/TR/xml/">latest version of XML 1.0</a> is available at http://www.w3.org/TR/xml/. </dd>

				<dt><strong>[<a id="references-DASE">DASE</a>]</strong></dt>
				<dd><cite><a href="http://www.atsc.org/cms/standards/a100/a_100_2.pdf">ATSC A/100-2, DTV Application Software Environment Level 1 (DASE-1) Part 2: Declarative Applications
					and Environment</a></cite>.  Advanced Television Systems Committee, 09 March 2003. Available at <a href="http://www.atsc.org/cms/standards/a100/a_100_2.pdf">
					http://www.atsc.org/cms/standards/a100/a_100_2.pdf </a>.</dd>

				<dt><strong>[<a id="references-OCAP">OCAP</a>]</strong></dt>
				<dd><cite><a href="http://www.cablelabs.com/specifications/OC-SP-OCAP1.1.3-100603.pdf">Open Cable Application Platform 1.1.3</a></cite>.  Cable Television Laboratories,
					Inc., 03 June 2010. Available at <a href="http://www.cablelabs.com/specifications/OC-SP-OCAP1.1.3-100603.pdf">http://www.cablelabs.com/specifications/OC-SP-OCAP1.1.3-100603.pdf</a>.</dd>

				<dt><strong>[<a id="references-WEB4CE">WEB4CE</a>]</strong></dt>
				<dd><cite><a href="http://www.ce.org/Standards/Standard-Listings/R7-Home-Network-Committee/CEA-2014-B-(ANSI%29.aspx">ANSI/CEA-2014-B, Web-based Protocol and Framework for Remote User Interface on UPnPTM Networks
					and the Internet (Web4CE)</a></cite>. Consumer Electronics Association, January 2011. Available at <a href="http://www.ce.org/Standards/Standard-Listings/R7-Home-Network-Committee/CEA-2014-B-(ANSI).aspx">
						http://www.ce.org/Standards/Standard-Listings/R7-Home-Network-Committee/CEA-2014-B-(ANSI%29.aspx </a>.</dd>
			</dl>
		</div>
	</div>
  </body>
</html>
